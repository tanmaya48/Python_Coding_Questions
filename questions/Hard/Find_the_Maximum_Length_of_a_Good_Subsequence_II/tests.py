from question import maximumLength
tests = ['assert maximumLength([1, 2, 1, 1, 3], 2) == 4', 'assert maximumLength([1, 2, 3, 4, 5, 1], 0) == 2', 'assert maximumLength([2], 0) == 1', 'assert maximumLength([2], 1) == 1', 'assert maximumLength([3], 1) == 1', 'assert maximumLength([4], 0) == 1', 'assert maximumLength([5], 0) == 1', 'assert maximumLength([6], 0) == 1', 'assert maximumLength([6], 1) == 1', 'assert maximumLength([8], 1) == 1', 'assert maximumLength([10], 0) == 1', 'assert maximumLength([2, 5], 1) == 2', 'assert maximumLength([3, 15], 0) == 1', 'assert maximumLength([5, 1], 2) == 2', 'assert maximumLength([5, 19], 2) == 2', 'assert maximumLength([7, 9], 1) == 2', 'assert maximumLength([7, 20], 1) == 2', 'assert maximumLength([10, 10], 0) == 2', 'assert maximumLength([10, 13], 0) == 1', 'assert maximumLength([10, 19], 2) == 2', 'assert maximumLength([11, 16], 2) == 2', 'assert maximumLength([12, 4], 1) == 2', 'assert maximumLength([12, 12], 2) == 2', 'assert maximumLength([14, 2], 1) == 2', 'assert maximumLength([14, 3], 0) == 1', 'assert maximumLength([17, 1], 2) == 2', 'assert maximumLength([18, 7], 0) == 1', 'assert maximumLength([19, 9], 0) == 1', 'assert maximumLength([20, 1], 2) == 2', 'assert maximumLength([20, 2], 0) == 1', 'assert maximumLength([1, 14, 1], 3) == 3', 'assert maximumLength([2, 29, 20], 1) == 2', 'assert maximumLength([6, 24, 7], 2) == 3', 'assert maximumLength([9, 1, 15], 2) == 3', 'assert maximumLength([9, 5, 10], 2) == 3', 'assert maximumLength([10, 12, 18], 2) == 3', 'assert maximumLength([10, 29, 24], 2) == 3', 'assert maximumLength([14, 5, 3], 1) == 2', 'assert maximumLength([15, 1, 6], 0) == 1', 'assert maximumLength([15, 20, 16], 3) == 3', 'assert maximumLength([18, 13, 30], 0) == 1', 'assert maximumLength([21, 3, 10], 0) == 1', 'assert maximumLength([21, 10, 8], 3) == 3', 'assert maximumLength([21, 14, 25], 3) == 3', 'assert maximumLength([21, 22, 23], 2) == 3', 'assert maximumLength([23, 18, 18], 0) == 2', 'assert maximumLength([25, 30, 27], 3) == 3', 'assert maximumLength([27, 21, 15], 3) == 3', 'assert maximumLength([27, 30, 20], 0) == 1', 'assert maximumLength([28, 23, 29], 2) == 3', 'assert maximumLength([28, 28, 28], 2) == 3', 'assert maximumLength([28, 28, 29], 2) == 3', 'assert maximumLength([28, 30, 28], 0) == 2', 'assert maximumLength([28, 30, 28], 1) == 2', 'assert maximumLength([28, 30, 28], 2) == 3', 'assert maximumLength([28, 30, 29], 0) == 1', 'assert maximumLength([29, 28, 28], 2) == 3', 'assert maximumLength([29, 28, 30], 2) == 3', 'assert maximumLength([29, 29, 28], 0) == 2', 'assert maximumLength([29, 29, 29], 1) == 3', 'assert maximumLength([29, 29, 29], 2) == 3', 'assert maximumLength([29, 29, 30], 3) == 3', 'assert maximumLength([29, 30, 28], 0) == 1', 'assert maximumLength([29, 30, 28], 1) == 2', 'assert maximumLength([29, 30, 29], 0) == 2', 'assert maximumLength([29, 30, 29], 2) == 3', 'assert maximumLength([29, 30, 30], 0) == 2', 'assert maximumLength([29, 30, 30], 1) == 3', 'assert maximumLength([29, 30, 30], 3) == 3', 'assert maximumLength([30, 29, 29], 1) == 3', 'assert maximumLength([30, 29, 29], 3) == 3', 'assert maximumLength([30, 29, 30], 0) == 2', 'assert maximumLength([30, 29, 30], 2) == 3', 'assert maximumLength([30, 29, 30], 3) == 3', 'assert maximumLength([30, 30, 28], 1) == 3', 'assert maximumLength([30, 30, 28], 3) == 3', 'assert maximumLength([30, 30, 29], 0) == 2', 'assert maximumLength([30, 30, 30], 1) == 3', 'assert maximumLength([30, 30, 30], 3) == 3', 'assert maximumLength([2, 38, 23, 16], 2) == 3', 'assert maximumLength([4, 29, 35, 25], 3) == 4', 'assert maximumLength([6, 12, 33, 5], 2) == 3', 'assert maximumLength([8, 3, 39, 13], 1) == 2', 'assert maximumLength([8, 13, 7, 5], 1) == 2', 'assert maximumLength([8, 18, 9, 5], 3) == 4', 'assert maximumLength([10, 2, 12, 31], 2) == 3', 'assert maximumLength([12, 11, 8, 33], 4) == 4', 'assert maximumLength([16, 10, 32, 7], 0) == 1', 'assert maximumLength([16, 27, 32, 38], 0) == 1', 'assert maximumLength([20, 25, 13, 27], 3) == 4', 'assert maximumLength([21, 9, 26, 24], 2) == 3', 'assert maximumLength([23, 36, 35, 28], 3) == 4', 'assert maximumLength([25, 15, 5, 13], 1) == 2', 'assert maximumLength([26, 13, 23, 12], 1) == 2', 'assert maximumLength([27, 18, 26, 40], 3) == 4', 'assert maximumLength([32, 35, 8, 11], 3) == 4', 'assert maximumLength([33, 2, 23, 22], 2) == 3', 'assert maximumLength([37, 15, 16, 4], 3) == 4', 'assert maximumLength([38, 19, 40, 22], 3) == 4', 'assert maximumLength([38, 40, 38, 38], 0) == 3', 'assert maximumLength([38, 40, 38, 38], 2) == 4', 'assert maximumLength([38, 40, 38, 39], 4) == 4', 'assert maximumLength([38, 40, 38, 40], 1) == 3', 'assert maximumLength([38, 40, 39, 39], 4) == 4', 'assert maximumLength([38, 40, 40, 39], 4) == 4', 'assert maximumLength([39, 38, 38, 38], 2) == 4', 'assert maximumLength([39, 38, 39, 38], 3) == 4', 'assert maximumLength([39, 38, 40, 39], 3) == 4', 'assert maximumLength([39, 38, 40, 40], 3) == 4', 'assert maximumLength([39, 38, 40, 40], 4) == 4', 'assert maximumLength([39, 39, 40, 39], 4) == 4', 'assert maximumLength([39, 39, 40, 40], 0) == 2', 'assert maximumLength([39, 39, 40, 40], 2) == 4', 'assert maximumLength([39, 39, 40, 40], 4) == 4', 'assert maximumLength([39, 40, 38, 39], 0) == 2', 'assert maximumLength([39, 40, 39, 39], 2) == 4', 'assert maximumLength([39, 40, 39, 40], 3) == 4', 'assert maximumLength([39, 40, 39, 40], 4) == 4', 'assert maximumLength([39, 40, 40, 39], 1) == 3', 'assert maximumLength([39, 40, 40, 40], 2) == 4', 'assert maximumLength([40, 38, 39, 38], 2) == 3', 'assert maximumLength([40, 38, 40, 40], 4) == 4', 'assert maximumLength([40, 39, 39, 39], 0) == 3', 'assert maximumLength([40, 39, 39, 39], 2) == 4', 'assert maximumLength([40, 39, 39, 40], 0) == 2', 'assert maximumLength([40, 39, 39, 40], 1) == 3', 'assert maximumLength([40, 39, 39, 40], 4) == 4', 'assert maximumLength([40, 39, 40, 39], 3) == 4', 'assert maximumLength([40, 40, 38, 39], 2) == 4', 'assert maximumLength([40, 40, 39, 38], 3) == 4', 'assert maximumLength([40, 40, 39, 39], 1) == 4', 'assert maximumLength([40, 40, 39, 39], 3) == 4', 'assert maximumLength([40, 40, 39, 39], 4) == 4', 'assert maximumLength([40, 40, 39, 40], 1) == 3', 'assert maximumLength([40, 40, 39, 40], 4) == 4', 'assert maximumLength([40, 40, 40, 40], 1) == 4', 'assert maximumLength([7, 24, 40, 37, 12], 3) == 4', 'assert maximumLength([10, 23, 20, 19, 46], 3) == 4', 'assert maximumLength([12, 49, 6, 12, 46], 0) == 2', 'assert maximumLength([15, 6, 26, 32, 6], 1) == 3', 'assert maximumLength([16, 16, 46, 43, 33], 2) == 4', 'assert maximumLength([16, 34, 25, 30, 41], 3) == 4', 'assert maximumLength([17, 26, 8, 49, 5], 4) == 5', 'assert maximumLength([18, 8, 46, 46, 13], 0) == 2', 'assert maximumLength([21, 16, 29, 25, 17], 0) == 1', 'assert maximumLength([22, 11, 10, 1, 9], 1) == 2', 'assert maximumLength([22, 13, 23, 27, 37], 2) == 3', 'assert maximumLength([23, 11, 46, 46, 50], 3) == 5', 'assert maximumLength([25, 32, 5, 25, 13], 5) == 5', 'assert maximumLength([30, 27, 17, 37, 12], 4) == 5', 'assert maximumLength([41, 38, 12, 50, 44], 3) == 4', 'assert maximumLength([42, 32, 5, 27, 8], 5) == 5', 'assert maximumLength([43, 6, 29, 12, 5], 3) == 4', 'assert maximumLength([44, 9, 49, 32, 37], 5) == 5', 'assert maximumLength([48, 48, 49, 48, 48], 5) == 5', 'assert maximumLength([48, 48, 49, 50, 49], 1) == 4', 'assert maximumLength([48, 48, 50, 50, 48], 0) == 3', 'assert maximumLength([48, 49, 48, 50, 49], 2) == 4', 'assert maximumLength([48, 49, 49, 48, 49], 0) == 3', 'assert maximumLength([48, 50, 48, 49, 49], 0) == 2', 'assert maximumLength([48, 50, 49, 49, 50], 3) == 5', 'assert maximumLength([49, 15, 24, 7, 47], 3) == 4', 'assert maximumLength([49, 42, 33, 32, 1], 0) == 1', 'assert maximumLength([49, 48, 48, 49, 50], 1) == 3', 'assert maximumLength([49, 48, 49, 49, 48], 2) == 4', 'assert maximumLength([49, 48, 49, 50, 50], 4) == 5', 'assert maximumLength([49, 48, 50, 49, 48], 1) == 3', 'assert maximumLength([49, 48, 50, 49, 50], 0) == 2', 'assert maximumLength([49, 48, 50, 50, 48], 1) == 3', 'assert maximumLength([49, 49, 49, 50, 49], 3) == 5', 'assert maximumLength([49, 49, 50, 49, 50], 0) == 3', 'assert maximumLength([49, 49, 50, 50, 49], 3) == 5', 'assert maximumLength([49, 49, 50, 50, 49], 5) == 5', 'assert maximumLength([49, 49, 50, 50, 50], 1) == 5', 'assert maximumLength([49, 50, 48, 48, 48], 2) == 5', 'assert maximumLength([49, 50, 49, 49, 48], 1) == 4', 'assert maximumLength([49, 50, 49, 49, 50], 2) == 4', 'assert maximumLength([49, 50, 49, 50, 49], 4) == 5', 'assert maximumLength([49, 50, 49, 50, 50], 4) == 5', 'assert maximumLength([49, 50, 50, 49, 49], 5) == 5', 'assert maximumLength([50, 48, 48, 48, 50], 0) == 3', 'assert maximumLength([50, 48, 49, 49, 50], 5) == 5', 'assert maximumLength([50, 48, 50, 49, 50], 0) == 3', 'assert maximumLength([50, 48, 50, 50, 49], 1) == 4', 'assert maximumLength([50, 49, 48, 50, 50], 5) == 5', 'assert maximumLength([50, 49, 49, 49, 49], 5) == 5', 'assert maximumLength([50, 49, 49, 49, 50], 4) == 5', 'assert maximumLength([50, 49, 49, 50, 49], 5) == 5', 'assert maximumLength([50, 49, 49, 50, 50], 3) == 5', 'assert maximumLength([50, 49, 50, 49, 50], 2) == 4', 'assert maximumLength([50, 49, 50, 50, 49], 2) == 4', 'assert maximumLength([50, 49, 50, 50, 50], 0) == 4', 'assert maximumLength([50, 50, 49, 50, 50], 3) == 5', 'assert maximumLength([50, 50, 50, 49, 49], 1) == 5', 'assert maximumLength([50, 50, 50, 50, 50], 2) == 5', 'assert maximumLength([50, 50, 50, 50, 50], 3) == 5', 'assert maximumLength([1, 7, 43, 27, 54, 26], 4) == 5', 'assert maximumLength([3, 30, 21, 4, 47, 19], 2) == 3', 'assert maximumLength([8, 4, 33, 44, 9, 8], 2) == 3', 'assert maximumLength([16, 9, 12, 43, 1, 33], 3) == 4', 'assert maximumLength([19, 2, 43, 8, 16, 26], 6) == 6', 'assert maximumLength([20, 29, 22, 15, 34, 35], 5) == 6', 'assert maximumLength([24, 36, 5, 28, 25, 1], 6) == 6', 'assert maximumLength([26, 18, 32, 52, 57, 36], 2) == 3', 'assert maximumLength([32, 42, 40, 16, 45, 6], 0) == 1', 'assert maximumLength([34, 59, 38, 24, 42, 19], 6) == 6', 'assert maximumLength([43, 52, 22, 11, 53, 17], 1) == 2', 'assert maximumLength([45, 14, 37, 22, 11, 27], 4) == 5', 'assert maximumLength([47, 58, 39, 54, 45, 14], 6) == 6', 'assert maximumLength([48, 60, 34, 46, 10, 51], 5) == 6', 'assert maximumLength([50, 15, 39, 53, 9, 20], 2) == 3', 'assert maximumLength([52, 11, 29, 2, 43, 56], 6) == 6', 'assert maximumLength([55, 33, 52, 21, 39, 50], 1) == 2', 'assert maximumLength([58, 15, 60, 12, 11, 45], 1) == 2', 'assert maximumLength([58, 51, 21, 29, 42, 56], 1) == 2', 'assert maximumLength([58, 58, 58, 60, 59, 60], 2) == 5', 'assert maximumLength([58, 58, 59, 58, 59, 58], 2) == 5', 'assert maximumLength([58, 59, 58, 60, 59, 60], 6) == 6', 'assert maximumLength([58, 59, 59, 58, 59, 58], 0) == 3', 'assert maximumLength([58, 60, 58, 58, 58, 58], 4) == 6', 'assert maximumLength([58, 60, 58, 59, 58, 58], 2) == 5', 'assert maximumLength([59, 58, 58, 60, 58, 58], 1) == 5', 'assert maximumLength([59, 58, 59, 58, 60, 58], 4) == 5', 'assert maximumLength([59, 58, 60, 59, 59, 60], 3) == 5', 'assert maximumLength([59, 59, 59, 58, 59, 58], 0) == 4', 'assert maximumLength([59, 59, 59, 59, 60, 59], 5) == 6', 'assert maximumLength([59, 59, 59, 60, 59, 59], 5) == 6', 'assert maximumLength([59, 59, 59, 60, 59, 60], 1) == 5', 'assert maximumLength([59, 59, 60, 59, 59, 59], 5) == 6', 'assert maximumLength([59, 59, 60, 60, 59, 59], 2) == 6', 'assert maximumLength([59, 59, 60, 60, 60, 59], 4) == 6', 'assert maximumLength([59, 59, 60, 60, 60, 60], 4) == 6', 'assert maximumLength([59, 60, 59, 59, 58, 58], 3) == 6', 'assert maximumLength([59, 60, 59, 59, 59, 59], 2) == 6', 'assert maximumLength([59, 60, 59, 59, 60, 59], 5) == 6', 'assert maximumLength([59, 60, 59, 60, 58, 59], 6) == 6', 'assert maximumLength([59, 60, 59, 60, 59, 60], 2) == 4', 'assert maximumLength([59, 60, 59, 60, 59, 60], 3) == 5', 'assert maximumLength([59, 60, 60, 59, 59, 60], 6) == 6', 'assert maximumLength([60, 24, 54, 22, 8, 55], 3) == 4', 'assert maximumLength([60, 58, 58, 58, 58, 60], 1) == 5', 'assert maximumLength([60, 58, 58, 60, 59, 58], 6) == 6', 'assert maximumLength([60, 58, 59, 60, 60, 60], 1) == 4', 'assert maximumLength([60, 59, 59, 59, 59, 60], 2) == 6', 'assert maximumLength([60, 59, 59, 60, 60, 59], 2) == 5', 'assert maximumLength([60, 59, 59, 60, 60, 60], 1) == 5', 'assert maximumLength([60, 59, 60, 58, 58, 60], 3) == 5', 'assert maximumLength([60, 59, 60, 59, 58, 60], 3) == 5', 'assert maximumLength([60, 60, 59, 58, 58, 60], 3) == 6', 'assert maximumLength([60, 60, 59, 59, 59, 59], 4) == 6', 'assert maximumLength([60, 60, 59, 59, 60, 59], 1) == 5', 'assert maximumLength([60, 60, 59, 59, 60, 60], 2) == 6', 'assert maximumLength([60, 60, 59, 60, 60, 60], 1) == 5', 'assert maximumLength([60, 60, 60, 59, 60, 60], 3) == 6', 'assert maximumLength([60, 60, 60, 59, 60, 60], 4) == 6', 'assert maximumLength([60, 60, 60, 60, 60, 59], 1) == 6', 'assert maximumLength([5, 42, 53, 23, 21, 25, 35], 5) == 6', 'assert maximumLength([14, 23, 40, 9, 9, 5, 28], 0) == 2', 'assert maximumLength([23, 41, 59, 46, 38, 70, 54], 5) == 6', 'assert maximumLength([27, 36, 27, 8, 53, 5, 3], 2) == 4', 'assert maximumLength([31, 59, 2, 37, 70, 51, 49], 3) == 4', 'assert maximumLength([32, 19, 3, 36, 5, 60, 2], 7) == 7', 'assert maximumLength([33, 55, 23, 41, 16, 19, 3], 6) == 7', 'assert maximumLength([34, 59, 10, 37, 40, 3, 55], 0) == 1', 'assert maximumLength([38, 63, 67, 60, 22, 28, 45], 0) == 1', 'assert maximumLength([39, 2, 67, 42, 12, 62, 43], 4) == 5', 'assert maximumLength([42, 26, 2, 67, 33, 33, 27], 0) == 2', 'assert maximumLength([43, 19, 43, 23, 43, 36, 22], 2) == 5', 'assert maximumLength([46, 18, 9, 44, 3, 62, 3], 0) == 2', 'assert maximumLength([47, 22, 25, 5, 18, 48, 38], 5) == 6', 'assert maximumLength([51, 3, 22, 39, 25, 3, 36], 0) == 2', 'assert maximumLength([63, 63, 56, 63, 37, 22, 3], 0) == 3', 'assert maximumLength([64, 67, 28, 47, 60, 6, 17], 3) == 4', 'assert maximumLength([65, 28, 51, 56, 53, 45, 36], 1) == 2', 'assert maximumLength([67, 51, 70, 33, 43, 54, 39], 5) == 6', 'assert maximumLength([68, 55, 16, 46, 20, 46, 6], 5) == 6', 'assert maximumLength([68, 68, 69, 68, 69, 70, 68], 5) == 7', 'assert maximumLength([68, 68, 69, 70, 70, 70, 70], 6) == 7', 'assert maximumLength([68, 69, 69, 68, 70, 68, 68], 7) == 7', 'assert maximumLength([68, 69, 70, 68, 68, 70, 68], 2) == 5', 'assert maximumLength([68, 70, 68, 68, 68, 69, 70], 1) == 5', 'assert maximumLength([68, 70, 68, 68, 70, 70, 70], 3) == 7', 'assert maximumLength([68, 70, 68, 69, 69, 68, 68], 2) == 6', 'assert maximumLength([68, 70, 68, 70, 68, 70, 70], 6) == 7', 'assert maximumLength([68, 70, 70, 68, 69, 69, 68], 0) == 3', 'assert maximumLength([69, 68, 68, 69, 68, 69, 68], 4) == 6', 'assert maximumLength([69, 68, 68, 69, 70, 68, 69], 4) == 6', 'assert maximumLength([69, 68, 69, 69, 70, 68, 70], 3) == 6', 'assert maximumLength([69, 69, 68, 68, 70, 68, 68], 5) == 7', 'assert maximumLength([69, 69, 68, 69, 69, 70, 70], 2) == 6', 'assert maximumLength([69, 69, 69, 69, 69, 69, 69], 6) == 7', 'assert maximumLength([69, 69, 69, 69, 69, 69, 70], 6) == 7', 'assert maximumLength([69, 69, 69, 69, 70, 69, 70], 5) == 7', 'assert maximumLength([69, 69, 70, 69, 70, 69, 70], 3) == 6', 'assert maximumLength([69, 69, 70, 70, 69, 70, 69], 4) == 7', 'assert maximumLength([69, 69, 70, 70, 70, 69, 70], 7) == 7', 'assert maximumLength([69, 70, 68, 70, 69, 69, 68], 4) == 6', 'assert maximumLength([69, 70, 69, 69, 70, 69, 70], 3) == 6', 'assert maximumLength([69, 70, 69, 70, 69, 70, 70], 4) == 6', 'assert maximumLength([69, 70, 70, 69, 70, 70, 69], 5) == 7', 'assert maximumLength([69, 70, 70, 70, 68, 70, 68], 6) == 7', 'assert maximumLength([69, 70, 70, 70, 69, 70, 70], 4) == 7', 'assert maximumLength([69, 70, 70, 70, 69, 70, 70], 6) == 7', 'assert maximumLength([70, 68, 68, 68, 70, 69, 70], 7) == 7', 'assert maximumLength([70, 68, 70, 68, 69, 68, 68], 4) == 6', 'assert maximumLength([70, 69, 69, 69, 69, 69, 69], 0) == 6', 'assert maximumLength([70, 69, 69, 70, 69, 69, 69], 7) == 7', 'assert maximumLength([70, 69, 69, 70, 69, 69, 70], 6) == 7', 'assert maximumLength([70, 69, 70, 68, 70, 70, 68], 1) == 5', 'assert maximumLength([70, 69, 70, 70, 70, 70, 69], 1) == 6', 'assert maximumLength([70, 70, 69, 69, 70, 69, 69], 5) == 7', 'assert maximumLength([70, 70, 69, 69, 70, 70, 70], 5) == 7', 'assert maximumLength([70, 70, 69, 70, 70, 69, 70], 5) == 7', 'assert maximumLength([70, 70, 70, 70, 68, 69, 70], 2) == 6', 'assert maximumLength([70, 70, 70, 70, 69, 69, 69], 7) == 7', 'assert maximumLength([70, 70, 70, 70, 70, 70, 70], 3) == 7', 'assert maximumLength([3, 3, 62, 38, 78, 77, 8, 51], 4) == 6', 'assert maximumLength([8, 37, 68, 48, 7, 71, 27, 10], 5) == 6', 'assert maximumLength([11, 62, 24, 4, 28, 65, 67, 16], 3) == 4', 'assert maximumLength([15, 43, 69, 56, 10, 50, 64, 8], 3) == 4', 'assert maximumLength([19, 11, 12, 21, 3, 50, 2, 23], 2) == 3', 'assert maximumLength([19, 49, 44, 49, 75, 48, 67, 20], 2) == 4', 'assert maximumLength([21, 28, 69, 37, 34, 78, 79, 42], 8) == 8', 'assert maximumLength([23, 50, 24, 34, 18, 36, 24, 22], 4) == 5', 'assert maximumLength([28, 56, 77, 31, 75, 4, 66, 27], 8) == 8', 'assert maximumLength([31, 6, 49, 37, 45, 29, 7, 61], 0) == 1', 'assert maximumLength([38, 4, 43, 43, 24, 22, 38, 46], 5) == 7', 'assert maximumLength([40, 1, 78, 50, 28, 12, 71, 19], 4) == 5', 'assert maximumLength([46, 22, 77, 76, 65, 59, 71, 23], 5) == 6', 'assert maximumLength([49, 54, 3, 28, 20, 14, 61, 47], 5) == 6', 'assert maximumLength([50, 76, 8, 1, 77, 64, 26, 3], 6) == 7', 'assert maximumLength([56, 56, 9, 28, 76, 26, 2, 74], 6) == 8', 'assert maximumLength([60, 28, 78, 70, 24, 35, 62, 50], 7) == 8', 'assert maximumLength([69, 18, 80, 47, 12, 32, 26, 21], 5) == 6', 'assert maximumLength([69, 23, 77, 45, 43, 7, 71, 65], 6) == 7', 'assert maximumLength([73, 61, 7, 10, 19, 59, 28, 55], 0) == 1', 'assert maximumLength([78, 78, 79, 79, 78, 78, 78, 79], 7) == 8', 'assert maximumLength([78, 79, 80, 79, 78, 80, 80, 79], 5) == 7', 'assert maximumLength([78, 80, 79, 78, 80, 78, 79, 80], 7) == 8', 'assert maximumLength([78, 80, 79, 80, 80, 79, 80, 80], 0) == 5', 'assert maximumLength([78, 80, 80, 78, 78, 78, 80, 78], 3) == 7', 'assert maximumLength([78, 80, 80, 78, 80, 79, 78, 79], 2) == 6', 'assert maximumLength([78, 80, 80, 79, 78, 78, 80, 79], 4) == 7', 'assert maximumLength([78, 80, 80, 80, 80, 80, 80, 78], 6) == 8', 'assert maximumLength([79, 79, 79, 79, 80, 79, 80, 79], 3) == 7', 'assert maximumLength([79, 79, 79, 80, 79, 80, 79, 80], 0) == 5', 'assert maximumLength([79, 79, 79, 80, 79, 80, 79, 80], 8) == 8', 'assert maximumLength([79, 79, 79, 80, 80, 79, 79, 79], 4) == 8', 'assert maximumLength([79, 79, 80, 78, 79, 79, 78, 79], 1) == 5', 'assert maximumLength([79, 79, 80, 80, 80, 80, 79, 79], 8) == 8', 'assert maximumLength([79, 80, 78, 79, 79, 78, 78, 80], 3) == 6', 'assert maximumLength([79, 80, 79, 79, 79, 80, 79, 79], 7) == 8', 'assert maximumLength([79, 80, 79, 79, 80, 79, 80, 79], 6) == 8', 'assert maximumLength([79, 80, 79, 79, 80, 80, 80, 80], 0) == 5', 'assert maximumLength([79, 80, 80, 80, 80, 80, 79, 80], 4) == 8', 'assert maximumLength([80, 78, 78, 80, 79, 79, 78, 78], 7) == 8', 'assert maximumLength([80, 78, 78, 80, 80, 78, 79, 79], 4) == 8', 'assert maximumLength([80, 78, 79, 80, 80, 80, 78, 79], 8) == 8', 'assert maximumLength([80, 79, 79, 79, 80, 79, 79, 79], 1) == 7', 'assert maximumLength([80, 79, 79, 79, 80, 80, 80, 79], 1) == 6', 'assert maximumLength([80, 79, 79, 80, 79, 79, 78, 80], 2) == 6', 'assert maximumLength([80, 79, 79, 80, 80, 80, 79, 80], 5) == 8', 'assert maximumLength([80, 79, 79, 80, 80, 80, 80, 80], 0) == 6', 'assert maximumLength([80, 79, 80, 79, 78, 79, 80, 79], 8) == 8', 'assert maximumLength([80, 79, 80, 79, 79, 79, 79, 79], 7) == 8', 'assert maximumLength([80, 79, 80, 79, 79, 79, 80, 79], 5) == 8', 'assert maximumLength([80, 79, 80, 79, 80, 79, 80, 80], 7) == 8', 'assert maximumLength([80, 80, 78, 78, 80, 78, 79, 79], 5) == 8', 'assert maximumLength([80, 80, 78, 79, 78, 80, 78, 80], 8) == 8', 'assert maximumLength([80, 80, 79, 79, 80, 79, 80, 80], 6) == 8', 'assert maximumLength([80, 80, 79, 80, 78, 79, 79, 79], 5) == 8', 'assert maximumLength([80, 80, 79, 80, 80, 80, 78, 78], 6) == 8', 'assert maximumLength([80, 80, 79, 80, 80, 80, 80, 80], 2) == 8', 'assert maximumLength([80, 80, 80, 79, 79, 78, 79, 78], 5) == 8', 'assert maximumLength([80, 80, 80, 79, 79, 79, 79, 80], 5) == 8', 'assert maximumLength([80, 80, 80, 79, 79, 79, 80, 79], 5) == 8', 'assert maximumLength([5, 78, 15, 46, 81, 10, 35, 47, 88], 3) == 4', 'assert maximumLength([6, 50, 72, 70, 37, 74, 4, 73, 51], 1) == 2', 'assert maximumLength([6, 90, 89, 12, 6, 79, 62, 83, 55], 3) == 5', 'assert maximumLength([10, 48, 88, 87, 68, 3, 81, 13, 88], 3) == 4', 'assert maximumLength([12, 68, 3, 82, 38, 11, 73, 62, 79], 3) == 4', 'assert maximumLength([19, 29, 52, 73, 21, 86, 55, 37, 69], 6) == 7', 'assert maximumLength([20, 28, 76, 49, 71, 71, 86, 44, 15], 7) == 9', 'assert maximumLength([21, 81, 41, 71, 23, 2, 11, 71, 87], 8) == 9', 'assert maximumLength([24, 35, 18, 89, 66, 5, 15, 64, 55], 5) == 6', 'assert maximumLength([25, 26, 63, 77, 34, 35, 28, 6, 70], 5) == 6', 'assert maximumLength([38, 19, 51, 50, 25, 6, 54, 22, 43], 4) == 5', 'assert maximumLength([39, 21, 44, 66, 37, 52, 48, 51, 2], 2) == 3', 'assert maximumLength([43, 82, 62, 78, 8, 31, 43, 12, 36], 9) == 9', 'assert maximumLength([43, 90, 4, 1, 60, 12, 90, 85, 38], 4) == 5', 'assert maximumLength([44, 12, 82, 20, 50, 39, 90, 9, 39], 3) == 5', 'assert maximumLength([51, 33, 25, 45, 49, 71, 9, 48, 25], 3) == 4', 'assert maximumLength([58, 6, 22, 31, 60, 74, 80, 89, 11], 5) == 6', 'assert maximumLength([58, 11, 87, 22, 25, 25, 23, 47, 14], 6) == 8', 'assert maximumLength([67, 83, 78, 34, 41, 18, 88, 51, 26], 5) == 6', 'assert maximumLength([77, 40, 44, 3, 42, 45, 54, 45, 86], 1) == 3', 'assert maximumLength([88, 88, 88, 89, 89, 90, 89, 88, 89], 2) == 7', 'assert maximumLength([88, 88, 90, 90, 89, 88, 89, 89, 89], 9) == 9', 'assert maximumLength([88, 88, 90, 90, 90, 88, 90, 90, 89], 7) == 9', 'assert maximumLength([88, 89, 88, 90, 90, 90, 90, 89, 88], 8) == 9', 'assert maximumLength([88, 89, 89, 88, 88, 89, 90, 88, 89], 7) == 9', 'assert maximumLength([89, 88, 90, 88, 90, 90, 88, 89, 88], 8) == 9', 'assert maximumLength([89, 88, 90, 89, 89, 90, 88, 90, 88], 4) == 7', 'assert maximumLength([89, 89, 89, 89, 90, 90, 89, 89, 89], 6) == 9', 'assert maximumLength([89, 89, 89, 89, 90, 90, 89, 89, 90], 0) == 6', 'assert maximumLength([89, 89, 89, 90, 88, 89, 88, 89, 90], 4) == 8', 'assert maximumLength([89, 89, 90, 88, 88, 88, 88, 90, 90], 2) == 8', 'assert maximumLength([89, 89, 90, 89, 88, 89, 88, 88, 90], 1) == 6', 'assert maximumLength([89, 89, 90, 90, 90, 89, 90, 89, 90], 0) == 5', 'assert maximumLength([89, 90, 88, 89, 90, 89, 90, 88, 89], 5) == 7', 'assert maximumLength([89, 90, 89, 89, 89, 90, 89, 89, 90], 7) == 9', 'assert maximumLength([89, 90, 89, 90, 89, 90, 90, 90, 89], 3) == 7', 'assert maximumLength([89, 90, 89, 90, 90, 89, 89, 90, 89], 2) == 7', 'assert maximumLength([89, 90, 89, 90, 90, 90, 89, 90, 89], 8) == 9', 'assert maximumLength([89, 90, 90, 88, 88, 88, 90, 90, 89], 3) == 8', 'assert maximumLength([89, 90, 90, 89, 88, 90, 89, 88, 90], 1) == 5', 'assert maximumLength([89, 90, 90, 89, 90, 90, 89, 90, 90], 3) == 8', 'assert maximumLength([89, 90, 90, 89, 90, 90, 90, 89, 89], 5) == 9', 'assert maximumLength([90, 88, 88, 89, 88, 89, 90, 88, 89], 7) == 9', 'assert maximumLength([90, 88, 89, 89, 88, 89, 89, 89, 90], 0) == 5', 'assert maximumLength([90, 88, 89, 90, 90, 88, 89, 90, 88], 1) == 5', 'assert maximumLength([90, 89, 89, 88, 90, 88, 90, 88, 90], 2) == 6', 'assert maximumLength([90, 89, 89, 89, 89, 88, 89, 90, 88], 9) == 9', 'assert maximumLength([90, 89, 89, 89, 89, 89, 89, 90, 89], 1) == 8', 'assert maximumLength([90, 89, 89, 89, 89, 89, 90, 90, 90], 1) == 8', 'assert maximumLength([90, 89, 89, 89, 89, 90, 90, 90, 90], 3) == 9', 'assert maximumLength([90, 89, 89, 90, 89, 89, 90, 90, 89], 6) == 9', 'assert maximumLength([90, 90, 89, 89, 89, 89, 90, 90, 89], 0) == 5', 'assert maximumLength([90, 90, 89, 90, 89, 89, 90, 90, 89], 0) == 5', 'assert maximumLength([90, 90, 89, 90, 89, 90, 88, 89, 89], 0) == 4', 'assert maximumLength([90, 90, 89, 90, 89, 90, 89, 89, 90], 1) == 6', 'assert maximumLength([90, 90, 89, 90, 89, 90, 89, 90, 90], 6) == 9', 'assert maximumLength([90, 90, 89, 90, 90, 90, 89, 89, 90], 6) == 9', 'assert maximumLength([90, 90, 90, 88, 90, 88, 88, 89, 88], 9) == 9', 'assert maximumLength([90, 90, 90, 90, 89, 89, 89, 89, 90], 5) == 9', 'assert maximumLength([90, 90, 90, 90, 90, 89, 90, 89, 89], 2) == 8', 'assert maximumLength([3, 70, 83, 62, 48, 82, 9, 23, 77, 44], 8) == 9', 'assert maximumLength([7, 89, 27, 31, 52, 9, 78, 84, 16, 49], 4) == 5', 'assert maximumLength([9, 15, 94, 85, 17, 56, 37, 97, 83, 41], 8) == 9', 'assert maximumLength([19, 44, 98, 56, 4, 66, 89, 8, 89, 28], 10) == 10', 'assert maximumLength([22, 19, 29, 54, 84, 48, 38, 52, 92, 66], 3) == 4', 'assert maximumLength([34, 94, 46, 65, 67, 55, 52, 45, 27, 46], 7) == 8', 'assert maximumLength([47, 23, 59, 65, 22, 3, 87, 40, 29, 81], 4) == 5', 'assert maximumLength([50, 43, 67, 6, 87, 94, 94, 36, 49, 16], 2) == 4', 'assert maximumLength([52, 56, 68, 87, 56, 96, 31, 25, 8, 87], 3) == 5', 'assert maximumLength([53, 34, 20, 58, 22, 20, 32, 75, 78, 54], 0) == 2', 'assert maximumLength([53, 68, 74, 14, 78, 5, 86, 21, 67, 31], 10) == 10', 'assert maximumLength([59, 39, 50, 4, 97, 72, 100, 29, 32, 6], 4) == 5', 'assert maximumLength([65, 32, 47, 94, 6, 25, 90, 100, 62, 44], 1) == 2', 'assert maximumLength([66, 25, 3, 88, 43, 33, 55, 47, 76, 53], 2) == 3', 'assert maximumLength([68, 69, 27, 89, 51, 64, 74, 53, 31, 15], 7) == 8', 'assert maximumLength([70, 64, 63, 76, 100, 3, 64, 4, 93, 87], 1) == 3', 'assert maximumLength([78, 59, 83, 78, 53, 94, 3, 51, 14, 84], 10) == 10', 'assert maximumLength([87, 9, 12, 73, 38, 67, 8, 65, 59, 30], 2) == 3', 'assert maximumLength([91, 38, 74, 88, 88, 52, 22, 93, 34, 65], 5) == 7', 'assert maximumLength([98, 52, 74, 37, 63, 55, 24, 2, 43, 7], 6) == 7', 'assert maximumLength([98, 98, 98, 99, 98, 100, 99, 98, 99, 99], 4) == 9', 'assert maximumLength([98, 98, 99, 100, 99, 98, 99, 99, 98, 100], 5) == 9', 'assert maximumLength([98, 99, 98, 99, 99, 99, 99, 99, 98, 100], 3) == 9', 'assert maximumLength([98, 99, 99, 98, 99, 98, 98, 100, 100, 100], 3) == 9', 'assert maximumLength([98, 99, 99, 99, 99, 98, 99, 98, 98, 99], 1) == 7', 'assert maximumLength([98, 100, 98, 99, 100, 98, 98, 98, 99, 98], 6) == 9', 'assert maximumLength([98, 100, 99, 99, 98, 98, 98, 99, 99, 99], 4) == 10', 'assert maximumLength([98, 100, 100, 99, 99, 100, 100, 100, 100, 98], 8) == 10', 'assert maximumLength([99, 98, 99, 100, 99, 98, 98, 99, 99, 98], 0) == 5', 'assert maximumLength([99, 98, 100, 100, 98, 99, 99, 99, 100, 100], 5) == 10', 'assert maximumLength([99, 98, 100, 100, 99, 98, 99, 98, 100, 98], 6) == 9', 'assert maximumLength([99, 99, 98, 99, 99, 99, 98, 99, 100, 98], 1) == 7', 'assert maximumLength([99, 99, 98, 100, 98, 99, 98, 99, 100, 98], 1) == 6', 'assert maximumLength([99, 99, 99, 100, 99, 99, 100, 100, 99, 100], 3) == 9', 'assert maximumLength([99, 99, 100, 99, 99, 100, 98, 99, 98, 98], 7) == 10', 'assert maximumLength([99, 99, 100, 99, 100, 100, 99, 99, 99, 100], 3) == 9', 'assert maximumLength([99, 100, 99, 99, 99, 98, 100, 100, 99, 99], 5) == 10', 'assert maximumLength([99, 100, 100, 98, 100, 100, 99, 100, 100, 100], 9) == 10', 'assert maximumLength([99, 100, 100, 100, 99, 99, 100, 100, 100, 99], 2) == 8', 'assert maximumLength([100, 98, 100, 100, 99, 98, 100, 98, 99, 99], 3) == 8', 'assert maximumLength([100, 98, 100, 100, 99, 99, 100, 100, 100, 98], 2) == 8', 'assert maximumLength([100, 99, 98, 100, 98, 100, 99, 99, 99, 98], 9) == 10', 'assert maximumLength([100, 99, 99, 99, 100, 99, 100, 99, 100, 100], 4) == 9', 'assert maximumLength([100, 99, 99, 100, 99, 99, 100, 100, 100, 100], 4) == 10', 'assert maximumLength([100, 99, 99, 100, 100, 99, 99, 99, 99, 100], 7) == 10', 'assert maximumLength([100, 99, 99, 100, 100, 99, 99, 100, 99, 99], 4) == 9', 'assert maximumLength([100, 99, 99, 100, 100, 99, 99, 100, 100, 99], 3) == 8', 'assert maximumLength([100, 99, 100, 99, 99, 99, 99, 100, 100, 100], 1) == 8', 'assert maximumLength([100, 99, 100, 99, 100, 99, 100, 100, 99, 100], 6) == 9', 'assert maximumLength([100, 99, 100, 100, 99, 99, 99, 100, 100, 99], 1) == 7', 'assert maximumLength([100, 99, 100, 100, 99, 100, 99, 100, 100, 100], 1) == 7', 'assert maximumLength([100, 99, 100, 100, 100, 99, 100, 99, 99, 100], 2) == 8', 'assert maximumLength([100, 99, 100, 100, 100, 99, 100, 100, 99, 100], 1) == 7', 'assert maximumLength([100, 100, 99, 99, 99, 99, 99, 99, 100, 99], 0) == 7', 'assert maximumLength([100, 100, 99, 99, 99, 100, 100, 100, 100, 100], 10) == 10', 'assert maximumLength([100, 100, 99, 99, 100, 99, 99, 99, 100, 100], 10) == 10', 'assert maximumLength([100, 100, 99, 100, 99, 100, 99, 99, 100, 100], 1) == 6', 'assert maximumLength([100, 100, 100, 99, 99, 100, 99, 100, 100, 99], 3) == 9', 'assert maximumLength([100, 100, 100, 99, 100, 100, 100, 100, 100, 99], 3) == 10', 'assert maximumLength([100, 100, 100, 100, 99, 99, 100, 99, 99, 99], 8) == 10', 'assert maximumLength([90, 97, 98, 90, 97, 99, 92, 90, 100, 90, 98, 90, 98, 96, 90, 94, 97, 95, 98, 94, 93, 98, 95, 96, 95, 94, 91, 97, 98, 91, 99, 97, 91, 94, 98, 97, 91, 98, 99, 90, 100, 99, 98, 100, 96, 95, 94, 94, 92, 96, 96, 94, 93, 98, 90, 91, 92, 95, 96, 93, 94, 96, 97, 99, 93, 93, 100, 91, 98, 91, 91, 91, 93, 90, 91, 96, 91, 96, 91, 100, 100, 93, 95, 95, 94, 96, 91, 97, 95, 100, 93, 97, 99, 92, 94, 95, 99, 100, 91, 99], 1) == 20', 'assert maximumLength([92, 100, 94, 99, 97, 100, 90, 97, 93, 93, 94, 99, 98, 99, 93, 98, 99, 92, 97, 95, 100, 92, 91, 99, 94, 96, 98, 91, 90, 93, 91, 95, 95, 91, 96, 91, 93, 100, 94, 94, 98, 92, 91, 92, 97, 97, 91, 98, 95, 92, 93, 99, 93, 97, 94, 96, 96, 90, 93, 99, 95, 90, 92, 99, 100, 99, 99, 92, 90, 93, 92, 94, 95, 94, 100, 97, 100, 92, 93, 100, 94, 93, 100, 91, 92, 90, 90, 97, 93, 94, 90, 99, 91, 93, 100, 94, 97, 91, 97, 97], 20) == 47', 'assert maximumLength([93, 96, 98, 96, 91, 98, 90, 94, 97, 91, 98, 95, 90, 93, 94, 100, 95, 92, 96, 95, 94, 99, 93, 90, 93, 93, 91, 90, 96, 96, 90, 94, 94, 90, 90, 99, 93, 91, 93, 90, 92, 100, 92, 93, 92, 99, 100, 90, 94, 91, 91, 97, 98, 92, 95, 96, 100, 91, 94, 97, 91, 96, 92, 92, 96, 94, 91, 94, 100, 98, 92, 99, 96, 97, 94, 91, 92, 91, 93, 96, 96, 92, 92, 97, 92, 96, 97, 99, 90, 96, 97, 92, 96, 95, 91, 94, 90, 92, 94, 93], 27) == 53', 'assert maximumLength([94, 97, 92, 95, 92, 97, 99, 94, 97, 91, 96, 96, 95, 99, 99, 93, 94, 91, 97, 91, 94, 91, 93, 93, 98, 100, 92, 90, 99, 95, 92, 94, 94, 98, 91, 100, 93, 97, 95, 96, 93, 94, 95, 92, 96, 92, 97, 94, 96, 97, 96, 90, 92, 90, 90, 93, 97, 98, 99, 98, 97, 91, 100, 90, 91, 98, 93, 100, 93, 96, 100, 99, 93, 92, 94, 93, 100, 97, 99, 95, 96, 93, 99, 94, 90, 92, 91, 96, 99, 99, 99, 95, 92, 92, 90, 96, 98, 97, 92, 94], 3) == 21', 'assert maximumLength([94, 98, 100, 90, 93, 98, 99, 100, 100, 95, 92, 92, 96, 96, 99, 90, 94, 91, 93, 97, 100, 99, 95, 99, 97, 97, 96, 94, 94, 96, 91, 94, 92, 96, 96, 96, 99, 97, 97, 100, 96, 93, 92, 99, 95, 91, 95, 99, 93, 94, 95, 90, 96, 99, 91, 91, 90, 91, 99, 93, 92, 90, 94, 96, 98, 91, 99, 94, 93, 92, 90, 97, 95, 90, 95, 96, 91, 94, 95, 92, 93, 91, 93, 92, 96, 99, 92, 91, 97, 99, 90, 96, 95, 90, 94, 99, 97, 96, 99, 91], 34) == 58', 'assert maximumLength([99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 100, 99, 100, 100, 99, 100, 99, 100, 99, 99, 99, 99, 100, 100, 100, 100, 99, 99, 100, 100, 99, 100, 100, 100, 100, 100, 99, 100, 100, 100, 99, 100, 99, 100, 99, 100, 100, 99, 100, 100, 99, 99, 99, 99, 100, 99, 99, 99, 99, 99, 99, 99, 99, 100, 100, 99, 100, 100, 100, 100, 100, 99, 100, 100, 100, 99, 100, 99, 99, 99, 99, 100, 99, 100, 99, 99, 100, 100, 99, 100, 99, 100, 99, 99, 99, 100, 100, 100, 99], 14) == 84', 'assert maximumLength([99, 99, 100, 100, 99, 99, 99, 100, 100, 100, 100, 100, 99, 100, 99, 99, 99, 100, 100, 99, 99, 99, 99, 99, 99, 99, 100, 99, 99, 100, 99, 99, 99, 99, 99, 99, 100, 100, 99, 100, 99, 100, 100, 100, 100, 100, 100, 99, 100, 99, 99, 100, 99, 100, 99, 99, 99, 100, 100, 100, 99, 99, 99, 99, 100, 100, 99, 100, 99, 100, 99, 99, 99, 100, 99, 99, 100, 100, 99, 99, 99, 99, 100, 100, 99, 100, 99, 99, 99, 100, 99, 99, 100, 99, 100, 99, 100, 99, 99, 100], 35) == 93', 'assert maximumLength([100, 99, 99, 100, 99, 99, 100, 100, 100, 100, 100, 100, 99, 99, 99, 99, 99, 99, 99, 100, 100, 99, 99, 100, 100, 100, 100, 99, 100, 99, 99, 100, 100, 100, 99, 100, 100, 99, 100, 100, 100, 99, 99, 100, 99, 100, 99, 100, 99, 100, 99, 99, 100, 99, 99, 100, 99, 99, 100, 100, 100, 99, 99, 100, 99, 99, 99, 99, 100, 100, 100, 100, 99, 99, 100, 100, 99, 99, 100, 99, 100, 100, 99, 100, 100, 99, 99, 100, 99, 100, 100, 99, 100, 100, 99, 99, 99, 100, 99, 99], 36) == 92', 'assert maximumLength([100, 100, 99, 99, 100, 99, 100, 99, 99, 100, 99, 100, 100, 100, 99, 99, 100, 100, 100, 99, 100, 99, 100, 100, 99, 100, 100, 99, 100, 99, 100, 99, 100, 99, 99, 99, 99, 100, 99, 100, 99, 99, 99, 99, 99, 100, 99, 100, 100, 100, 99, 100, 99, 99, 100, 99, 100, 100, 99, 99, 99, 99, 99, 100, 100, 100, 99, 99, 100, 99, 100, 100, 99, 99, 100, 99, 99, 100, 99, 99, 99, 99, 100, 99, 99, 99, 100, 99, 100, 100, 99, 99, 100, 99, 99, 100, 99, 100, 99, 100], 26) == 83', 'assert maximumLength([100, 100, 99, 99, 100, 100, 100, 100, 100, 100, 99, 99, 100, 99, 99, 99, 99, 99, 99, 99, 100, 99, 99, 99, 99, 100, 100, 100, 99, 100, 100, 99, 99, 100, 100, 99, 100, 100, 100, 99, 100, 99, 99, 99, 100, 99, 99, 99, 100, 99, 99, 99, 100, 99, 100, 100, 100, 100, 100, 99, 99, 99, 99, 100, 99, 99, 99, 99, 100, 100, 100, 99, 100, 99, 100, 100, 100, 100, 100, 100, 99, 100, 100, 100, 100, 99, 99, 99, 99, 100, 100, 99, 99, 99, 99, 99, 99, 99, 100, 99], 50) == 100', 'assert maximumLength([100000019, 100000089, 100000009, 100000027, 100000054, 100000023, 100000010, 100000019, 100000072, 100000012, 100000083, 100000009, 100000094, 100000003, 100000088, 100000035, 100000082, 100000038, 100000022, 100000028, 100000066, 100000033, 100000093, 100000035, 100000004, 100000064, 100000064, 100000069, 100000019, 100000081, 100000076, 100000095, 100000000, 100000081, 100000085, 100000002, 100000073, 100000025, 100000061, 100000076, 100000096, 100000000, 100000063, 100000074, 100000003, 100000052, 100000100, 100000006, 100000028, 100000050, 100000074, 100000001, 100000072, 100000040, 100000078, 100000061, 100000011, 100000057, 100000018, 100000023, 100000000, 100000043, 100000062, 100000032, 100000056, 100000016, 100000004, 100000058, 100000010, 100000085, 100000067, 100000064, 100000091, 100000031, 100000063, 100000019, 100000010, 100000100, 100000058, 100000025, 100000031, 100000040, 100000047, 100000063, 100000029, 100000050, 100000087, 100000089, 100000007, 100000066, 100000053, 100000072, 100000022, 100000057, 100000088, 100000066, 100000062, 100000077, 100000037, 100000100, 100000065, 100000075, 100000001, 100000085, 100000055, 100000063, 100000041, 100000015, 100000045, 100000078, 100000012, 100000026, 100000042, 100000030, 100000044, 100000021, 100000009, 100000064, 100000061, 100000043, 100000082, 100000002, 100000090, 100000081, 100000013, 100000096, 100000080, 100000068, 100000050, 100000027, 100000083, 100000006, 100000054, 100000007, 100000096, 100000007, 100000028, 100000091, 100000005, 100000024, 100000048, 100000085, 100000084, 100000007, 100000036, 100000022, 100000044, 100000061, 100000038, 100000090, 100000090, 100000056, 100000092, 100000035, 100000012, 100000024, 100000052, 100000076, 100000037, 100000045, 100000004, 100000057, 100000083, 100000083, 100000076, 100000003, 100000087, 100000086, 100000053, 100000073, 100000004, 100000095, 100000022, 100000096, 100000006, 100000042, 100000078, 100000032, 100000068, 100000005, 100000007, 100000018, 100000021, 100000046, 100000042, 100000019, 100000086, 100000076, 100000099, 100000078, 100000100, 100000033, 100000024, 100000077, 100000098, 100000001, 100000053, 100000042, 100000032, 100000076, 100000058, 100000074, 100000093, 100000028, 100000088, 100000037, 100000052, 100000045, 100000017, 100000041, 100000096, 100000057, 100000014, 100000088, 100000070, 100000020, 100000098, 100000007, 100000061, 100000035, 100000026, 100000084, 100000000, 100000077, 100000082, 100000038, 100000015, 100000039, 100000085, 100000030, 100000018, 100000099, 100000074, 100000004, 100000092, 100000025, 100000051, 100000051, 100000086, 100000041, 100000054, 100000060, 100000045, 100000050, 100000012, 100000011, 100000072, 100000072, 100000073, 100000040, 100000054, 100000064, 100000074, 100000014, 100000012, 100000008, 100000018, 100000013, 100000084, 100000082, 100000025, 100000086, 100000003, 100000001, 100000000, 100000018, 100000058, 100000040, 100000006, 100000018, 100000004, 100000002, 100000067, 100000091, 100000093, 100000050, 100000058, 100000026, 100000069, 100000030, 100000047, 100000062, 100000021, 100000018, 100000067, 100000040, 100000051, 100000088, 100000005, 100000026, 100000005, 100000031, 100000050, 100000034, 100000005, 100000080, 100000050, 100000022, 100000062, 100000048, 100000097, 100000091, 100000080, 100000095, 100000065, 100000045, 100000002, 100000059, 100000029, 100000037, 100000029, 100000017, 100000081, 100000022, 100000001, 100000034, 100000002, 100000006, 100000026, 100000088, 100000066, 100000074, 100000037, 100000014, 100000062, 100000033, 100000013, 100000084, 100000060, 100000098, 100000005, 100000015, 100000013, 100000087, 100000010, 100000046, 100000088, 100000012, 100000079, 100000067, 100000097, 100000024, 100000041, 100000043, 100000089, 100000063, 100000012, 100000043, 100000075, 100000088, 100000089, 100000084, 100000092, 100000018, 100000076, 100000081, 100000076, 100000011, 100000066, 100000005, 100000077, 100000086, 100000020, 100000085, 100000073, 100000060, 100000100, 100000056, 100000064, 100000028, 100000085, 100000097, 100000038, 100000057, 100000095, 100000090, 100000006, 100000091, 100000064, 100000023, 100000060, 100000086, 100000036, 100000089, 100000077, 100000025, 100000029, 100000096, 100000016, 100000026, 100000081, 100000051, 100000087, 100000010, 100000018, 100000072, 100000000, 100000051, 100000049, 100000083, 100000037, 100000006, 100000040, 100000021, 100000041, 100000003, 100000012, 100000048, 100000055, 100000008, 100000099, 100000067, 100000027, 100000092, 100000021, 100000086, 100000007, 100000008, 100000064, 100000041, 100000002, 100000043, 100000067, 100000095, 100000013, 100000089, 100000045, 100000056, 100000057, 100000076, 100000060, 100000037, 100000050, 100000023, 100000030, 100000075, 100000067, 100000053, 100000049, 100000010, 100000007, 100000055, 100000040, 100000087, 100000094, 100000023, 100000073, 100000014, 100000000, 100000024, 100000009, 100000073, 100000068, 100000044, 100000003, 100000027, 100000006, 100000094, 100000001, 100000098, 100000004, 100000091, 100000010, 100000014, 100000043, 100000014, 100000065, 100000067, 100000060, 100000038, 100000096, 100000020, 100000074, 100000015, 100000083, 100000004, 100000024, 100000001, 100000029, 100000066, 100000003, 100000044, 100000063, 100000095, 100000001, 100000047, 100000046, 100000084, 100000054, 100000088, 100000039, 100000071, 100000006, 100000024, 100000066, 100000003, 100000016, 100000074, 100000049, 100000059], 3) == 21', 'assert maximumLength([100000032, 100000062, 100000080, 100000091, 100000059, 100000057, 100000029, 100000039, 100000094, 100000006, 100000010, 100000063, 100000020, 100000026, 100000028, 100000066, 100000004, 100000027, 100000035, 100000038, 100000096, 100000040, 100000020, 100000005, 100000049, 100000011, 100000088, 100000099, 100000042, 100000037, 100000039, 100000081, 100000092, 100000091, 100000055, 100000075, 100000067, 100000085, 100000086, 100000066, 100000047, 100000049, 100000037, 100000069, 100000023, 100000040, 100000060, 100000078, 100000027, 100000078, 100000083, 100000044, 100000052, 100000045, 100000049, 100000077, 100000058, 100000068, 100000098, 100000003, 100000094, 100000035, 100000039, 100000097, 100000030, 100000079, 100000063, 100000062, 100000073, 100000061, 100000051, 100000045, 100000039, 100000089, 100000048, 100000032, 100000090, 100000037, 100000087, 100000029, 100000065, 100000028, 100000062, 100000010, 100000007, 100000016, 100000068, 100000039, 100000022, 100000033, 100000017, 100000098, 100000037, 100000026, 100000055, 100000023, 100000034, 100000052, 100000021, 100000063, 100000004, 100000020, 100000089, 100000010, 100000005, 100000079, 100000092, 100000051, 100000095, 100000072, 100000090, 100000026, 100000003, 100000039, 100000100, 100000018, 100000100, 100000099, 100000073, 100000004, 100000009, 100000006, 100000027, 100000027, 100000016, 100000050, 100000045, 100000036, 100000046, 100000036, 100000099, 100000046, 100000051, 100000099, 100000016, 100000051, 100000046, 100000072, 100000099, 100000083, 100000089, 100000084, 100000005, 100000066, 100000031, 100000015, 100000070, 100000047, 100000002, 100000079, 100000100, 100000034, 100000097, 100000065, 100000089, 100000055, 100000094, 100000063, 100000045, 100000040, 100000016, 100000036, 100000005, 100000100, 100000097, 100000019, 100000100, 100000066, 100000014, 100000021, 100000061, 100000007, 100000075, 100000056, 100000050, 100000047, 100000042, 100000026, 100000006, 100000051, 100000055, 100000058, 100000077, 100000014, 100000064, 100000041, 100000055, 100000016, 100000092, 100000094, 100000065, 100000004, 100000099, 100000086, 100000076, 100000004, 100000095, 100000099, 100000099, 100000071, 100000004, 100000071, 100000045, 100000074, 100000001, 100000030, 100000026, 100000009, 100000010, 100000075, 100000014, 100000010, 100000079, 100000001, 100000008, 100000093, 100000083, 100000092, 100000090, 100000019, 100000082, 100000054, 100000045, 100000050, 100000091, 100000092, 100000080, 100000099, 100000018, 100000031, 100000061, 100000083, 100000096, 100000092, 100000010, 100000018, 100000071, 100000031, 100000027, 100000086, 100000069, 100000072, 100000023, 100000025, 100000085, 100000003, 100000041, 100000000, 100000072, 100000011, 100000068, 100000013, 100000061, 100000040, 100000098, 100000035, 100000048, 100000027, 100000045, 100000098, 100000089, 100000097, 100000027, 100000067, 100000055, 100000058, 100000024, 100000048, 100000000, 100000061, 100000094, 100000052, 100000070, 100000056, 100000055, 100000063, 100000043, 100000047, 100000025, 100000015, 100000061, 100000057, 100000020, 100000010, 100000095, 100000006, 100000054, 100000085, 100000029, 100000090, 100000051, 100000009, 100000096, 100000095, 100000007, 100000070, 100000042, 100000049, 100000061, 100000049, 100000034, 100000015, 100000079, 100000095, 100000062, 100000006, 100000011, 100000055, 100000092, 100000027, 100000006, 100000038, 100000066, 100000088, 100000008, 100000067, 100000029, 100000037, 100000044, 100000098, 100000029, 100000005, 100000090, 100000058, 100000040, 100000053, 100000030, 100000071, 100000033, 100000087, 100000076, 100000074, 100000007, 100000092, 100000050, 100000065, 100000077, 100000004, 100000017, 100000079, 100000011, 100000061, 100000099, 100000082, 100000077, 100000094, 100000036, 100000045, 100000024, 100000048, 100000085, 100000045, 100000047, 100000007, 100000044, 100000033, 100000094, 100000006, 100000027, 100000073, 100000020, 100000022, 100000054, 100000095, 100000016, 100000000, 100000034, 100000084, 100000017, 100000091, 100000087, 100000000, 100000072, 100000040, 100000083, 100000086, 100000023, 100000000, 100000019, 100000083, 100000006, 100000048, 100000043, 100000042, 100000100, 100000089, 100000085, 100000092, 100000096, 100000052, 100000039, 100000064, 100000044, 100000002, 100000058, 100000015, 100000092, 100000095, 100000088, 100000067, 100000020, 100000071, 100000038, 100000005, 100000088, 100000074, 100000024, 100000038, 100000007, 100000068, 100000042, 100000001, 100000075, 100000086, 100000091, 100000061, 100000071, 100000080, 100000059, 100000082, 100000059, 100000078, 100000066, 100000038, 100000093, 100000068, 100000000, 100000089, 100000037, 100000048, 100000085, 100000044, 100000017, 100000024, 100000055, 100000075, 100000067, 100000099, 100000077, 100000090, 100000002, 100000011, 100000004, 100000035, 100000041, 100000021, 100000099, 100000033, 100000041, 100000038, 100000018, 100000078, 100000081, 100000086, 100000096, 100000076, 100000041, 100000004, 100000067, 100000051, 100000097, 100000003, 100000083, 100000030, 100000077, 100000075, 100000063, 100000095, 100000007, 100000011, 100000091, 100000028, 100000016, 100000000, 100000095, 100000011, 100000024, 100000046, 100000052, 100000095, 100000016, 100000048, 100000060, 100000094, 100000078, 100000039, 100000013, 100000071, 100000016, 100000006, 100000065, 100000039, 100000014, 100000008, 100000051, 100000029, 100000087, 100000027, 100000018, 100000040], 38) == 78', 'assert maximumLength([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 0) == 500', 'assert maximumLength([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 1) == 1000', 'assert maximumLength([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 59']
correct = 0
for t in tests:
    try:
        exec(t)
        correct+=1
    except:
        pass
success = len(tests) == correct
print(correct,'/',len(tests))
print(success)