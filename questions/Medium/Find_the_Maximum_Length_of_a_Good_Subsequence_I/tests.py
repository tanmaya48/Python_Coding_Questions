from question import maximumLength
tests = ['assert maximumLength([1, 2, 1, 1, 3], 2) == 4', 'assert maximumLength([1, 2, 3, 4, 5, 1], 0) == 2', 'assert maximumLength([2], 0) == 1', 'assert maximumLength([2], 1) == 1', 'assert maximumLength([7], 0) == 1', 'assert maximumLength([7], 1) == 1', 'assert maximumLength([8], 0) == 1', 'assert maximumLength([8], 1) == 1', 'assert maximumLength([10], 0) == 1', 'assert maximumLength([1, 17], 0) == 1', 'assert maximumLength([2, 4], 0) == 1', 'assert maximumLength([2, 15], 2) == 2', 'assert maximumLength([2, 20], 2) == 2', 'assert maximumLength([4, 4], 0) == 2', 'assert maximumLength([5, 4], 1) == 2', 'assert maximumLength([6, 20], 0) == 1', 'assert maximumLength([7, 8], 1) == 2', 'assert maximumLength([8, 13], 1) == 2', 'assert maximumLength([8, 16], 1) == 2', 'assert maximumLength([9, 13], 1) == 2', 'assert maximumLength([10, 10], 0) == 2', 'assert maximumLength([12, 2], 2) == 2', 'assert maximumLength([13, 11], 1) == 2', 'assert maximumLength([13, 12], 0) == 1', 'assert maximumLength([13, 14], 2) == 2', 'assert maximumLength([16, 2], 2) == 2', 'assert maximumLength([16, 11], 1) == 2', 'assert maximumLength([17, 6], 0) == 1', 'assert maximumLength([18, 10], 1) == 2', 'assert maximumLength([3, 27, 24], 3) == 3', 'assert maximumLength([3, 28, 30], 0) == 1', 'assert maximumLength([4, 14, 30], 0) == 1', 'assert maximumLength([6, 5, 22], 0) == 1', 'assert maximumLength([8, 21, 5], 3) == 3', 'assert maximumLength([8, 28, 17], 0) == 1', 'assert maximumLength([10, 5, 7], 2) == 3', 'assert maximumLength([10, 5, 22], 0) == 1', 'assert maximumLength([10, 10, 11], 1) == 3', 'assert maximumLength([13, 9, 13], 1) == 2', 'assert maximumLength([13, 11, 14], 3) == 3', 'assert maximumLength([14, 15, 27], 1) == 2', 'assert maximumLength([17, 13, 6], 2) == 3', 'assert maximumLength([17, 24, 28], 2) == 3', 'assert maximumLength([24, 20, 16], 1) == 2', 'assert maximumLength([27, 15, 29], 1) == 2', 'assert maximumLength([28, 28, 28], 0) == 3', 'assert maximumLength([28, 29, 29], 1) == 3', 'assert maximumLength([28, 30, 28], 1) == 2', 'assert maximumLength([28, 30, 30], 1) == 3', 'assert maximumLength([28, 30, 30], 2) == 3', 'assert maximumLength([29, 8, 26], 3) == 3', 'assert maximumLength([29, 28, 30], 0) == 1', 'assert maximumLength([29, 29, 5], 1) == 3', 'assert maximumLength([29, 29, 29], 0) == 3', 'assert maximumLength([29, 29, 29], 1) == 3', 'assert maximumLength([29, 29, 29], 3) == 3', 'assert maximumLength([29, 29, 30], 1) == 3', 'assert maximumLength([29, 29, 30], 3) == 3', 'assert maximumLength([29, 30, 29], 1) == 2', 'assert maximumLength([29, 30, 30], 0) == 2', 'assert maximumLength([29, 30, 30], 3) == 3', 'assert maximumLength([30, 1, 29], 3) == 3', 'assert maximumLength([30, 9, 7], 1) == 2', 'assert maximumLength([30, 28, 28], 0) == 2', 'assert maximumLength([30, 28, 28], 2) == 3', 'assert maximumLength([30, 28, 30], 0) == 2', 'assert maximumLength([30, 29, 29], 0) == 2', 'assert maximumLength([30, 29, 29], 1) == 3', 'assert maximumLength([30, 29, 29], 2) == 3', 'assert maximumLength([30, 29, 30], 0) == 2', 'assert maximumLength([30, 30, 29], 0) == 2', 'assert maximumLength([30, 30, 29], 2) == 3', 'assert maximumLength([30, 30, 30], 1) == 3', 'assert maximumLength([30, 30, 30], 2) == 3', 'assert maximumLength([30, 30, 30], 3) == 3', 'assert maximumLength([1, 11, 6, 39], 4) == 4', 'assert maximumLength([2, 19, 3, 28], 2) == 3', 'assert maximumLength([7, 19, 17, 29], 1) == 2', 'assert maximumLength([11, 4, 15, 9], 2) == 3', 'assert maximumLength([11, 40, 37, 27], 1) == 2', 'assert maximumLength([12, 1, 35, 9], 4) == 4', 'assert maximumLength([19, 2, 19, 13], 0) == 2', 'assert maximumLength([19, 22, 22, 2], 3) == 4', 'assert maximumLength([23, 23, 16, 19], 1) == 3', 'assert maximumLength([23, 37, 4, 17], 3) == 4', 'assert maximumLength([25, 15, 20, 13], 4) == 4', 'assert maximumLength([26, 24, 8, 27], 1) == 2', 'assert maximumLength([27, 32, 39, 33], 3) == 4', 'assert maximumLength([30, 11, 28, 14], 3) == 4', 'assert maximumLength([30, 15, 37, 10], 4) == 4', 'assert maximumLength([31, 23, 30, 17], 2) == 3', 'assert maximumLength([32, 36, 12, 29], 3) == 4', 'assert maximumLength([37, 6, 32, 3], 1) == 2', 'assert maximumLength([38, 39, 38, 38], 3) == 4', 'assert maximumLength([38, 39, 39, 38], 3) == 4', 'assert maximumLength([38, 40, 38, 38], 0) == 3', 'assert maximumLength([38, 40, 38, 38], 3) == 4', 'assert maximumLength([38, 40, 38, 40], 2) == 3', 'assert maximumLength([38, 40, 40, 39], 0) == 2', 'assert maximumLength([39, 39, 38, 38], 0) == 2', 'assert maximumLength([39, 39, 39, 39], 0) == 4', 'assert maximumLength([39, 39, 39, 40], 0) == 3', 'assert maximumLength([39, 39, 39, 40], 2) == 4', 'assert maximumLength([39, 39, 40, 40], 1) == 4', 'assert maximumLength([39, 40, 38, 39], 1) == 2', 'assert maximumLength([39, 40, 38, 39], 3) == 4', 'assert maximumLength([39, 40, 39, 39], 0) == 3', 'assert maximumLength([39, 40, 39, 40], 3) == 4', 'assert maximumLength([39, 40, 40, 39], 0) == 2', 'assert maximumLength([39, 40, 40, 39], 4) == 4', 'assert maximumLength([39, 40, 40, 40], 0) == 3', 'assert maximumLength([40, 16, 22, 37], 0) == 1', 'assert maximumLength([40, 36, 5, 17], 3) == 4', 'assert maximumLength([40, 38, 38, 40], 1) == 3', 'assert maximumLength([40, 38, 39, 40], 1) == 2', 'assert maximumLength([40, 38, 39, 40], 4) == 4', 'assert maximumLength([40, 38, 40, 39], 4) == 4', 'assert maximumLength([40, 39, 38, 39], 4) == 4', 'assert maximumLength([40, 39, 38, 40], 1) == 2', 'assert maximumLength([40, 39, 39, 39], 0) == 3', 'assert maximumLength([40, 39, 39, 39], 3) == 4', 'assert maximumLength([40, 39, 39, 40], 4) == 4', 'assert maximumLength([40, 39, 40, 39], 3) == 4', 'assert maximumLength([40, 39, 40, 40], 0) == 3', 'assert maximumLength([40, 39, 40, 40], 2) == 4', 'assert maximumLength([40, 40, 39, 39], 2) == 4', 'assert maximumLength([40, 40, 39, 40], 2) == 4', 'assert maximumLength([40, 40, 40, 39], 3) == 4', 'assert maximumLength([40, 40, 40, 40], 2) == 4', 'assert maximumLength([40, 40, 40, 40], 4) == 4', 'assert maximumLength([1, 33, 12, 40, 26], 2) == 3', 'assert maximumLength([1, 46, 11, 46, 33], 4) == 5', 'assert maximumLength([2, 18, 14, 38, 21], 5) == 5', 'assert maximumLength([4, 8, 15, 43, 16], 0) == 1', 'assert maximumLength([6, 11, 47, 16, 18], 0) == 1', 'assert maximumLength([7, 13, 13, 29, 41], 4) == 5', 'assert maximumLength([8, 4, 13, 22, 36], 1) == 2', 'assert maximumLength([10, 19, 8, 23, 31], 4) == 5', 'assert maximumLength([19, 5, 6, 40, 48], 5) == 5', 'assert maximumLength([20, 41, 39, 36, 36], 0) == 2', 'assert maximumLength([26, 29, 32, 23, 45], 0) == 1', 'assert maximumLength([30, 1, 14, 13, 39], 1) == 2', 'assert maximumLength([33, 17, 4, 44, 28], 0) == 1', 'assert maximumLength([33, 36, 2, 14, 33], 2) == 3', 'assert maximumLength([34, 43, 7, 44, 41], 1) == 2', 'assert maximumLength([37, 23, 45, 25, 40], 4) == 5', 'assert maximumLength([38, 6, 42, 48, 4], 4) == 5', 'assert maximumLength([40, 34, 47, 44, 14], 1) == 2', 'assert maximumLength([48, 41, 21, 34, 8], 1) == 2', 'assert maximumLength([48, 48, 49, 49, 50], 0) == 2', 'assert maximumLength([48, 48, 50, 48, 48], 2) == 5', 'assert maximumLength([48, 49, 49, 48, 48], 1) == 4', 'assert maximumLength([48, 49, 49, 49, 49], 0) == 4', 'assert maximumLength([48, 49, 49, 50, 50], 2) == 5', 'assert maximumLength([48, 49, 50, 49, 48], 4) == 5', 'assert maximumLength([48, 49, 50, 50, 50], 2) == 5', 'assert maximumLength([48, 50, 49, 50, 48], 0) == 2', 'assert maximumLength([49, 48, 46, 5, 10], 5) == 5', 'assert maximumLength([49, 48, 50, 48, 50], 4) == 5', 'assert maximumLength([49, 48, 50, 49, 48], 3) == 4', 'assert maximumLength([49, 49, 48, 50, 49], 1) == 3', 'assert maximumLength([49, 49, 49, 49, 48], 4) == 5', 'assert maximumLength([49, 49, 49, 49, 49], 0) == 5', 'assert maximumLength([49, 49, 49, 50, 49], 0) == 4', 'assert maximumLength([49, 49, 50, 48, 49], 3) == 5', 'assert maximumLength([49, 49, 50, 49, 49], 1) == 4', 'assert maximumLength([49, 49, 50, 50, 49], 4) == 5', 'assert maximumLength([49, 49, 50, 50, 50], 5) == 5', 'assert maximumLength([49, 50, 49, 49, 49], 1) == 4', 'assert maximumLength([49, 50, 49, 49, 50], 0) == 3', 'assert maximumLength([49, 50, 49, 49, 50], 5) == 5', 'assert maximumLength([49, 50, 49, 50, 49], 0) == 3', 'assert maximumLength([49, 50, 50, 48, 48], 1) == 4', 'assert maximumLength([49, 50, 50, 50, 49], 3) == 5', 'assert maximumLength([50, 48, 48, 49, 49], 3) == 5', 'assert maximumLength([50, 48, 50, 49, 49], 3) == 5', 'assert maximumLength([50, 49, 49, 48, 49], 4) == 5', 'assert maximumLength([50, 49, 49, 49, 49], 4) == 5', 'assert maximumLength([50, 49, 49, 49, 50], 2) == 5', 'assert maximumLength([50, 49, 50, 49, 49], 2) == 4', 'assert maximumLength([50, 49, 50, 50, 49], 5) == 5', 'assert maximumLength([50, 49, 50, 50, 50], 2) == 5', 'assert maximumLength([50, 50, 49, 48, 48], 3) == 5', 'assert maximumLength([50, 50, 49, 49, 49], 5) == 5', 'assert maximumLength([50, 50, 49, 50, 49], 3) == 5', 'assert maximumLength([50, 50, 49, 50, 50], 0) == 4', 'assert maximumLength([50, 50, 50, 49, 49], 4) == 5', 'assert maximumLength([50, 50, 50, 50, 50], 4) == 5', 'assert maximumLength([1, 15, 53, 55, 17, 16], 2) == 3', 'assert maximumLength([6, 9, 14, 14, 11, 51], 4) == 6', 'assert maximumLength([14, 4, 58, 34, 26, 50], 3) == 4', 'assert maximumLength([14, 41, 32, 48, 56, 42], 5) == 6', 'assert maximumLength([15, 24, 35, 49, 36, 56], 5) == 6', 'assert maximumLength([17, 27, 28, 53, 3, 33], 5) == 6', 'assert maximumLength([18, 33, 3, 42, 16, 35], 4) == 5', 'assert maximumLength([18, 55, 10, 45, 23, 55], 0) == 2', 'assert maximumLength([25, 15, 13, 6, 49, 3], 5) == 6', 'assert maximumLength([26, 10, 39, 19, 18, 48], 1) == 2', 'assert maximumLength([26, 44, 17, 37, 54, 49], 4) == 5', 'assert maximumLength([27, 39, 50, 49, 43, 25], 2) == 3', 'assert maximumLength([30, 17, 31, 50, 49, 58], 1) == 2', 'assert maximumLength([32, 8, 49, 34, 15, 38], 2) == 3', 'assert maximumLength([40, 39, 54, 19, 45, 28], 1) == 2', 'assert maximumLength([43, 36, 12, 59, 41, 9], 4) == 5', 'assert maximumLength([48, 39, 12, 14, 30, 17], 6) == 6', 'assert maximumLength([50, 33, 32, 55, 45, 60], 2) == 3', 'assert maximumLength([52, 60, 55, 11, 3, 57], 6) == 6', 'assert maximumLength([53, 34, 1, 1, 19, 10], 4) == 6', 'assert maximumLength([58, 59, 58, 60, 59, 59], 6) == 6', 'assert maximumLength([58, 60, 58, 59, 60, 60], 1) == 4', 'assert maximumLength([59, 58, 59, 58, 59, 59], 2) == 5', 'assert maximumLength([59, 59, 58, 58, 58, 59], 0) == 3', 'assert maximumLength([59, 59, 59, 60, 59, 59], 5) == 6', 'assert maximumLength([59, 59, 59, 60, 60, 60], 2) == 6', 'assert maximumLength([59, 59, 60, 58, 58, 58], 6) == 6', 'assert maximumLength([59, 59, 60, 59, 60, 60], 3) == 6', 'assert maximumLength([59, 59, 60, 60, 59, 60], 2) == 5', 'assert maximumLength([59, 59, 60, 60, 60, 59], 2) == 6', 'assert maximumLength([59, 59, 60, 60, 60, 60], 2) == 6', 'assert maximumLength([59, 60, 58, 59, 58, 58], 2) == 5', 'assert maximumLength([59, 60, 58, 59, 59, 60], 2) == 4', 'assert maximumLength([59, 60, 58, 60, 59, 58], 6) == 6', 'assert maximumLength([59, 60, 59, 58, 59, 58], 6) == 6', 'assert maximumLength([59, 60, 59, 59, 59, 58], 3) == 6', 'assert maximumLength([59, 60, 59, 60, 60, 60], 0) == 4', 'assert maximumLength([59, 60, 60, 59, 60, 59], 3) == 5', 'assert maximumLength([59, 60, 60, 60, 60, 60], 2) == 6', 'assert maximumLength([60, 58, 58, 60, 58, 60], 0) == 3', 'assert maximumLength([60, 58, 60, 59, 58, 58], 2) == 5', 'assert maximumLength([60, 58, 60, 59, 58, 59], 3) == 5', 'assert maximumLength([60, 58, 60, 59, 60, 58], 5) == 6', 'assert maximumLength([60, 59, 58, 58, 59, 60], 3) == 5', 'assert maximumLength([60, 59, 58, 59, 60, 60], 4) == 6', 'assert maximumLength([60, 59, 59, 59, 60, 59], 1) == 5', 'assert maximumLength([60, 59, 59, 59, 60, 60], 5) == 6', 'assert maximumLength([60, 59, 59, 60, 60, 60], 5) == 6', 'assert maximumLength([60, 59, 60, 58, 59, 59], 5) == 6', 'assert maximumLength([60, 60, 59, 58, 58, 59], 1) == 4', 'assert maximumLength([60, 60, 59, 59, 59, 60], 4) == 6', 'assert maximumLength([60, 60, 59, 59, 60, 59], 6) == 6', 'assert maximumLength([60, 60, 60, 59, 60, 60], 6) == 6', 'assert maximumLength([60, 60, 60, 60, 59, 59], 0) == 4', 'assert maximumLength([60, 60, 60, 60, 60, 59], 2) == 6', 'assert maximumLength([60, 60, 60, 60, 60, 59], 3) == 6', 'assert maximumLength([60, 60, 60, 60, 60, 59], 5) == 6', 'assert maximumLength([60, 60, 60, 60, 60, 59], 6) == 6', 'assert maximumLength([60, 60, 60, 60, 60, 60], 5) == 6', 'assert maximumLength([4, 31, 12, 53, 45, 11, 49], 2) == 3', 'assert maximumLength([4, 70, 56, 36, 62, 66, 48], 4) == 5', 'assert maximumLength([9, 10, 56, 36, 49, 13, 36], 3) == 5', 'assert maximumLength([11, 61, 49, 8, 66, 41, 53], 7) == 7', 'assert maximumLength([25, 18, 19, 8, 42, 50, 45], 1) == 2', 'assert maximumLength([26, 30, 56, 13, 29, 58, 24], 6) == 7', 'assert maximumLength([28, 39, 24, 56, 50, 1, 57], 3) == 4', 'assert maximumLength([33, 38, 34, 21, 42, 68, 6], 3) == 4', 'assert maximumLength([35, 68, 29, 26, 21, 35, 7], 2) == 3', 'assert maximumLength([39, 45, 36, 1, 31, 45, 19], 1) == 3', 'assert maximumLength([41, 45, 69, 53, 10, 21, 23], 5) == 6', 'assert maximumLength([41, 55, 25, 14, 41, 41, 50], 0) == 3', 'assert maximumLength([44, 46, 55, 3, 14, 26, 32], 4) == 5', 'assert maximumLength([47, 30, 47, 6, 7, 29, 17], 0) == 2', 'assert maximumLength([48, 34, 12, 29, 66, 52, 13], 4) == 5', 'assert maximumLength([52, 42, 56, 43, 21, 3, 44], 5) == 6', 'assert maximumLength([53, 48, 69, 26, 56, 22, 47], 2) == 3', 'assert maximumLength([65, 25, 26, 70, 40, 46, 37], 5) == 6', 'assert maximumLength([67, 6, 52, 64, 46, 12, 21], 5) == 6', 'assert maximumLength([67, 42, 21, 5, 33, 39, 15], 7) == 7', 'assert maximumLength([68, 68, 68, 70, 70, 69, 70], 6) == 7', 'assert maximumLength([68, 68, 69, 70, 68, 68, 69], 2) == 5', 'assert maximumLength([68, 68, 70, 68, 70, 70, 70], 5) == 7', 'assert maximumLength([68, 68, 70, 69, 68, 69, 70], 3) == 6', 'assert maximumLength([68, 68, 70, 69, 69, 68, 69], 4) == 7', 'assert maximumLength([68, 69, 68, 68, 70, 69, 69], 5) == 7', 'assert maximumLength([68, 69, 68, 69, 69, 68, 68], 1) == 5', 'assert maximumLength([68, 69, 69, 69, 69, 68, 69], 4) == 7', 'assert maximumLength([68, 70, 68, 68, 69, 70, 70], 0) == 3', 'assert maximumLength([68, 70, 68, 69, 68, 70, 69], 2) == 5', 'assert maximumLength([68, 70, 68, 70, 70, 69, 70], 3) == 6', 'assert maximumLength([68, 70, 69, 68, 69, 68, 68], 4) == 6', 'assert maximumLength([69, 68, 68, 69, 70, 70, 70], 3) == 7', 'assert maximumLength([69, 68, 69, 70, 69, 70, 69], 2) == 5', 'assert maximumLength([69, 68, 70, 68, 69, 68, 68], 2) == 5', 'assert maximumLength([69, 69, 68, 70, 69, 68, 68], 3) == 6', 'assert maximumLength([69, 69, 69, 69, 68, 69, 70], 6) == 7', 'assert maximumLength([69, 69, 69, 69, 69, 69, 70], 6) == 7', 'assert maximumLength([69, 69, 70, 69, 70, 70, 70], 2) == 6', 'assert maximumLength([69, 69, 70, 70, 69, 70, 70], 0) == 4', 'assert maximumLength([69, 69, 70, 70, 70, 69, 70], 3) == 7', 'assert maximumLength([69, 70, 69, 70, 70, 69, 69], 7) == 7', 'assert maximumLength([69, 70, 69, 70, 70, 70, 69], 0) == 4', 'assert maximumLength([69, 70, 70, 69, 69, 69, 70], 5) == 7', 'assert maximumLength([69, 70, 70, 69, 69, 70, 70], 4) == 7', 'assert maximumLength([69, 70, 70, 69, 70, 69, 70], 0) == 4', 'assert maximumLength([69, 70, 70, 70, 70, 69, 70], 7) == 7', 'assert maximumLength([70, 68, 68, 70, 70, 70, 69], 3) == 7', 'assert maximumLength([70, 68, 69, 69, 70, 70, 69], 4) == 7', 'assert maximumLength([70, 68, 70, 70, 68, 69, 70], 6) == 7', 'assert maximumLength([70, 69, 69, 70, 69, 69, 69], 0) == 5', 'assert maximumLength([70, 69, 70, 69, 70, 69, 69], 4) == 6', 'assert maximumLength([70, 69, 70, 69, 70, 70, 69], 1) == 5', 'assert maximumLength([70, 69, 70, 70, 69, 69, 70], 3) == 6', 'assert maximumLength([70, 69, 70, 70, 70, 69, 70], 7) == 7', 'assert maximumLength([70, 70, 69, 69, 69, 70, 70], 3) == 7', 'assert maximumLength([70, 70, 69, 69, 70, 70, 69], 7) == 7', 'assert maximumLength([70, 70, 69, 70, 70, 69, 69], 6) == 7', 'assert maximumLength([70, 70, 70, 70, 70, 69, 70], 1) == 6', 'assert maximumLength([70, 70, 70, 70, 70, 70, 70], 6) == 7', 'assert maximumLength([1, 75, 60, 50, 48, 27, 76, 39], 4) == 5', 'assert maximumLength([3, 42, 65, 52, 31, 34, 59, 25], 3) == 4', 'assert maximumLength([11, 44, 10, 43, 73, 79, 50, 76], 7) == 8', 'assert maximumLength([16, 77, 38, 67, 37, 43, 28, 28], 6) == 8', 'assert maximumLength([21, 20, 61, 24, 19, 7, 31, 12], 0) == 1', 'assert maximumLength([30, 17, 55, 74, 27, 78, 19, 29], 8) == 8', 'assert maximumLength([35, 56, 28, 36, 5, 72, 48, 70], 8) == 8', 'assert maximumLength([40, 2, 71, 26, 60, 15, 53, 64], 0) == 1', 'assert maximumLength([44, 47, 52, 13, 59, 59, 22, 31], 8) == 8', 'assert maximumLength([53, 46, 71, 76, 11, 50, 38, 45], 0) == 1', 'assert maximumLength([58, 77, 51, 2, 48, 69, 22, 66], 2) == 3', 'assert maximumLength([62, 8, 62, 29, 60, 25, 6, 46], 6) == 7', 'assert maximumLength([66, 78, 62, 77, 69, 19, 78, 27], 1) == 3', 'assert maximumLength([68, 55, 62, 11, 72, 19, 32, 7], 0) == 1', 'assert maximumLength([69, 34, 42, 12, 10, 30, 22, 4], 0) == 1', 'assert maximumLength([70, 51, 42, 29, 59, 6, 44, 37], 7) == 8', 'assert maximumLength([74, 64, 48, 49, 4, 40, 65, 71], 2) == 3', 'assert maximumLength([75, 58, 7, 60, 1, 50, 29, 31], 0) == 1', 'assert maximumLength([76, 14, 63, 47, 76, 27, 31, 49], 8) == 8', 'assert maximumLength([78, 3, 37, 67, 14, 37, 34, 27], 5) == 6', 'assert maximumLength([78, 78, 78, 78, 79, 80, 78, 79], 7) == 8', 'assert maximumLength([78, 79, 78, 78, 80, 80, 79, 80], 8) == 8', 'assert maximumLength([78, 79, 80, 80, 78, 79, 79, 78], 2) == 5', 'assert maximumLength([78, 80, 78, 79, 79, 79, 80, 79], 4) == 7', 'assert maximumLength([78, 80, 78, 79, 80, 79, 78, 80], 8) == 8', 'assert maximumLength([78, 80, 78, 80, 78, 80, 79, 79], 0) == 3', 'assert maximumLength([78, 80, 80, 80, 79, 79, 80, 80], 0) == 5', 'assert maximumLength([79, 79, 78, 80, 78, 80, 79, 79], 6) == 8', 'assert maximumLength([79, 79, 79, 80, 79, 80, 79, 79], 0) == 6', 'assert maximumLength([79, 79, 79, 80, 80, 79, 79, 79], 1) == 6', 'assert maximumLength([79, 79, 79, 80, 80, 79, 79, 80], 0) == 5', 'assert maximumLength([79, 79, 79, 80, 80, 80, 78, 79], 2) == 7', 'assert maximumLength([79, 79, 80, 78, 80, 79, 79, 79], 2) == 7', 'assert maximumLength([79, 79, 80, 78, 80, 80, 80, 78], 5) == 8', 'assert maximumLength([79, 79, 80, 80, 79, 80, 79, 79], 6) == 8', 'assert maximumLength([79, 79, 80, 80, 80, 80, 80, 79], 1) == 7', 'assert maximumLength([79, 80, 78, 80, 78, 78, 79, 79], 2) == 6', 'assert maximumLength([79, 80, 79, 79, 79, 80, 80, 80], 5) == 8', 'assert maximumLength([79, 80, 79, 79, 80, 79, 79, 79], 4) == 8', 'assert maximumLength([79, 80, 79, 79, 80, 79, 80, 80], 8) == 8', 'assert maximumLength([79, 80, 79, 79, 80, 80, 79, 79], 2) == 7', 'assert maximumLength([79, 80, 79, 80, 80, 80, 79, 79], 5) == 8', 'assert maximumLength([79, 80, 80, 78, 79, 78, 78, 78], 7) == 8', 'assert maximumLength([79, 80, 80, 78, 79, 80, 80, 80], 5) == 8', 'assert maximumLength([79, 80, 80, 79, 79, 80, 79, 80], 8) == 8', 'assert maximumLength([79, 80, 80, 79, 80, 80, 80, 79], 4) == 8', 'assert maximumLength([79, 80, 80, 80, 79, 80, 79, 79], 3) == 7', 'assert maximumLength([80, 78, 78, 79, 78, 78, 79, 80], 4) == 7', 'assert maximumLength([80, 78, 80, 78, 80, 79, 80, 79], 1) == 5', 'assert maximumLength([80, 79, 79, 79, 80, 80, 80, 80], 0) == 5', 'assert maximumLength([80, 79, 79, 80, 80, 80, 80, 79], 1) == 6', 'assert maximumLength([80, 79, 80, 78, 78, 79, 79, 79], 7) == 8', 'assert maximumLength([80, 79, 80, 79, 80, 79, 80, 79], 3) == 6', 'assert maximumLength([80, 80, 78, 80, 78, 80, 78, 79], 3) == 6', 'assert maximumLength([80, 80, 78, 80, 80, 80, 80, 80], 1) == 7', 'assert maximumLength([80, 80, 79, 78, 79, 79, 78, 79], 1) == 6', 'assert maximumLength([80, 80, 79, 79, 79, 79, 79, 79], 0) == 6', 'assert maximumLength([80, 80, 79, 79, 80, 79, 80, 79], 8) == 8', 'assert maximumLength([80, 80, 80, 79, 80, 79, 79, 79], 3) == 8', 'assert maximumLength([80, 80, 80, 80, 79, 80, 79, 79], 1) == 7', 'assert maximumLength([4, 24, 52, 61, 14, 35, 29, 62, 22], 7) == 8', 'assert maximumLength([6, 40, 65, 56, 28, 54, 39, 51, 29], 7) == 8', 'assert maximumLength([11, 47, 72, 7, 49, 43, 90, 48, 21], 6) == 7', 'assert maximumLength([18, 85, 4, 89, 80, 45, 76, 87, 14], 2) == 3', 'assert maximumLength([19, 9, 73, 40, 43, 34, 48, 88, 83], 7) == 8', 'assert maximumLength([21, 47, 59, 39, 57, 21, 80, 67, 59], 8) == 9', 'assert maximumLength([24, 26, 30, 54, 25, 44, 59, 40, 8], 0) == 1', 'assert maximumLength([31, 7, 29, 26, 28, 64, 13, 86, 25], 7) == 8', 'assert maximumLength([38, 13, 17, 6, 62, 18, 90, 88, 1], 8) == 9', 'assert maximumLength([50, 68, 68, 80, 28, 17, 28, 54, 81], 3) == 6', 'assert maximumLength([51, 21, 4, 13, 75, 45, 53, 11, 11], 6) == 8', 'assert maximumLength([57, 22, 45, 11, 16, 34, 76, 18, 26], 9) == 9', 'assert maximumLength([67, 8, 60, 80, 77, 19, 87, 19, 87], 9) == 9', 'assert maximumLength([68, 69, 49, 12, 15, 60, 20, 13, 5], 6) == 7', 'assert maximumLength([69, 18, 48, 21, 3, 37, 63, 70, 63], 1) == 3', 'assert maximumLength([72, 65, 38, 1, 76, 1, 62, 77, 63], 7) == 8', 'assert maximumLength([78, 88, 21, 48, 85, 40, 18, 64, 57], 9) == 9', 'assert maximumLength([79, 23, 45, 5, 24, 84, 52, 31, 69], 0) == 1', 'assert maximumLength([79, 34, 79, 46, 60, 61, 36, 27, 31], 0) == 2', 'assert maximumLength([87, 62, 62, 50, 71, 2, 58, 57, 10], 8) == 9', 'assert maximumLength([88, 88, 89, 88, 89, 90, 88, 88, 89], 9) == 9', 'assert maximumLength([88, 89, 88, 89, 88, 90, 88, 89, 88], 4) == 7', 'assert maximumLength([88, 89, 90, 89, 89, 90, 90, 88, 88], 2) == 7', 'assert maximumLength([88, 90, 88, 89, 88, 89, 89, 90, 88], 8) == 9', 'assert maximumLength([88, 90, 88, 90, 88, 90, 90, 88, 90], 6) == 8', 'assert maximumLength([88, 90, 89, 88, 89, 88, 90, 88, 90], 5) == 7', 'assert maximumLength([88, 90, 90, 88, 90, 88, 90, 88, 90], 7) == 9', 'assert maximumLength([89, 88, 89, 90, 90, 88, 88, 89, 90], 0) == 3', 'assert maximumLength([89, 88, 90, 88, 89, 90, 90, 88, 88], 3) == 7', 'assert maximumLength([89, 89, 88, 90, 88, 89, 89, 89, 89], 1) == 6', 'assert maximumLength([89, 89, 89, 89, 90, 90, 90, 90, 89], 0) == 5', 'assert maximumLength([89, 89, 90, 90, 89, 88, 89, 90, 90], 9) == 9', 'assert maximumLength([89, 89, 90, 90, 89, 90, 90, 90, 90], 3) == 9', 'assert maximumLength([89, 90, 89, 89, 88, 88, 88, 89, 88], 8) == 9', 'assert maximumLength([89, 90, 89, 89, 89, 90, 89, 89, 89], 3) == 8', 'assert maximumLength([89, 90, 89, 89, 90, 89, 89, 88, 90], 8) == 9', 'assert maximumLength([89, 90, 89, 89, 90, 89, 89, 89, 89], 1) == 7', 'assert maximumLength([89, 90, 89, 89, 90, 89, 89, 89, 89], 6) == 9', 'assert maximumLength([89, 90, 89, 89, 90, 89, 90, 90, 90], 5) == 9', 'assert maximumLength([89, 90, 89, 90, 90, 90, 90, 89, 90], 3) == 8', 'assert maximumLength([89, 90, 90, 89, 90, 88, 88, 89, 90], 0) == 4', 'assert maximumLength([89, 90, 90, 90, 89, 89, 90, 89, 90], 3) == 8', 'assert maximumLength([89, 90, 90, 90, 89, 90, 90, 89, 89], 7) == 9', 'assert maximumLength([90, 88, 88, 88, 89, 89, 90, 89, 90], 1) == 6', 'assert maximumLength([90, 88, 88, 90, 88, 88, 89, 88, 89], 8) == 9', 'assert maximumLength([90, 88, 89, 89, 89, 90, 90, 89, 88], 6) == 9', 'assert maximumLength([90, 89, 88, 89, 90, 90, 89, 89, 90], 6) == 9', 'assert maximumLength([90, 89, 88, 90, 90, 88, 89, 89, 88], 4) == 7', 'assert maximumLength([90, 89, 89, 88, 89, 88, 88, 89, 88], 0) == 4', 'assert maximumLength([90, 89, 89, 89, 90, 90, 90, 89, 89], 1) == 6', 'assert maximumLength([90, 89, 90, 90, 89, 90, 89, 89, 90], 3) == 7', 'assert maximumLength([90, 89, 90, 90, 90, 89, 90, 89, 89], 7) == 9', 'assert maximumLength([90, 89, 90, 90, 90, 90, 89, 90, 90], 5) == 9', 'assert maximumLength([90, 90, 89, 89, 89, 89, 89, 89, 89], 3) == 9', 'assert maximumLength([90, 90, 89, 89, 89, 90, 89, 90, 89], 5) == 9', 'assert maximumLength([90, 90, 89, 89, 90, 90, 90, 90, 89], 4) == 9', 'assert maximumLength([90, 90, 89, 90, 89, 90, 89, 89, 90], 3) == 7', 'assert maximumLength([90, 90, 89, 90, 89, 90, 89, 89, 90], 9) == 9', 'assert maximumLength([90, 90, 90, 89, 90, 89, 90, 90, 90], 9) == 9', 'assert maximumLength([90, 90, 90, 89, 90, 90, 89, 89, 90], 8) == 9', 'assert maximumLength([9, 63, 88, 68, 60, 10, 99, 50, 70, 45], 0) == 1', 'assert maximumLength([12, 46, 86, 99, 8, 51, 70, 62, 36, 72], 5) == 6', 'assert maximumLength([14, 77, 22, 100, 71, 12, 28, 55, 77, 11], 0) == 2', 'assert maximumLength([21, 73, 80, 42, 8, 62, 57, 13, 91, 38], 0) == 1', 'assert maximumLength([23, 66, 73, 98, 65, 36, 57, 82, 8, 85], 5) == 6', 'assert maximumLength([24, 20, 65, 60, 32, 83, 35, 73, 5, 22], 7) == 8', 'assert maximumLength([33, 8, 20, 52, 50, 54, 99, 30, 39, 88], 8) == 9', 'assert maximumLength([35, 19, 30, 62, 77, 18, 55, 12, 44, 16], 7) == 8', 'assert maximumLength([37, 85, 59, 70, 74, 79, 21, 12, 24, 86], 1) == 2', 'assert maximumLength([38, 92, 44, 60, 18, 30, 53, 26, 42, 26], 1) == 3', 'assert maximumLength([40, 49, 37, 48, 92, 20, 16, 34, 70, 89], 9) == 10', 'assert maximumLength([43, 85, 31, 3, 85, 65, 68, 85, 71, 65], 10) == 10', 'assert maximumLength([45, 78, 62, 43, 15, 8, 74, 75, 63, 15], 9) == 10', 'assert maximumLength([56, 55, 83, 55, 34, 12, 8, 24, 17, 1], 8) == 9', 'assert maximumLength([68, 45, 57, 43, 65, 94, 45, 71, 61, 62], 10) == 10', 'assert maximumLength([71, 8, 35, 10, 73, 68, 10, 7, 56, 21], 1) == 3', 'assert maximumLength([87, 38, 61, 18, 89, 43, 15, 73, 18, 15], 5) == 7', 'assert maximumLength([90, 66, 59, 70, 56, 22, 13, 21, 85, 43], 5) == 6', 'assert maximumLength([96, 45, 40, 25, 8, 17, 69, 65, 72, 60], 5) == 6', 'assert maximumLength([98, 99, 100, 99, 100, 100, 98, 100, 99, 100], 7) == 9', 'assert maximumLength([98, 100, 99, 98, 98, 100, 99, 100, 100, 100], 6) == 10', 'assert maximumLength([98, 100, 99, 98, 98, 100, 100, 99, 98, 99], 4) == 8', 'assert maximumLength([98, 100, 100, 100, 100, 100, 99, 100, 99, 99], 4) == 10', 'assert maximumLength([99, 98, 99, 98, 98, 98, 99, 98, 98, 98], 2) == 8', 'assert maximumLength([99, 98, 100, 98, 98, 100, 100, 100, 100, 98], 10) == 10', 'assert maximumLength([99, 99, 98, 98, 100, 98, 100, 99, 100, 99], 0) == 4', 'assert maximumLength([99, 99, 99, 99, 100, 99, 100, 100, 100, 100], 8) == 10', 'assert maximumLength([99, 99, 99, 99, 100, 100, 99, 99, 99, 100], 0) == 7', 'assert maximumLength([99, 99, 99, 100, 99, 100, 99, 100, 100, 99], 4) == 9', 'assert maximumLength([99, 99, 99, 100, 100, 100, 99, 100, 99, 99], 5) == 10', 'assert maximumLength([99, 99, 100, 99, 99, 100, 100, 99, 99, 99], 7) == 10', 'assert maximumLength([99, 99, 100, 100, 98, 98, 99, 98, 99, 99], 0) == 5', 'assert maximumLength([99, 99, 100, 100, 99, 99, 99, 100, 100, 99], 7) == 10', 'assert maximumLength([99, 99, 100, 100, 100, 99, 99, 100, 100, 100], 5) == 10', 'assert maximumLength([99, 100, 98, 98, 99, 98, 100, 100, 99, 100], 8) == 10', 'assert maximumLength([99, 100, 98, 98, 100, 98, 100, 100, 98, 100], 1) == 6', 'assert maximumLength([99, 100, 99, 98, 99, 99, 100, 99, 100, 100], 4) == 8', 'assert maximumLength([99, 100, 99, 99, 99, 98, 98, 99, 99, 98], 0) == 6', 'assert maximumLength([99, 100, 99, 99, 100, 99, 100, 99, 99, 100], 4) == 8', 'assert maximumLength([99, 100, 99, 100, 99, 99, 100, 100, 99, 99], 8) == 10', 'assert maximumLength([99, 100, 99, 100, 100, 99, 99, 99, 99, 99], 1) == 8', 'assert maximumLength([99, 100, 100, 99, 100, 100, 99, 99, 100, 100], 2) == 8', 'assert maximumLength([99, 100, 100, 100, 99, 100, 100, 100, 100, 100], 2) == 9', 'assert maximumLength([99, 100, 100, 100, 100, 99, 100, 99, 99, 99], 5) == 10', 'assert maximumLength([100, 94, 69, 13, 31, 32, 46, 39, 90, 90], 8) == 10', 'assert maximumLength([100, 98, 98, 99, 100, 98, 100, 98, 99, 100], 8) == 10', 'assert maximumLength([100, 98, 99, 98, 99, 99, 99, 99, 98, 99], 10) == 10', 'assert maximumLength([100, 98, 99, 100, 100, 99, 100, 99, 98, 98], 6) == 9', 'assert maximumLength([100, 98, 100, 98, 99, 100, 98, 99, 99, 99], 1) == 6', 'assert maximumLength([100, 99, 98, 99, 99, 98, 98, 98, 98, 99], 4) == 9', 'assert maximumLength([100, 99, 99, 100, 99, 100, 100, 100, 99, 99], 10) == 10', 'assert maximumLength([100, 99, 100, 98, 98, 100, 99, 100, 100, 100], 7) == 10', 'assert maximumLength([100, 99, 100, 99, 99, 99, 100, 99, 99, 100], 2) == 8', 'assert maximumLength([100, 99, 100, 100, 99, 98, 99, 99, 99, 99], 9) == 10', 'assert maximumLength([100, 100, 98, 99, 100, 100, 98, 100, 100, 98], 4) == 9', 'assert maximumLength([100, 100, 99, 99, 99, 99, 99, 99, 100, 99], 3) == 10', 'assert maximumLength([100, 100, 99, 99, 100, 100, 99, 99, 99, 99], 6) == 10', 'assert maximumLength([100, 100, 99, 100, 100, 100, 99, 99, 99, 99], 8) == 10', 'assert maximumLength([100, 100, 100, 99, 100, 99, 99, 100, 100, 100], 7) == 10', 'assert maximumLength([100, 100, 100, 99, 100, 100, 99, 100, 99, 100], 3) == 8', 'assert maximumLength([98, 91, 90, 91, 95, 93, 90, 91, 90, 92, 100, 98, 90, 94, 94, 93, 95, 94, 97, 91, 95, 96, 93, 94, 97, 93, 95, 92, 92, 97, 99, 97, 97, 91, 94, 97, 90, 92, 95, 92, 100, 93, 94, 93, 99, 97, 100, 99, 95, 93, 96, 96, 90, 95, 100, 90, 92, 98, 100, 92, 92, 95, 91, 91, 98, 98, 95, 90, 96, 100, 90, 93, 100, 93, 95, 96, 98, 93, 94, 99, 98, 98, 90, 96, 91, 97, 90, 96, 97, 100, 96, 90, 90, 94, 96, 91, 99, 93, 99, 100], 0) == 13', 'assert maximumLength([99, 99, 100, 99, 99, 100, 100, 100, 99, 99, 100, 100, 100, 99, 100, 100, 100, 99, 100, 100, 100, 99, 99, 100, 100, 99, 100, 99, 100, 99, 100, 99, 100, 99, 99, 100, 100, 100, 99, 100, 100, 99, 100, 100, 100, 99, 99, 99, 100, 99, 99, 100, 100, 100, 100, 99, 99, 99, 99, 100, 100, 99, 100, 100, 99, 99, 99, 100, 100, 99, 99, 99, 99, 100, 100, 99, 99, 99, 99, 99, 99, 100, 100, 99, 99, 100, 100, 100, 99, 99, 99, 100, 100, 100, 100, 100, 99, 100, 99, 99], 2) == 61', 'assert maximumLength([100, 96, 97, 94, 94, 94, 93, 91, 91, 98, 96, 100, 95, 90, 97, 98, 92, 98, 93, 92, 94, 100, 98, 91, 94, 100, 99, 97, 93, 96, 100, 95, 95, 91, 99, 100, 92, 92, 94, 97, 96, 94, 95, 95, 91, 90, 94, 91, 99, 99, 98, 99, 97, 97, 98, 96, 90, 93, 97, 91, 90, 94, 90, 91, 97, 92, 100, 100, 95, 94, 91, 99, 91, 99, 90, 96, 97, 91, 98, 91, 96, 94, 92, 96, 98, 97, 97, 91, 100, 98, 97, 93, 95, 93, 92, 92, 97, 100, 99, 94], 4) == 24', 'assert maximumLength([100, 100, 99, 100, 99, 99, 99, 100, 99, 99, 99, 100, 100, 99, 100, 100, 99, 100, 100, 100, 99, 99, 99, 100, 99, 100, 100, 99, 99, 99, 100, 99, 99, 100, 100, 99, 100, 99, 99, 100, 99, 100, 100, 99, 99, 99, 99, 99, 100, 99, 100, 99, 100, 100, 99, 99, 99, 99, 99, 99, 100, 100, 100, 99, 100, 99, 99, 99, 100, 100, 100, 100, 99, 99, 100, 99, 99, 99, 99, 99, 99, 100, 100, 100, 100, 99, 99, 99, 99, 99, 99, 99, 100, 99, 99, 100, 100, 99, 99, 100], 4) == 67', 'assert maximumLength([100, 100, 100, 99, 100, 100, 99, 99, 99, 99, 100, 100, 99, 100, 100, 100, 100, 100, 99, 99, 99, 100, 99, 99, 99, 99, 99, 99, 100, 100, 99, 99, 99, 99, 99, 100, 100, 100, 100, 99, 99, 99, 99, 99, 99, 99, 100, 100, 99, 100, 100, 100, 100, 99, 100, 100, 100, 100, 100, 100, 100, 99, 100, 100, 100, 100, 100, 100, 100, 99, 99, 99, 100, 100, 100, 99, 99, 100, 100, 99, 99, 99, 99, 100, 99, 100, 100, 99, 100, 100, 99, 100, 100, 99, 99, 100, 100, 99, 99, 100], 0) == 54']
correct = 0
for t in tests:
    try:
        exec(t)
        correct+=1
    except:
        pass
success = len(tests) == correct
print(correct,'/',len(tests))
print(success)