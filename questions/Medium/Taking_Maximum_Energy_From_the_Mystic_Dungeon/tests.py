from question import maximumEnergy
tests = ['assert maximumEnergy([5, 2, -10, -5, 1], 3) == 3', 'assert maximumEnergy([-2, -3, -1], 2) == -1', 'assert maximumEnergy([8, -5], 1) == 3', 'assert maximumEnergy([5, -10, 4, 3, 5, -9, 9, -7], 2) == 23', 'assert maximumEnergy([9, -5], 1) == 4', 'assert maximumEnergy([-9, -2, -6, -5, -8, 3, 0], 1) == 3', 'assert maximumEnergy([1, -3, 10, 7], 1) == 17', 'assert maximumEnergy([-8, 10, -10], 1) == 0', 'assert maximumEnergy([7, -9, 4, 1, 10, 7, 9, -3], 6) == 16', 'assert maximumEnergy([10, 7, -6, 9, -4], 1) == 16', 'assert maximumEnergy([-1, -2, -8, 6, -6, -6, -6, 5, 5], 8) == 6', 'assert maximumEnergy([2, 1, -2, -1, 4, 1, -10, 4], 3) == 9', 'assert maximumEnergy([-1, 3, -4, -7], 2) == -4', 'assert maximumEnergy([-6, 8, 0, -4, -10, 7, 4, 1, -10], 8) == 8', 'assert maximumEnergy([-1, -3, -3, 1, -1, 8, -9, -9], 1) == -9', 'assert maximumEnergy([10, -5], 1) == 5', 'assert maximumEnergy([1, 3, 4, 10, -6, -2, 4], 4) == 10', 'assert maximumEnergy([2, 8], 1) == 10', 'assert maximumEnergy([0, 6, -5, 5, -6, 3, 7, 4], 1) == 14', 'assert maximumEnergy([-1, 0], 1) == 0', 'assert maximumEnergy([-6, 4, 9, -7, -2, 8], 1) == 12', 'assert maximumEnergy([-8, -9, -6, 9, -1, -6, 1], 5) == 9', 'assert maximumEnergy([4, -7, 8, -8], 1) == 0', 'assert maximumEnergy([-5, -10, -10, 1, -5, 3, 6, -2, 0], 6) == 6', 'assert maximumEnergy([4, -4, -9], 2) == -4', 'assert maximumEnergy([-1, -8, 6, 8], 3) == 8', 'assert maximumEnergy([3, -9, 4, 2, 1, 4], 1) == 11', 'assert maximumEnergy([2, 6, -6, 5], 3) == 7', 'assert maximumEnergy([-6, -5], 1) == -5', 'assert maximumEnergy([2, 6, 0, -8, -7, 2, 9, 5, -6, 2], 5) == 15', 'assert maximumEnergy([7, 10, -2, -3, 8, 5, -6, -3, -7], 2) == 9', 'assert maximumEnergy([-10, 6, -1, 9, -1], 2) == 15', 'assert maximumEnergy([8, -2], 1) == 6', 'assert maximumEnergy([-9, 10, 4, 7, -4, 8, -7, 0, 1], 8) == 10', 'assert maximumEnergy([-2, -1, -6, 5, -6], 2) == 5', 'assert maximumEnergy([5, 0], 1) == 5', 'assert maximumEnergy([-3, -1, -10, 6, -5], 2) == 6', 'assert maximumEnergy([6, -3, -4, -1, 0, 10, 9, 1, -10, 0], 7) == 10', 'assert maximumEnergy([-1, 7, 1, -5, 8, -1], 2) == 9', 'assert maximumEnergy([-5, -4, -6, 3, -2, 6, 4], 5) == 6', 'assert maximumEnergy([-7, 4, -9], 1) == -5', 'assert maximumEnergy([-6, 5, 5], 1) == 10', 'assert maximumEnergy([0, 1, 6, -3, 0, -10, 1, 9], 2) == 9', 'assert maximumEnergy([-5, 6, 1, 10, -7, 10, -8, -3], 4) == 16', 'assert maximumEnergy([-8, -8, 1, -6, 9, -1, -10, 7, 3, 2], 7) == 9', 'assert maximumEnergy([-10, -2, -2, 1, 4, 2, 2, -2, 5], 1) == 12', 'assert maximumEnergy([-10, 1, -6, 8, 9, -1, 10, 4, 6], 3) == 18', 'assert maximumEnergy([-6, 6, 5, 6], 1) == 17', 'assert maximumEnergy([1, 5, -4, -2, -1], 2) == 3', 'assert maximumEnergy([-3, 1], 1) == 1', 'assert maximumEnergy([-4, 7, 7, -8, 3, -8], 4) == 7', 'assert maximumEnergy([6, -1, -4, 4, -3, 6, 7, -4, 8], 5) == 12', 'assert maximumEnergy([-2, 4, 5, -3, -2], 4) == 5', 'assert maximumEnergy([10, -2, -7, 10, -5, -2, -9], 2) == 8', 'assert maximumEnergy([-3, -5, 7, -10, 7, 1, 1, 6, -7], 8) == 7', 'assert maximumEnergy([7, -2, -7, 1, 3], 4) == 10', 'assert maximumEnergy([-7, -6, -6, -3, -10, -8], 5) == -3', 'assert maximumEnergy([8, -2, 5, 0, -2, 6, -3, 1, 4], 4) == 10', 'assert maximumEnergy([-5, -10, 8, 10], 1) == 18', 'assert maximumEnergy([5, 10, -2, -2, 1, 9, -10, -4, -6], 2) == 13', 'assert maximumEnergy([-9, 5, 10, -4], 1) == 11', 'assert maximumEnergy([-7, 1, -9, 3, 9, 8, 5], 4) == 9', 'assert maximumEnergy([-4, 4, 3, 10, 2, 0, -2, -3, 2], 3) == 8', 'assert maximumEnergy([7, 8, -1], 2) == 8', 'assert maximumEnergy([-1, 6, -4, 3, -9, 8, 2], 6) == 8', 'assert maximumEnergy([9, 2, -3, -9], 2) == 6', 'assert maximumEnergy([6, 3, -1], 2) == 5', 'assert maximumEnergy([7, 6, 1, 4, -6, 5, 0, 6], 2) == 21', 'assert maximumEnergy([-6, -2, 9, 3, -8, 0, -9, -8], 4) == 0', 'assert maximumEnergy([-4, -10, 3, 1, -5, 6], 5) == 6', 'assert maximumEnergy([7, 2, -2, -8, 2, 9, -6, -3, -8], 2) == 6', 'assert maximumEnergy([-4, -5, 5, 3, 8, 0], 3) == 8', 'assert maximumEnergy([9, 6, 7, 9, 2, 8], 1) == 41', 'assert maximumEnergy([-3, 1, 4, 2, -8, 0, -6, 3, 9], 1) == 12', 'assert maximumEnergy([10, 7, 8, -5, 4, 1, -6], 5) == 11', 'assert maximumEnergy([10, 0, -6, 1], 1) == 5', 'assert maximumEnergy([-4, 8, -6, 2, 6, -8, -2], 6) == 8', 'assert maximumEnergy([-2, 2, 3, 8, -1, -10, 2, -10, -4, -10], 5) == 4', 'assert maximumEnergy([-10, -1, 8, 7, -3, 4, -6, -9], 2) == 2', 'assert maximumEnergy([-6, -3], 1) == -3', 'assert maximumEnergy([-6, 4, 9, -9, -9, -6, -10, -5], 6) == 9', 'assert maximumEnergy([5, 5, 9, 4, -3, -7, -8, -2], 7) == 9', 'assert maximumEnergy([7, -2, 2, 6, -10, 6, 0], 2) == 12', 'assert maximumEnergy([-2, 10, 10, -3, -7, 4, 10, 9], 4) == 20', 'assert maximumEnergy([4, 8, 4, 5], 3) == 9', 'assert maximumEnergy([9, 6, 9, 0, 0, 9], 1) == 33', 'assert maximumEnergy([2, 8, 6, 5, -1, -1, -4], 1) == 15', 'assert maximumEnergy([10, 2, 7, 10, -8, -4, 10, 10, 5], 1) == 42', 'assert maximumEnergy([-10, 7, 8, 2, 9, 9, -7, -8, -8, -10], 1) == 2', 'assert maximumEnergy([1, 9, 9], 1) == 19', 'assert maximumEnergy([3, 8, 1, 2, -8, 3, 3, 10], 3) == 10', 'assert maximumEnergy([5, 4, 10, 6, -5, 4, -7, 4], 6) == 10', 'assert maximumEnergy([-8, -4, 6, 6, 6], 2) == 12', 'assert maximumEnergy([9, 9, -3, 4, -1, -5, 8, -2, 7, -5], 3) == 16', 'assert maximumEnergy([8, -3, -2, 8], 2) == 8', 'assert maximumEnergy([4, 2, -6, -1, -7, 0], 1) == 0', 'assert maximumEnergy([7, -4, -7, -9, 10], 2) == 10', 'assert maximumEnergy([-2, 9, 2, -4], 2) == 5', 'assert maximumEnergy([10, 9, 9], 2) == 19', 'assert maximumEnergy([-5, 5, -8, -7, 9, -1, 1, -8], 7) == 9', 'assert maximumEnergy([-6, 2, 6], 1) == 8', 'assert maximumEnergy([6, -10, -3, 8, -5], 4) == 8', 'assert maximumEnergy([7, 3, -7, 3, -9, -8], 5) == 3', 'assert maximumEnergy([2, 2, -3, -10, -3, 2], 5) == 4', 'assert maximumEnergy([-8, 2, 0], 2) == 2', 'assert maximumEnergy([5, 4, 1, 1, -3, 8, -10, 4, 7], 1) == 17', 'assert maximumEnergy([-10, -7, -6, -8, 0, 3, 8, -3], 3) == 8', 'assert maximumEnergy([4, -7, 0, 10, 8, 7], 4) == 12', 'assert maximumEnergy([-5, -7, -4, -1, -9, -6], 4) == -1', 'assert maximumEnergy([-9, -6], 1) == -6', 'assert maximumEnergy([-6, 8, 5, -4, -5, 2, -4, -2], 4) == 10', 'assert maximumEnergy([-8, -9, 4, -4, -9, -3, 1], 2) == 1', 'assert maximumEnergy([6, -2, 2, 10, 7, -4, 4], 6) == 10', 'assert maximumEnergy([8, -6], 1) == 2', 'assert maximumEnergy([7, -7, -9, -1, -10, 4, 7, -8], 5) == 11', 'assert maximumEnergy([0, 6, 9, -9, 6, 0, 4, 4, 8, -8], 5) == 13', 'assert maximumEnergy([10, -10, -3, -7, 7, -4, 0, 4, -2], 8) == 8', 'assert maximumEnergy([3, 8, -3, 10, 9, 8, 0, 6, -8, -1], 4) == 16', 'assert maximumEnergy([-2, -4], 1) == -4', 'assert maximumEnergy([-2, -2, 0, 2], 1) == 2', 'assert maximumEnergy([6, -9, 0, 8, -8, -5, 6, -3, -4, 10], 1) == 10', 'assert maximumEnergy([-3, -2], 1) == -2', 'assert maximumEnergy([-8, -4, 0, -4, 6], 1) == 6', 'assert maximumEnergy([2, 2, 8, 2], 2) == 10', 'assert maximumEnergy([4, 5, 5], 2) == 9', 'assert maximumEnergy([6, 2, -5, 6, 2, -2, 0], 4) == 8', 'assert maximumEnergy([5, -3], 1) == 2', 'assert maximumEnergy([-6, -10, -5, -4, -4, 10, -5, 2], 7) == 10', 'assert maximumEnergy([10, -2, 4, -5], 3) == 5', 'assert maximumEnergy([8, -6, -7, 1, 2, -8], 2) == 3', 'assert maximumEnergy([3, -2, -8, -5, -5, -7, -9, 2, 5, -9], 7) == 5', 'assert maximumEnergy([-5, -2, 0], 2) == 0', 'assert maximumEnergy([-10, -2, -3, 7, -4, 6, -4], 6) == 7', 'assert maximumEnergy([-4, -7, 6, -6, 7, 1, 9, 6, 0], 8) == 9', 'assert maximumEnergy([0, 4, 5, -7, -7, 6, 5, 10, 6], 7) == 10', 'assert maximumEnergy([0, 3, -2], 1) == 1', 'assert maximumEnergy([6, 10], 1) == 16', 'assert maximumEnergy([5, 4, 1, 9, -9, 10, 8], 4) == 14', 'assert maximumEnergy([-9, 1, 9, -6, -6, 4, 0, -3], 4) == 9', 'assert maximumEnergy([-3, 7, -7, 7, 9, 8, 6, 2, -8], 8) == 9', 'assert maximumEnergy([-6, 5, 2, 7, -8], 4) == 7', 'assert maximumEnergy([-7, 7, 4, 7, -5, 7], 4) == 14', 'assert maximumEnergy([-4, 3, 6, -2, -4], 2) == 2', 'assert maximumEnergy([5, 1, -3, 3, 1], 1) == 7', 'assert maximumEnergy([-5, -4, -4, -10, -5, 6], 1) == 6', 'assert maximumEnergy([-6, -2, -4, -7], 2) == -4', 'assert maximumEnergy([-10, 1, -2, -1, -1], 3) == 0', 'assert maximumEnergy([6, 8, -10, -4], 2) == 4', 'assert maximumEnergy([1, -2], 1) == -1', 'assert maximumEnergy([-8, 9, 3, 6, -1, 4, 6, 7, 6], 4) == 13', 'assert maximumEnergy([-6, -3, 4, 1, -9, -4], 3) == 1', 'assert maximumEnergy([8, -3], 1) == 5', 'assert maximumEnergy([-7, -10], 1) == -10', 'assert maximumEnergy([-6, -10, 10, 5, -3], 3) == 10', 'assert maximumEnergy([-6, -8, -8, -10, 8, 3, 9, 9, -10], 1) == 19', 'assert maximumEnergy([-6, 1, 0, -9, 4, -5, -4], 2) == 0', 'assert maximumEnergy([-2, -4, -6, 5, -3, -10, -1, 2, -8, 7], 1) == 7', 'assert maximumEnergy([-8, 1, 1, 4, -5, -10, 10, -5], 5) == 11', 'assert maximumEnergy([9, 10, -1, 5, 5, 1, -7, 6, 3], 2) == 22', 'assert maximumEnergy([5, 8, -2, -4, 0, -2, -4, -5], 3) == 3', 'assert maximumEnergy([-5, 5, 8, 6, -9, -1, 3, -5, 9, -8], 8) == 9', 'assert maximumEnergy([6, 7, -9, -6, -7, -10, -1, -4, -3, 8], 4) == 8', 'assert maximumEnergy([-9, -10, 7, -3, -1, 2, 8, -7, -9, -4], 3) == 4', 'assert maximumEnergy([-1, 3, 8, 1, 0, 4], 2) == 8', 'assert maximumEnergy([10, -3], 1) == 7', 'assert maximumEnergy([-7, 3, -5], 1) == -2', 'assert maximumEnergy([-9, -9, -7], 2) == -7', 'assert maximumEnergy([9, 10, 5, -9], 3) == 10', 'assert maximumEnergy([3, 5, -3, -10, 9, -8, -8, -4, -3], 2) == -2', 'assert maximumEnergy([-4, 8, -9, 1, 3, -9, 6, 10], 2) == 10', 'assert maximumEnergy([3, 4], 1) == 7', 'assert maximumEnergy([3, -10, -3, -5, 7, 1, -8, 0], 5) == 7', 'assert maximumEnergy([1, -10, 3], 2) == 4', 'assert maximumEnergy([9, -1, -9, 2, 10, -8, 10, -5], 6) == 19', 'assert maximumEnergy([2, 1, 6], 2) == 8', 'assert maximumEnergy([4, 5, -6, 8, -4, 8, -2], 4) == 13', 'assert maximumEnergy([2, -10, 3, 6, 2, 8, 9, -5], 6) == 11', 'assert maximumEnergy([-2, -7], 1) == -7', 'assert maximumEnergy([-3, 6, -8, -10, 10, -3, 3, -2, 8, 4], 6) == 10', 'assert maximumEnergy([8, -9, 4, 0], 2) == 12', 'assert maximumEnergy([-6, 4, -1, 5, -6, -10, 5, -9], 3) == 10', 'assert maximumEnergy([-6, -1, -10], 2) == -1', 'assert maximumEnergy([-9, -9, -10, 2, 3, -3, 2], 4) == 3', 'assert maximumEnergy([-1, 8, 10, 0, 3, 6], 2) == 14', 'assert maximumEnergy([2, 6, 5, -4, 0, -6, 8], 2) == 15', 'assert maximumEnergy([-6, -8, -4, 5, 4, -4], 3) == 5', 'assert maximumEnergy([-1, 7, 1, 9, -6, -7], 2) == 9', 'assert maximumEnergy([-10, 2, 0, -5, 2, -3], 5) == 2', 'assert maximumEnergy([1, 0, 10, -10, -5], 3) == 10', 'assert maximumEnergy([6, 8], 1) == 14', 'assert maximumEnergy([4, -10, -9, 8, 7, 9, -9, -1], 2) == 16', 'assert maximumEnergy([-7, -7, -7, 7, -1, -10, -4, -5, 9, -5], 1) == 4', 'assert maximumEnergy([5, -7, -4, 3, 0, 9, 9, 5], 1) == 26', 'assert maximumEnergy([4, 9, -3, 5, 1, -10, 3, 8], 7) == 12', 'assert maximumEnergy([7, 3, 9, 8, -7, 8], 5) == 15', 'assert maximumEnergy([-1, 2, -6, -4, -7, -1, 1, -1], 4) == 1', 'assert maximumEnergy([0, 0], 1) == 0', 'assert maximumEnergy([8, 7, -1, 3], 2) == 10', 'assert maximumEnergy([2, 7, 8, -3, 3, -4, -10, 4], 5) == 12', 'assert maximumEnergy([7, -5, 3, -2, 2, -2, -7], 6) == 3', 'assert maximumEnergy([-7, 4, -1, -6, -10, -6, -6, -6], 2) == -6', 'assert maximumEnergy([3, -4, 4, -7, -6, 7, 2, 2, 3], 4) == 7', 'assert maximumEnergy([-3, 10, 0, 0, -7, -3, 8, 2], 7) == 10', 'assert maximumEnergy([3, -2, 6], 1) == 7', 'assert maximumEnergy([4, 9], 1) == 13', 'assert maximumEnergy([-2, 9, -9, -5, -4], 1) == -4', 'assert maximumEnergy([9, -4, 1, 1], 2) == 10', 'assert maximumEnergy([9, 8, -1], 1) == 16', 'assert maximumEnergy([-6, -4, 10, -5, -10, 8, -7], 1) == 1', 'assert maximumEnergy([7, 4, -4, 2, -6, 4, -3, 10, 6], 3) == 10', 'assert maximumEnergy([9, 4, 6, 6, -4, 3], 4) == 7', 'assert maximumEnergy([9, 3, -7, -10, -8, -3, -8], 6) == 3', 'assert maximumEnergy([0, 8, 4, 3, 7, -5, -9, 8], 3) == 23', 'assert maximumEnergy([5, -4, 1, 6], 3) == 11', 'assert maximumEnergy([-7, -8], 1) == -8', 'assert maximumEnergy([0, -7, 9, 0, 9, -8, -10, 10, -2, 8], 2) == 18', 'assert maximumEnergy([9, 1, 9, -4, 8], 1) == 23', 'assert maximumEnergy([-4, -4, -4, 9, 9, -6, -5], 1) == 7', 'assert maximumEnergy([4, 5, 4, -9, -7, 2, 10, 10, -5, 7], 9) == 11', 'assert maximumEnergy([5, 5, 5, 0, -7, -10], 2) == 3', 'assert maximumEnergy([1, 5, 1, 2, 5, 1, -1, 4, -10], 2) == 12', 'assert maximumEnergy([6, 6, 5, -5, -8, 5, -2, -3], 1) == 4', 'assert maximumEnergy([-2, 3, -1, -1, 4, 7, 9, -5, 3], 6) == 9', 'assert maximumEnergy([-1, 0, 6, 8, -1, -6, 0], 1) == 7', 'assert maximumEnergy([-9, 0, -10, -7, -1, -8, 8, 7], 6) == 8', 'assert maximumEnergy([-5, -6, -8, -2, 6, 5, -2], 5) == 6', 'assert maximumEnergy([4, -4, -6, 6, 1], 4) == 6', 'assert maximumEnergy([-8, 5, -8, -7], 1) == -7', 'assert maximumEnergy([-4, 6, -6, -10, 9, 6, -4], 1) == 11', 'assert maximumEnergy([8, 4, 5, -9, 8, 1, 7, -6], 3) == 7', 'assert maximumEnergy([-6, 6, 4, 2], 2) == 8', 'assert maximumEnergy([2, -9], 1) == -7', 'assert maximumEnergy([-5, 8, -3, 5, 6, 2, 0, 10, 3], 8) == 10', 'assert maximumEnergy([-8, 4], 1) == 4', 'assert maximumEnergy([-7, 2, -5, -3, -8, -4, 2, -10, -7, -5], 5) == 4', 'assert maximumEnergy([7, 4, -10, -8, -6], 2) == -4', 'assert maximumEnergy([-6, 8, -6, -10], 3) == 8', 'assert maximumEnergy([-10, 5, -9, -10, 4, 9], 1) == 13', 'assert maximumEnergy([5, -3, -8, 8, 4, 4], 4) == 9', 'assert maximumEnergy([-7, 6, 8, -1, -5, -9, 10, 9], 1) == 19', 'assert maximumEnergy([-2, 0, 7, 9, -2, 10, -10, -4, 6], 6) == 13', 'assert maximumEnergy([-2, 1, 3, -5, -7, 1, -6, -8], 5) == 1', 'assert maximumEnergy([0, 7, 7, 5, 7, -3], 2) == 14', 'assert maximumEnergy([6, 6], 1) == 12', 'assert maximumEnergy([-7, 7, -4, 5, 9, -9, 7], 5) == 14', 'assert maximumEnergy([0, 1, -4, 1, 10, 5, -9], 6) == 10', 'assert maximumEnergy([-2, -7, -1, 0, 1, -10, 6], 6) == 6', 'assert maximumEnergy([-4, 2, -3, 2], 2) == 4', 'assert maximumEnergy([4, -10, -2, 7, -9, 6], 5) == 10', 'assert maximumEnergy([-7, -4, 8, -6, 0], 2) == 8', 'assert maximumEnergy([9, 2, 0, 10, 10], 2) == 19', 'assert maximumEnergy([-6, 0], 1) == 0', 'assert maximumEnergy([3, -4, 1, -4, -3, -3, 0, 1], 6) == 3', 'assert maximumEnergy([-8, -3, -5, -6, -8, -2, 6, -8], 7) == 6', 'assert maximumEnergy([-9, 5, 0, -1, -10], 4) == 5', 'assert maximumEnergy([-4, -6, 6, -8, 8, 6], 5) == 8', 'assert maximumEnergy([4, 9, 5, -1, 7, -4, -3], 4) == 11', 'assert maximumEnergy([-10, 1, -7, -8], 3) == 1', 'assert maximumEnergy([2, -4, -2, 2, -7, 7, 7], 5) == 9', 'assert maximumEnergy([9, -7, 8, 9, 5, -4], 5) == 9', 'assert maximumEnergy([-10, -6, -3, 9, -1, 6, 8, 2, -9, 3], 2) == 20', 'assert maximumEnergy([-10, -6, 9], 1) == 9', 'assert maximumEnergy([5, -9, -1, -5, 2, -5, 8, -9, -3], 1) == -3', 'assert maximumEnergy([0, -2, -8, 4, 1, -8, 3, -5, 8], 8) == 8', 'assert maximumEnergy([2, -3, 5, -2, 1, 4], 4) == 5', 'assert maximumEnergy([-6, -8, -10, -7], 3) == -7', 'assert maximumEnergy([1, 2], 1) == 3', 'assert maximumEnergy([2, -5, -9, -9, -9, -3, -8, -7], 1) == -7', 'assert maximumEnergy([-10, 5, 7, 8, 9, -4, -6], 5) == 9', 'assert maximumEnergy([9, 9, 5], 2) == 14', 'assert maximumEnergy([4, 10, 2, -6, -9, -5, 4], 1) == 4', 'assert maximumEnergy([8, -9, -8, -3, 7, 6], 2) == 7', 'assert maximumEnergy([-7, 2, -9, -7, -9, 3], 5) == 3', 'assert maximumEnergy([-1, 7, -7, 4, -10], 1) == -6', 'assert maximumEnergy([-9, 9, -5, 4, 9, -1], 2) == 12', 'assert maximumEnergy([0, -6], 1) == -6', 'assert maximumEnergy([2, -4, 4, 10, -3, 10], 2) == 20', 'assert maximumEnergy([-2, -8, 4, -6], 2) == 4', 'assert maximumEnergy([0, -9, -4], 1) == -4', 'assert maximumEnergy([-2, 7, 6, 7, 7, -1, -9, 2, 3], 8) == 7', 'assert maximumEnergy([6, -9, -6, 7, 10, -2, -6, 6], 6) == 10', 'assert maximumEnergy([9, 5, 8, -8, 4, -9, 2, 7, -1, 7], 6) == 12', 'assert maximumEnergy([0, 2, -8, -4, 3, 9], 3) == 9', 'assert maximumEnergy([-3, 9, 8, 9, -1, 6, 2, -6, -3, 3], 1) == 27', 'assert maximumEnergy([5, -4, 4, 5, -7, 1], 3) == 10', 'assert maximumEnergy([6, 8, -9, -6, 4, 0, -1, -6], 4) == 10', 'assert maximumEnergy([-10, -10], 1) == -10', 'assert maximumEnergy([-4, -9, 2, 9, -3, -1, 9, 3, 6, 10], 1) == 35', 'assert maximumEnergy([7, -1, 3], 1) == 9', 'assert maximumEnergy([3, 10, -10, 4, 5, 5, -4, 1], 1) == 14', 'assert maximumEnergy([5, 7, 10, -3, 9], 1) == 28', 'assert maximumEnergy([-5, -10, -8, 1], 3) == 1', 'assert maximumEnergy([8, 5, -4, -7], 1) == 2', 'assert maximumEnergy([-9, -8], 1) == -8', 'assert maximumEnergy([-6, -1, 7, -1, 2, -6], 2) == 9', 'assert maximumEnergy([-2, -5, 4, -3, -9], 4) == 4', 'assert maximumEnergy([10, -6, 10, 5, -8, -3, -2], 2) == 10', 'assert maximumEnergy([-2, 10, -10, 6, 6, -9, 7, -5, -10, -10], 3) == 11', 'assert maximumEnergy([-5, 3, 4], 2) == 4', 'assert maximumEnergy([-8, 7, -6, -7, -1, 3, 10, 3, 9, -7], 6) == 10', 'assert maximumEnergy([-5, 0, -8], 2) == 0', 'assert maximumEnergy([-2, -4, 5, 1], 3) == 5', 'assert maximumEnergy([-6, 10], 1) == 10', 'assert maximumEnergy([0, 1], 1) == 1', 'assert maximumEnergy([-10, 1, 3, 8], 2) == 9', 'assert maximumEnergy([-9, -10, 3, -6], 1) == -3', 'assert maximumEnergy([-10, -4, 4, 6], 3) == 6', 'assert maximumEnergy([-4, 4, -3, 6, 9, -10, 2, -7, -3, 9], 3) == 17', 'assert maximumEnergy([4, 5, 9, -7, 7], 4) == 11', 'assert maximumEnergy([0, -2, -9, -9, -9, 6, 8, -8, 2], 8) == 8', 'assert maximumEnergy([3, -10], 1) == -7', 'assert maximumEnergy([1, 2, -8, 5, -10, 9, -1, 7, -4, 10], 2) == 33', 'assert maximumEnergy([5, 9, 5], 2) == 10', 'assert maximumEnergy([-3, -6, -7, 6, 6, -3, 10, 10, -7, -2], 4) == 16', 'assert maximumEnergy([-2, 2, 8, -1, 3, -1, 6, -7, -8], 6) == 6', 'assert maximumEnergy([9, 6, -1, -6, 5], 3) == 11', 'assert maximumEnergy([8, 7, 10, -7, -8], 3) == 10', 'assert maximumEnergy([0, 0, -6, 1, 6, -8, 8, -8], 6) == 8', 'assert maximumEnergy([-3, -7, -7, 2], 2) == 2', 'assert maximumEnergy([-4, -1, 4], 1) == 4', 'assert maximumEnergy([2, 3, -2, -9, -7, 5, 6, 3, -5], 7) == 6', 'assert maximumEnergy([9, 9], 1) == 18', 'assert maximumEnergy([-5, 2, -5], 1) == -3', 'assert maximumEnergy([6, -9, 7, 5, 3, -7, -1, -6, -10], 5) == 3', 'assert maximumEnergy([-6, 8, 4], 2) == 8', 'assert maximumEnergy([-4, -9, -10, -5, -6, -3, -2], 3) == -2', 'assert maximumEnergy([0, 4, -5], 1) == -1', 'assert maximumEnergy([1, -3, -8, 0, -8, -3, -1, 0], 2) == 0', 'assert maximumEnergy([-5, 4, -8], 2) == 4', 'assert maximumEnergy([-6, 4, 1], 2) == 4', 'assert maximumEnergy([-10, 8, -4, 8, -3, 5, 4], 3) == 12', 'assert maximumEnergy([10, -7, -5, 2, 4, 5, -3, 1, 5, -1], 6) == 7', 'assert maximumEnergy([-10, -1, 3, -7, 3, -4], 2) == 6', 'assert maximumEnergy([7, -10, -9], 2) == -2', 'assert maximumEnergy([-10, -10, -1, 1, -7, -1], 2) == 0', 'assert maximumEnergy([0, -6, 3, -4, 1, -3, 7, 4], 3) == 7', 'assert maximumEnergy([3, -5, -10, -6, -6, 5, -4, -3, -1], 3) == 4', 'assert maximumEnergy([8, 0, 4, 8], 1) == 20', 'assert maximumEnergy([9, -5, -5, -6, 1, -2, 10, -4, -2], 8) == 10', 'assert maximumEnergy([3, 10, 1, 8, -6, 3, 8], 3) == 19', 'assert maximumEnergy([4, -1, 7, 8, 9], 1) == 27', 'assert maximumEnergy([7, 6, 6, 0, 4, 9, 8, -6, 10], 6) == 16', 'assert maximumEnergy([-6, -4], 1) == -4', 'assert maximumEnergy([4, -7, 9, -8, 4, 6], 5) == 10', 'assert maximumEnergy([-2, -5, 5], 1) == 5', 'assert maximumEnergy([-5, 10, 9, 5], 2) == 15', 'assert maximumEnergy([8, -2, -5, 1, -6, -8, 5, -6, 4], 4) == 6', 'assert maximumEnergy([0, 6, -8, -4], 3) == 6', 'assert maximumEnergy([0, -8, -3, -5, -9, -6, 2, 5, 8, 6], 1) == 21', 'assert maximumEnergy([-6, 6, -10, 7, -1, -3, 3, -4], 2) == 6', 'assert maximumEnergy([8, 6, 10, -5, 9], 3) == 15', 'assert maximumEnergy([-10, 0, 7, 3, -3, -5, -6, -1, 6], 7) == 7', 'assert maximumEnergy([10, 0], 1) == 10', 'assert maximumEnergy([6, 5, -9, -3, -3, -7, 7, 7], 2) == 7', 'assert maximumEnergy([7, -5, 2, 0, -2, 5, -10], 5) == 12', 'assert maximumEnergy([-4, 6, -3, 4, 7, -5], 3) == 13', 'assert maximumEnergy([-4, -3, 10, 9, -8, 10, -4, 7], 4) == 16', 'assert maximumEnergy([9, -5, -3, 5], 3) == 14', 'assert maximumEnergy([5, -3, 10, 6, 6, 5, -8], 6) == 10', 'assert maximumEnergy([2, 4, -4, -4], 3) == 4', 'assert maximumEnergy([6, -8, 4, 2, -8, -10], 1) == -10', 'assert maximumEnergy([-2, -10], 1) == -10', 'assert maximumEnergy([0, -8, -6, -8, 10], 1) == 10', 'assert maximumEnergy([0, -7, 3, 3, 0, 6, 9, 7], 1) == 28', 'assert maximumEnergy([6, 0, 1], 2) == 7', 'assert maximumEnergy([-9, 1, -3, 7, 1, -7, -8], 2) == 1', 'assert maximumEnergy([6, 4, -1, 8, 8, 8], 1) == 33', 'assert maximumEnergy([4, -1, -7, 2, 8, -8, 9, 6], 2) == 17', 'assert maximumEnergy([-9, 3, -4, 4], 3) == 4', 'assert maximumEnergy([4, 8, 4, -2, 8, 7], 3) == 16', 'assert maximumEnergy([10, 7, 2, 9, 7, 5], 4) == 17', 'assert maximumEnergy([10, 7], 1) == 17', 'assert maximumEnergy([-7, 7, -10, -1, 5, 2, 2, 3], 4) == 9', 'assert maximumEnergy([8, -9, 1, -8], 1) == -7', 'assert maximumEnergy([7, 2, 9, -1, -7, -7], 5) == 9', 'assert maximumEnergy([-3, -2, 0, 3, -7], 4) == 3', 'assert maximumEnergy([-7, 6, -10, 4, -6, 0, 0, 5, -3, 1], 2) == 16', 'assert maximumEnergy([10, 10, -4, -4, 2, 8], 1) == 22', 'assert maximumEnergy([6, -5, -1, -4, 7, -8, -8, 6], 2) == 6', 'assert maximumEnergy([8, -8, -7, 7, 2], 3) == 15', 'assert maximumEnergy([-6, 3, -6, -8, 10, 9, -1, -7, 8], 3) == 17', 'assert maximumEnergy([-7, 9, 9, 3, -9], 1) == 12', 'assert maximumEnergy([1, -9, -8, -4, 6, 7, 6, 1, -3], 7) == 7', 'assert maximumEnergy([1, -7, 4, 8], 1) == 12', 'assert maximumEnergy([-9, 7, 8, 9], 1) == 24', 'assert maximumEnergy([1, -4, -5, 8, 8, -3], 5) == 8', 'assert maximumEnergy([2, 2, -3], 1) == 1', 'assert maximumEnergy([1, 5, 10, 6, 5], 1) == 27', 'assert maximumEnergy([8, 6, 5], 2) == 13', 'assert maximumEnergy([2, -4, -6, 8, 0], 2) == 8', 'assert maximumEnergy([0, -7, 5], 1) == 5', 'assert maximumEnergy([2, 6, 9, 6, -1, 9, 2], 5) == 11', 'assert maximumEnergy([-5, -10, 0, 4, -7, 7, -1, 8], 4) == 12', 'assert maximumEnergy([-9, 7, 5], 1) == 12', 'assert maximumEnergy([6, -10, 10, 6], 1) == 16', 'assert maximumEnergy([-5, 9, 3, 2, 5, -2, -6, 10, 1, -3], 5) == 13', 'assert maximumEnergy([-5, -6], 1) == -6', 'assert maximumEnergy([-3, 10, 6, -3, 5, 5], 3) == 15', 'assert maximumEnergy([-7, 7, -7, 8, -9, -7, -7, -10], 3) == 1', 'assert maximumEnergy([-2, 10, 2, 4, -2], 3) == 8', 'assert maximumEnergy([5, -5, 6, 8, 7, -8, 2, -10], 5) == 8', 'assert maximumEnergy([1, 3, 7, 7, -6, 4], 2) == 14', 'assert maximumEnergy([-9, -1, 4, 0, 2, 6, -4, 0, 4], 4) == 6', 'assert maximumEnergy([7, 6, -2, -6, 8, 3, 4, -10], 2) == 17', 'assert maximumEnergy([10, 10, -7, 5, 3, 2, -9, 1, -2], 1) == 13', 'assert maximumEnergy([2, 5, -2, -5, 9, -1], 1) == 8', 'assert maximumEnergy([0, 8, 8, -7, 0, 6], 4) == 14', 'assert maximumEnergy([7, 7, -4, 7, -7, -4, 3, 10, -5, 2], 6) == 17', 'assert maximumEnergy([-6, -3, 10, -4, 4, -9, -4], 4) == 6', 'assert maximumEnergy([-9, 1, -1, 8, 2, -7], 1) == 3', 'assert maximumEnergy([9, 4, 4, 2, 1, 10, 4, 1, 10, 5], 5) == 19', 'assert maximumEnergy([0, 9, 4, 6, 9, 10, 6, -3, -10], 5) == 15', 'assert maximumEnergy([-9, 7], 1) == 7', 'assert maximumEnergy([4, -10, -7, 1, -3, -3, -10], 2) == -2', 'assert maximumEnergy([-9, 2, -9], 1) == -7', 'assert maximumEnergy([-1, -9], 1) == -9', 'assert maximumEnergy([0, -5, 7, 7, 4, 8, -1, -7, 4], 5) == 11', 'assert maximumEnergy([-3, -6, 10, 5, 1, 5, 5, 5, -6], 6) == 5', 'assert maximumEnergy([2, -10, 9], 2) == 11', 'assert maximumEnergy([-3, -2, 3, -10, 4, 4, 10], 6) == 10', 'assert maximumEnergy([-1, 8, 4], 1) == 12', 'assert maximumEnergy([-9, -9, 6, 0, 8, -5], 4) == 8', 'assert maximumEnergy([9, -5, -8, 5, 4, -5, 1, -4, -2, -9], 5) == 4', 'assert maximumEnergy([-8, 0, 7, -9, -6, 6, 3, 3], 6) == 7', 'assert maximumEnergy([-3, -8, 2, 5], 1) == 7', 'assert maximumEnergy([4, 2, -4, -3, -6, 7, -3, 2], 7) == 7', 'assert maximumEnergy([-3, -3, -4], 2) == -3', 'assert maximumEnergy([7, 4], 1) == 11', 'assert maximumEnergy([-7, 0, -8, 3, 7, -1, 6], 5) == 7', 'assert maximumEnergy([10, -9, -2, 1, 5, -6, -9], 3) == 5', 'assert maximumEnergy([6, 8, 7, 9, -6, -8, 2, 9, 0], 8) == 9', 'assert maximumEnergy([-10, 1, -5, -7, 5, 0, -6, 10, 2, -1], 5) == 10', 'assert maximumEnergy([-5, -4], 1) == -4', 'assert maximumEnergy([-5, 3, 0, 10, -3], 2) == 13', 'assert maximumEnergy([10, -9, -6, -6, 7, 5], 2) == 11', 'assert maximumEnergy([-5, -2, 1, -8, 5, 5, -7], 3) == 6', 'assert maximumEnergy([10, -9, 3, -6, 2, 10], 1) == 12', 'assert maximumEnergy([3, 2, -4, -1, 9, 5], 3) == 11', 'assert maximumEnergy([6, -5, 6, -4, 4, 6, 6, -1, 4], 4) == 14', 'assert maximumEnergy([-4, -9, 5, -6, -5, 1, -9, 5], 6) == 5', 'assert maximumEnergy([6, 3, -6], 2) == 3', 'assert maximumEnergy([-5, 4, -6, -10, -3, -3, -7, 8], 6) == 12', 'assert maximumEnergy([3, 4, 4, 5, 0, 7, -3], 2) == 16', 'assert maximumEnergy([-4, 7, -9, 7, -6, 8, 3, 3, -10, 8], 3) == 18', 'assert maximumEnergy([1, -8, 2, 7, -3, 3, 10], 4) == 12', 'assert maximumEnergy([-9, -7, 7, -2, -2, 8, -7, -5], 1) == -1', 'assert maximumEnergy([9, 1, 3], 1) == 13', 'assert maximumEnergy([-4, 8, 1], 1) == 9', 'assert maximumEnergy([-3, -6, -1, -8, 4, -7, -7, -10, 9, -3], 9) == 9', 'assert maximumEnergy([-10, -3, -7, 1, 5, -2, -3, 2, -2], 3) == 7', 'assert maximumEnergy([-9, 10, 8, 9, 10, 4], 4) == 14', 'assert maximumEnergy([10, 9, 1, 4, -9, 7, 8, -8, -4], 4) == 16', 'assert maximumEnergy([0, -1, -10, 1, -8, 3, -2, 10, 10, -6], 9) == 10', 'assert maximumEnergy([-5, 5, -1, -3], 1) == 1', 'assert maximumEnergy([-1, -6, 2, 0], 2) == 2', 'assert maximumEnergy([7, 0, 10, -8, -7, 1, 10, 10, -4], 3) == 10', 'assert maximumEnergy([-2, -1, -5, -7, -7, -3, -3], 6) == -1', 'assert maximumEnergy([-9, -3, 7, 8, 0, 9, -5, -1], 3) == 16', 'assert maximumEnergy([8, 5, 9, -7], 2) == 17', 'assert maximumEnergy([0, -1, -7, 9, 6, 3, 4, -9, 6], 3) == 13', 'assert maximumEnergy([2, 9, 2, 10, -8, -6, -9, -4, 1, 8], 3) == 11', 'assert maximumEnergy([3, 0, 8, 4, 7, -8, -2, 6, -5], 8) == 8', 'assert maximumEnergy([6, 9, 0], 2) == 9', 'assert maximumEnergy([-4, 6, 4, -6, 6], 2) == 10', 'assert maximumEnergy([-10, -2, 2, -10, -4, -3, -3, -4, -2, -3], 1) == -3', 'assert maximumEnergy([-7, 3, -6, 8, -1], 2) == 11', 'assert maximumEnergy([-8, -6, -2, -9, -8], 1) == -8', 'assert maximumEnergy([-3, 4, -7, 2, 1], 4) == 4', 'assert maximumEnergy([9, 0, 6, -4, -6, -9, -8, -1], 1) == -1', 'assert maximumEnergy([6, -8], 1) == -2', 'assert maximumEnergy([5, -6], 1) == -1', 'assert maximumEnergy([3, -1, 5, 3, 7, -10, 10], 4) == 15', 'assert maximumEnergy([9, -7, -1, -3], 3) == 6', 'assert maximumEnergy([1, -6, 6, -4, 5, 6, -3, -4, -4, -1], 6) == 6', 'assert maximumEnergy([10, -5, -10, -10, 9, -9, 8, -3, 3, 4], 6) == 18', 'assert maximumEnergy([0, -3, -9, 9, -9, -7, -1, 0, -2], 4) == 9', 'assert maximumEnergy([3, -4, 2, -4, -2, 6, 8, 3, -9], 4) == 10', 'assert maximumEnergy([-9, 3, -7, -8, -3, 10, -9], 3) == 10', 'assert maximumEnergy([-9, 0, 0, 3, 7, 1, -1, 2], 6) == 7', 'assert maximumEnergy([7, 9, 9, 4, -8, -7, 5, -7], 5) == 14', 'assert maximumEnergy([6, -4, -3, -9, 10], 3) == 10', 'assert maximumEnergy([-4, -1, 7, -3, -2, -1, -7, 6], 1) == 6', 'assert maximumEnergy([-8, 1, 5, -1, 8, -7, 4], 3) == 9', 'assert maximumEnergy([2, 7, 1, -10], 3) == 7', 'assert maximumEnergy([-2, -6, 10], 2) == 10', 'assert maximumEnergy([-6, 4, -7, 9, 0, -6, -10, 3], 6) == 9', 'assert maximumEnergy([2, 10, 8, 8, -3, -1], 1) == 24', 'assert maximumEnergy([-5, 8], 1) == 8', 'assert maximumEnergy([9, 4, -6, 7, -10], 4) == 7', 'assert maximumEnergy([4, 2, -1], 2) == 3', 'assert maximumEnergy([-10, 0, 9, -6, 4, -5, 10, 2], 6) == 10', 'assert maximumEnergy([-9, 10, 1, 10], 1) == 21', 'assert maximumEnergy([7, -1, 9, -7, -8, 8, 2, -8, -1], 7) == 9', 'assert maximumEnergy([-9, -8, 9, 4], 2) == 9', 'assert maximumEnergy([-8, -10, -3, 3, -2, 10], 5) == 10', 'assert maximumEnergy([-5, -4, -2, -8, -2, 1, 8, 8, 1, 4], 8) == 8', 'assert maximumEnergy([6, -10, -8, -9, 0, -3, 0, 4, -3, -7], 2) == -3', 'assert maximumEnergy([-10, 5, -3, -2, 9, 3, -9, -10], 4) == 9', 'assert maximumEnergy([-5, -2], 1) == -2', 'assert maximumEnergy([62, 33, 71, -46, 93, -37, 75, -77, 52, -64, 73, -85, 12, 76, 71, 3, 80, -78, -84, 4, 44, 82, 91, -42, 41, -51, -60, 95, -98, 59, 53, -18, -30, 1, -81, 75, -31, -40, -87, -57, 85], 24) == 165', 'assert maximumEnergy([67, -18, -36, 37, 86, -58, -92, 66, 28, 76, -5, 42, 80, 37, 71, -60, -71, 99, 23, 35, -79, 30, 38, 40, -48, -65, 22, 89, 79, -93, 56, -53, -5, -79, 41, 3, 41, -62, 81, 27, 3, 70, -29, -88, 79, 58, -61, -7, 49, 0, 30, -10, -62, 68, 45, 29, 98, 61, 100, 2, -62, 80, -7, -21, -78, -34, 29, 0, -57, -12, -42], 16) == 176', 'assert maximumEnergy([48, -89, -93, -44, -39, 2, 3, 88, -57, -3, 53, 2, 49, 84, -11, -36, -64, -70, 14, 12, -36, 77, -66, -11, -23, -33, -73, 96, 82, 58, -16, 51, 62, 99, -72, -3, 1, 7, -28, -61, -72, 1, -16, 23, -16, -47, -77, -30, -42, 18, -53, 90, 71, -92, -61, 67, -56, 98, -13, -20, -65, 46, -66, 91, -85, 40, -35, 12, 61, 18, 78, 5, 81, -87, 87, -38, 10, -35, -62, -18, 84, -69], 42) == 168', 'assert maximumEnergy([-16, 53, 65, -51, -11, 39, 82, -67, -61, -81, 79, 52, 24, 23, -14, 2, -67, 71, -47, 44, 30, -18, 76, -39, 89, -1, -46, -52, 30, -69, -21, 91, -8, -60, 95, 64, 98, 84, 52, -15, -66, -76, -41, -98, 11, -42, 12, -55, -68, 92, 10, -59, -57, 11], 52) == 98', 'assert maximumEnergy([-64, 47, -97, 15, 60, 94, -28, 83, -63, -34, -75, 44, -82, 55, -22, 67, -25, 47, -35, 7, -26, 70, -64, -17, 43], 18) == 85', 'assert maximumEnergy([-32, -61, -48, -83, -14, -27, -43, -8, 95, 15, -29, -100, 82, 68, -19, 99, -100, 9, -70, 36, 66, 1, 1, -3, 49, 51, 28, 49, -49, -86, -90, 78, 76, 82, -96, -66, 38, -7, 9, 91, 65, 30, 47, -65, 62, -16, -24, -24, 75, 3, 7, 45, -84, 58, -25, 89, -65, -50, 25, 57, -26, 87, 85, -3, 95, 63, 32, -79, 40, -34, -10], 19) == 183', 'assert maximumEnergy([32, -70, 98, -50, -2, -89, 65, 98, 13, -50, 44, 85, 63, 44, -97, 100, 100, -65, 86, 70, -23, -90, -81, -61, 37, 13, 91, -95, -64, 15, -69, -33, 37, -46, 83, 70, 77, -35, -99, -40, 22, 87, 65, -64, 70, -5, 86, -84, -10, 50, -25, -30, -31, -71, -10, 91, -100, 36, 8, -19, 66, 93], 29) == 182', 'assert maximumEnergy([44, 88, 47, 73, 65, -66, -59, -4, -96, -61, -88, -24, -76, 40, -82, 88], 15) == 132', 'assert maximumEnergy([-79, 15, 30, -67, -85, 35, -76, 18, -51, -47, -85, 28, 29, 31, -49, -38, -77, 65, -51, 50, 93, 20, -99, 16, -45, 74, -75, -52, 64, 56, -19, -39, -33, -75, 48, -57, 91, -11, -89, -25, 9, 77, -85, 59, 84, 61, 95, -9, -9, -17, -30, -32, 46, -56, -6, 69, -88, -10, -50, -49, -57, -99, -23], 48) == 95', 'assert maximumEnergy([-29, 13, -38, 30, 20, -7, -81, 31, 80, -8, 0, -16, 56, -31, -60, 39, -39, -65, 50, -73, -97, -89, 14, -68, 38, 60, -13, -29, -86, -26, 59, -34, -89, -97, -46, -44, 93, 96, -64], 33) == 123', 'assert maximumEnergy([-52, 44, -51, -89, -70, 25, -86, 55, 84, -99, -68, -24, -76, 83, 59, 86, 50, 25, 89, 44, -56, 49, -18, -99, -14, -31, 8, -45, 16, 89, 96, -14, 77, 13, -55, -7, 12, -35, 22, -17, 60, 52, 80, -86, -29, -38, -27, -52, 73, 65, 82, 2, -84, 75, -61, 23, -12, 25, -24, 96, 7, 74, 49, -84, 10, 38, -96, -58, -67, -29, 58, -40, -38, 58, 31, 80, -26, 89, -67, 13, 4, 43, 38, -73, -31, -42, -46, -2, -80, 18, 84, 10, -67, 64, 63, 75, -72, -48, 30, 84, 1, -16, 69, 62, -82, -91, 56, -24, -84, 6, 78, 20, -92, 57, -16, 12, 13, 10, 58, 57, 3, 91, 30, -74, 2, -44, -30, 72, 44, 5, -69, -38, -72, 10, -87, -76, -81, 40, 57, 97, -66, 42, 18, -17, -52, 62, 61, 9, 8, 59, -91, -56, -6, 76, -78, -75, -41, 41, -26, -4, 60, 6, -84, 61, -88, 50, -36, 92, 80, 69, -88, -84, -21, 82, 10, 100, 48, 29, 90, -94, -24, 42, -25, 85, 46, -25, -68, -56, 95, -77, -49, -22, 68, -93, -58, -33, 71, 44, -95, 20, -96, -75, -99, -62, 30, -61, -41, -9, 36, -52, 64, 45, -16, -16, -93, -13, 71, 32, 75, 2, 40, -68, 10, -47, -56, 33, 85, 4, -92, 0, -80, 59, -40, -21, 42, 42, -55, -13, 23, 42, 23, 73, -76, 1, -74, 59, -66, 90, -4, -61, -12, 18, 19, 30, -37, 42, 69, -61, -75, -57, -86, 0, -42, 75, 7, -3, 32, -81, 29, 38, 86, -93, -58, -9, -60, 79, 35, -96, -81, -85, -25, 89, -9, 49, -91, 13, 96, -14, -79, 53, 77, 32, 14, -72, -72, 79, -33, -46, 89, 100, 46, 52, -97, -66, 82, -11, 51, -10, -24, 81, 74, -12, 81, -19, -73, 90, -66, 77, 93, 27, 29, 36, -21, -27, 59, -34, 45, -69, -42, 28, 97, 41, -28, 31, 85, -33, -45, 18, 83, -27, 58, 5, 62, 7, 95, 80, -89, -24, 7, 41, -75, -54, 25, 49, -63, -16, -20, -71, 98, 36, 59, 80, -55, -64, -98, -3, 35, 38, -26, 24, -75, -33, -98, 98, -14, 8, 10, 87, 67, -27, -71, 65, -62, 70, -37, -36, -95, 26, -29, -1, 88, 63, 74, 77, 78, 89, -57, 29, -40, -69, 86, 89, -67, 50, -19, -40, -88, -12, 47, 55, 66, -99, 57, 51, -46, -83, -50, -57, 99, -62, -4, 44, 27, 52, -38, -51, -73, -56, -39, 25, -71, 25, -59, -66, 37, 10, -24, 2, -100, -62, -32, -16, -54, 93, -3, -69, -73, -10, -94, 79, 100, 57, 53, 22, 71, -40, 66, 29, -6, 52, 46, 64, 28, 59, -66, -74, -95, -84, 65, 17, -99, 59, -70, 71, 50, -9, -16, -34, -70, 58, -1, 70, -5, 21, -81, -37, -58, 68, 51, 26, -84, -13, -77, 32, -83, -100, 73, 10, 87, 64, -22, -10, -53, -89, 98, 78, 37, -21, 34, 66, 73, -18, 64, -68, 71, -62, -61, 6, -63, 7, 80, -45, -60, 17, 56, 75, 57, -33, 89, 50, -30, 84, 28, -75, -28, -18, -64, 18, -34, -26, 36, -78, 69, 64, 94, 12, -17, 25, -82, -85, -29, 14, -32, -6, 93, -48, 19, -15, 68, 18, 92, 1, -33, -99, 99, -28, -3, -33, 50, -26, 89, 97, 8, 92, -68, -68, 21, 67, 9, 5, 74, 38, 65, 90, 50, -36, 59, -54, -28, -2, 55, 91, -97, 83, 52, 42, -61, -31, 77, -46, 29, 77, -67, 44, 32, -4, 77, -28, -23, -11, -87, -86, -87, 4, -62, 68, -26, 11, -56, -48, 30, -63, -66, 24, 57, 35, 97, 54, -45, 94, -60, -45, 54, 100, -54, 92, 2, -93, 20, 66, -38, 63, 83, -32, 94, -3, 100, 92, 33, 9, -55, -46, -6, -56, 16, -75, -62, -99, 50, 98, -49, -27, 5, 18, -19, 80, -71, -11, -37, 30, 34, 33, 27, 25, 90, -44, 8, -53, -77, 32, -30, -96, 55, 21, 38, -71, -37, -83, -45, 96, -39, 11, 27, -63, -77, 25, 8, 34, -100, -4, -81, -84, 17, -14, 97, 54, 21, 82, -48, -37, 49, 85, -49, -98, -7, -57, -34, -33, -41, 25, 8, -68, 0, 15, -72, -41, 8, -66, -46, 40, 13, 17, 66, 15, 16, 9, 8, -23, 76, -70, -81, -60, -35, -20, 24, -41, -54, -27, 96, -97, 45, -3, 9, -77, -84, 78, 40, 16, 90, -51, 9, -56, 6, -99, -42, 70, -73, -6, 2, -51, -3, -39, 80, 28, 52, -42, -96, 34, 45, -60, -96, 85, 5, -43, 24, -45, 99, -62, -15, -62, -87, -12, 50, -91, 54, 72, 42, -100, -1, -12, -31, -75, -28, -12, -37, 12, -49, 5, 10, -60, -79, -33, -10, -38, -20, 89, -100, 38, 99, -37, 68, 48, -87, 87, 15, -45, 13, 55, -60, 28, 9, -49, 31, 89, 60, 54, -24, 21, 24, 5, -67, -28, 0, -23, -57, 40, -49, -49, -57, 37, -97, 86, 56, 53, -97, -56, -47, 43, 78, 27, 72, -91, 71, 48, 66, -73, 72, 60, 36, -77, -14, 80, -74, 63, -98, 28, 75], 828) == 174', 'assert maximumEnergy([-38, -21, 84, -29, -59, -33, 59, -45, 95, -6, -3, -46, 52, -15, 75, 73, -97, 43, 83, -95, 83, -13, 88, 65, 78, 36, -22, -65, 42, 25, -51, -12, 44, 58, -27, -30, -34, 4, 10, -47, -63, 89, -48, -67, 89, 62, -2, 45, -35, -13, 6, 59, -47, 97, 45, -11, -9, -28, 92, -45, -13, 80, -59, 66, -48, 96, -37, -78, -28, -24, -7, -11, 45, 3, -62, -7, -7, -2, 68, -32, -83, -82, -7, -12, 6, 12, 70, -1, -6, -78, 63, 38, -24, 98, -72, 11, -78, -90, 49, -38, -53, -63, 36, -22, -29, -28, 78, 44], 78) == 171', 'assert maximumEnergy([-75, -53, 42, -45, -29, 4, -18, -8, 10, 64, -78, 60, -46, 54, 88, -43, 18, -9, -37, 68, 69, -28, -89, -97, 61, 84, 74, 88, -60, 85, 87, -76, -51, -11, -65, -86, 56, 67, -33, 62, -28, 5, 19, 54, 65, -71, 25, -31, -33, 8, -19, 16, 30, -54, 83, -37, 88, -96, 77, 99, -63, -7, 63, -74, 88, -42, -60, -29, 12, -95, -8, 10, 77, 59, 38, 86, -22, -99, -21, -49, -79, 5, 45, -41, 11, -66, 14, 80, 59, -20, 61, 69, -40, -41, 96, 15, -10, -74, -45, -96, 73, -81, 15, 71, 93, -44, -96, -32, -37, 18, 4, 46, 42, -56, -28, 38, -35, 3, 9, -82, -62, 51, 39, -12, -69, -99, 16, -46, 52, -63, -20, -82, 23, 99, -5, -95, -100, 12, 96, 96, -85, 13, -10, 40, -67, 76, -83, -25, -79, -81, 10, -11, 21, -80, 53, -48, -43, 51, -57, -24, 12, 3, 84, 44, 92, -68, 41, 62, 49, 58, -34, -89, -6, 9, 66, -66, -10, 56, 79, 80, 41, -68, 77, -12, -7, -64, 32, -100, -66, 74, -55, 29, 92, 15, -77, -83, 53, 84, -50, -57, 96, -43, -43, -38, -45, -75, 79, 62, 65, 34, 1, -22, -100, -23, -36, -90, -29, 63, 71, -26, 61, 51, 6, -27, 63, -22, -67, 87, 63, -31, 31, -53, -57, -57, 89, -12, -39, -42, -46, -39, -74, -8, -51, -5, 75, -19, -39, -96, 50, 75, 0, -60, 99, -48, 94, -34, -43, -80, 98, 38, 16, 6, -47, 100, -45], 118) == 264', 'assert maximumEnergy([8, 47, 19, 53, 51, 16, 35, -24, 90, -21, 92, -35, -67, 61, -44, 45, -69, -2, 67, -19, -88, -93, -78, 56, -17, 48, -56, 76, -90, -87, 25, -67, 2, -64, -19, 44, 55, -81, 80, 66, 63, -27, -39, 86, -63, 14, 77, 33, 49, 36, -55, 47, -64, 19, -61, -26, -97, 52, -58, -96, 94, 45, -3, 34, -17, -84, -63, 87, 37, -89, 45, -7, -54, -89, -16, 51, 85, 12, 23, 45, 98, -63, -50, 45, 6, -73, 49, -24, 87, 42, -17, 9, 52, 60, -96, 48, 64, 26, 76, 12, -4, -78, -100, 77, -25, -30, -99, 10, 66, 8, -28, -41, 34, -24, -29, -93, 4, -56, 5, 42, -82, 60, -32, -92, 9, 27, 83, 66, 66, 7, -39, 65, -17, -1, 96, -12, 52, -61, 90, -30, 19, -91, 69, -88, 74, 73, 91, 43, 44, -15, 53, 87, 90, 5, -43, -64, -30, -8, -44, -8, -17, -21, 49, -50, 33, -40, 46, 11, 32, 10, -81, 67, -33, -92, 100, 82, 76, -93, -9, -8, 88, 67, 94, -55, 97, -81, -5, -61, -64, -45, 27, 19, -15, 19, 84, -41, 33, -56, 69, 14, -6, 32, 1, 70, -49, 47, 88, 87, 76, 34, 35, -45, -19, 54, -55, -45, 63, -2, 10, -53, 54, 84, 97, -7, -26, 12, 2, -13, -20, -2, 7, 7, 60, -24, -9, 97, 74, -7, -67, -89, 17, -61, -37, -89, 41, -55, 70, 45, -31, 100, 59, 60, -80, 6, -92, 3, -35, -58, -25, 36, -80, 69, 58, 3, 4, 40, 51, -76, 14, -66, -57, 96, 65, 11, -35, -11, -19, 67, 8, -21, 84, 27, 43, -78, -4, -71, -23, -45, -78, 88, 87, -40, 51, 90, 84, -94, -93, 44, 44, -38, -75, 78, -49, 68, -58, -11, -84, -9, 90, -21, -16], 200) == 182', 'assert maximumEnergy([-73, 60, -13, -18, 81, -56, 65, 46, 67, -28, -40, -68, -97, 35, -43, 74, -9, 77, -7, -46, 92, 4, 73, 43, -88, -100, 49, -69, -66, -77, -54, 65, -63, 17, 79, 84, -51, 51, 38, 20, -29, 39, -95, -43, 53, -91, 68, -43, 89, 96, -4, -53, -22, -50, -96, -27, -93, -31, -100, 77, 77, -2, 59, 27, 70, -37, -93, -82, -39, 11, 4, 83, 72, 37, -31, 55, 65, 17, 8, -7, 98, 99, 39, 30, -35, 26, -45, 71, -37, -74, -98, 60, -77, 51, 26, -34, -9, 36, 33, -78, 50, 12, 4, -11, 47, -60, -3, 95, -62, -8, 38, -8, 95, 37, -53, -90, -18, 86, -16, -49, 55, 25, 12, -71, 60, -98, -90, -82, -63, -8, 6, -4, 40, 99, 35, 9, 27, 61, -90, 45, 83, -30, 14, -73, 95, -52, 54, -5, -35, -50, 87, 93, 87, -46, 89, 88, 54, 5, -91, 23, -60, -22, 78, -79, -16, -62, 43, -71, -75, -27, -99, 72, 66, -84, 62, -88, -76, -98, -83, 33, 97, 9, 48, 11, 34, -46, -35, -71, -86, -6, -86, 100, 7, 60, -69, 65, 20, -82, 54, -79, 90, -34, 17, -49, -34, 1, -4, -71, -51, -89, 59, -77, 28, -50, -52, 48, -62, -37, -87, 95, -29, 75, 8, 13, 22, 17, -86, -57, 4, -56, -23, -5, -37, -7, 49, 1, -80, -73, -12, -60, 54, -55, 91, -10, -43, 2, 22, 10, 16, 85, -85, 59, -77, 25, -89, 44, 7, 71, 43, -61, 80, 27, -90, 80, 9, 48, -1, 48, 15, 43, 28, 62, 48, 6, 37, -61, -57, 63, -81, -50, 40, -23, -54, -93, -73, -17, -46, 42, 75, -52, -39, 41, -85, 64, -86, 61, 84, 98, -44, -67, 57, -27, 32, -49, 29, -32, -64, 9, 22, -14, -62, -68, 68, 11, -37, 10, 33, -90, -52, 33, 34, 27, 23, 80, 9, 12, -25, 20, 30, 74, 51, -97, -34, -28, -54, 79, 90, 96, -55, 31, -97, -23, -75, 41, -59, 14, 90, -13, -98, -40, -64, 98, 20, -34, 23, -51, 96, -17, 95, 66, -69, 80, 54, -13, 47, 69, 84, 95, 39, -3, 16, 7, -89, 33, -87, -88, -11, -58, -19, 57, -40, -54, -42, -79, 48, 95, -71, -61, -99, -69, -64, 47, 93, 88, -83, -98, 100, -55, 33, 78, 76, -79, -90, 74, 5, -46, -14, -31, -10, 30, 24, -59, -24, 25, 29, 88, -66, 77, 1, 82, 66, 17, 82, -67, -92, 73, -21, -16, 27, -4, -37, 78, 97, 11, -22, 93, 88, -73, -12, -24, -9, -12, 61, -43, 39, 0, -79, 28, 80, 39, -100, -62, -99, -76, -6, -59, 79, -61, -5, -58, 65, -81, -76, 23, -18, -44, 51, -92, -99, 36, 13, -94, -61, -55, -35, -14, -88, -13, 71, -80, -21, -97, 57, 33, -85, 56, -97, 3, -52, 35, 22, -11, 55, 32, 84, 9, -28, -31, -55, -74, 34, 40, 61, -100, 91, -57, 90, 65, 31, -10, -38, -12, -99, -27, 97, -42, -50, 32, 90, -5, -67, -32, -16, -71, -82, -30, -63, 8, 97, -68, -17, -9, -93, 30, 48, 37, 94, 1, -18, -64, 96, -95, -45, 28, -30, 96, -94, 52, -87, -19, 45, 52, -23, -8, 66, -61, -62, -46, 89, -19, 40, -40, -6, -1, 92, -53, -69, -17], 536) == 177', 'assert maximumEnergy
correct = 0
for t in tests:
    try:
        exec(t)
        correct+=1
    except:
        pass
success = len(tests) == correct
print(correct,'/',len(tests))
print(success)