from question import maxPointsInsideSquare
tests = ['assert maxPointsInsideSquare([[2, 2], [-1, -2], [-4, 4], [-3, 1], [3, -3]], "abdca") == 2', 'assert maxPointsInsideSquare([[1, 1], [-2, -2], [-2, 2]], "abb") == 1', 'assert maxPointsInsideSquare([[1, 1], [-1, -1], [2, -2]], "ccd") == 0', 'assert maxPointsInsideSquare([[-1, -4], [16, -8], [13, -3], [-12, 0]], "abda") == 1', 'assert maxPointsInsideSquare([[-6, -4], [8, -1], [3, 9]], "ccc") == 1', 'assert maxPointsInsideSquare([[1, -1]], "a") == 1', 'assert maxPointsInsideSquare([[1, 1]], "a") == 1', 'assert maxPointsInsideSquare([[16, 32], [27, 3], [23, -14], [-32, -16], [-3, 26], [-14, 33]], "aaabfc") == 2', 'assert maxPointsInsideSquare([[10, -12], [-5, -4], [-7, 15], [9, 16]], "dada") == 2', 'assert maxPointsInsideSquare([[9, 28], [6, -28], [-12, 9], [-18, -8], [-35, -32], [-13, 23]], "bbffed") == 1', 'assert maxPointsInsideSquare([[-2, 4], [9, 3], [-9, 3]], "cca") == 1', 'assert maxPointsInsideSquare([[-54, 27], [17, 39], [26, -57], [-32, -61], [-54, 59], [-46, 60], [-18, -63], [45, 26]], "aebffcee") == 1', 'assert maxPointsInsideSquare([[44, 13], [0, -7], [12, -36], [33, 41], [10, 16], [-33, -33], [-15, -4]], "eabdbda") == 1', 'assert maxPointsInsideSquare([[-21, -85], [41, -98], [16, 39], [-78, 74], [44, -77], [8, 74], [16, 41], [-3, -7], [-10, 29], [-28, -53]], "feifjididf") == 2', 'assert maxPointsInsideSquare([[-35, -3], [17, 28], [28, -28], [25, -1], [25, -16], [1, -21]], "ffcbea") == 5', 'assert maxPointsInsideSquare([[48, 81], [-2, 76], [66, -9], [-44, -50], [-42, 76], [-33, 28], [52, -76], [75, -7], [-51, 5]], "ahgebbhfh") == 5', 'assert maxPointsInsideSquare([[-1, 2], [4, 2]], "bb") == 1', 'assert maxPointsInsideSquare([[-19, 14], [20, 7], [17, 9], [3, 15], [-6, -4]], "bbade") == 4', 'assert maxPointsInsideSquare([[-28, -59], [78, -6], [52, 25], [29, -43], [73, 61], [22, -18], [-35, -71], [-76, -76], [-72, -77]], "dgaddedac") == 3', 'assert maxPointsInsideSquare([[-10, -10], [25, -7], [3, -5], [-21, 11], [-6, -17]], "cebde") == 4', 'assert maxPointsInsideSquare([[-1, 0]], "a") == 1', 'assert maxPointsInsideSquare([[10, -20], [-6, 90], [41, -32], [76, 13], [41, -34], [-16, -94], [37, -44], [-27, -2], [-84, 29], [74, -98]], "cdjdidhahe") == 6', 'assert maxPointsInsideSquare([[1, -4], [-4, 0]], "bb") == 0', 'assert maxPointsInsideSquare([[4, 1], [-1, 2]], "aa") == 1', 'assert maxPointsInsideSquare([[-99, 30], [13, -20], [-1, -47], [2, 39], [32, 19], [28, 97], [-4, 66], [63, -40], [-11, 86], [22, -11]], "cfebcabhba") == 6', 'assert maxPointsInsideSquare([[-28, 33], [12, -38], [13, -9], [-17, 42], [-37, 42], [8, 35], [11, 43]], "ggcbbbf") == 3', 'assert maxPointsInsideSquare([[-9, 5], [-6, 12], [0, -4], [-10, -5]], "cdda") == 3', 'assert maxPointsInsideSquare([[1, -3], [0, -2]], "aa") == 1', 'assert maxPointsInsideSquare([[39, 4], [-53, 50], [29, 58], [29, 39], [-64, 30], [-34, -45], [-43, 55], [19, -41]], "geebbahe") == 4', 'assert maxPointsInsideSquare([[1, -2], [6, -9], [-6, 2]], "ccc") == 1', 'assert maxPointsInsideSquare([[-6, 4], [-19, -16], [2, -16], [-25, 1], [27, 20], [-13, 20]], "befcaf") == 3', 'assert maxPointsInsideSquare([[37, 6], [-44, -20], [-37, 41], [2, 48], [-55, 37], [-11, 31], [-5, -18], [-62, 9]], "efgabcbc") == 6', 'assert maxPointsInsideSquare([[14, 26], [-4, 4], [14, 44], [40, 45], [-2, 27], [2, 24], [34, -3]], "ecbfafa") == 4', 'assert maxPointsInsideSquare([[-9, 20], [-9, 4], [-12, -17], [-34, -6], [-9, 22], [14, -36]], "eeaeed") == 2', 'assert maxPointsInsideSquare([[-25, 9], [6, -14], [-9, 6], [25, -15], [-1, -4]], "baacb") == 2', 'assert maxPointsInsideSquare([[11, 3], [2, 1], [25, 12], [-23, -16], [-1, 21]], "ddabb") == 1', 'assert maxPointsInsideSquare([[-7, -1], [-13, 7], [-5, -10], [-19, -16], [4, -5]], "bdebc") == 4', 'assert maxPointsInsideSquare([[-16, -20], [-17, 7], [2, 17], [11, -10], [16, 21]], "bedcc") == 4', 'assert maxPointsInsideSquare([[0, -1]], "a") == 1', 'assert maxPointsInsideSquare([[1, 0]], "a") == 1', 'assert maxPointsInsideSquare([[-3, -18], [-7, 7], [-24, -10], [-36, 25], [-19, 34], [-34, 9]], "aadada") == 1', 'assert maxPointsInsideSquare([[3, 1], [2, -4]], "ba") == 2', 'assert maxPointsInsideSquare([[21, -6], [-8, 11], [16, -20], [18, 25], [21, -15]], "acdee") == 4', 'assert maxPointsInsideSquare([[-5, -7], [-6, -7], [-3, 7]], "cba") == 3', 'assert maxPointsInsideSquare([[5, -16], [-4, -16], [11, 1], [5, -5]], "acca") == 2', 'assert maxPointsInsideSquare([[3, 4], [3, -3]], "ba") == 2', 'assert maxPointsInsideSquare([[-4, 7], [-9, 9], [-14, 7], [9, -8]], "dcac") == 1', 'assert maxPointsInsideSquare([[92, 53], [78, -48], [-51, 56], [-34, -48], [55, -56], [-42, -78], [27, 38], [80, 98], [37, -59], [-48, 74]], "jidfeabchh") == 5', 'assert maxPointsInsideSquare([[-1, -8], [-19, -9], [1, -1], [-7, 3], [-2, -19], [14, 21]], "fbdeaa") == 5', 'assert maxPointsInsideSquare([[5, -1], [6, -5], [2, 8]], "ccc") == 1', 'assert maxPointsInsideSquare([[0, 1]], "a") == 1', 'assert maxPointsInsideSquare([[3, 2], [-4, 0]], "ab") == 2', 'assert maxPointsInsideSquare([[-2, -7], [11, 42], [13, -81], [-11, 18], [34, -14], [-49, -72], [31, 10], [-14, -13], [-11, 59]], "chaeccgdg") == 4', 'assert maxPointsInsideSquare([[-46, 40], [-78, 31], [33, 34], [62, -6], [-69, -38], [-57, 12], [53, -34], [11, -29], [38, 29]], "iehbbfeia") == 3', 'assert maxPointsInsideSquare([[40, -19], [2, -55], [58, -7], [5, 5], [-60, 40], [31, -43], [19, 52], [48, -35]], "fcecafgh") == 2', 'assert maxPointsInsideSquare([[-93, 25], [94, 27], [59, 60], [32, 29], [57, 41], [-37, 13], [34, 65], [58, 81], [9, -36], [64, -23]], "ahdechjaab") == 7', 'assert maxPointsInsideSquare([[1, 2], [-2, -3]], "ba") == 2', 'assert maxPointsInsideSquare([[12, -10], [1, -21], [12, -14], [-2, -19], [23, 14]], "aacca") == 2', 'assert maxPointsInsideSquare([[7, 21], [-3, 20], [-13, 0], [18, 17], [-4, 17]], "beebe") == 1', 'assert maxPointsInsideSquare([[-4, -4], [-4, 2]], "ab") == 2', 'assert maxPointsInsideSquare([[-46, 55], [-62, -30], [42, -9], [25, -55], [45, 9], [-42, -53], [46, 56], [-48, -59]], "cddchcaa") == 3', 'assert maxPointsInsideSquare([[33, -54], [18, 68], [39, -77], [-19, 85], [50, -46], [23, 95], [-59, -47], [94, -78], [-55, 36], [-35, -33]], "igggegjhid") == 3', 'assert maxPointsInsideSquare([[-1, 1]], "a") == 1', 'assert maxPointsInsideSquare([[-30, 7], [42, 79], [17, -71], [-14, 66], [-48, -29], [64, -68], [-57, -23], [69, -45], [17, -54]], "fafghbegb") == 5', 'assert maxPointsInsideSquare([[-30, -14], [-14, -44], [34, -2], [-23, -28], [-24, 14], [24, 11], [14, -26]], "ecgaegf") == 4', 'assert maxPointsInsideSquare([[28, -83], [64, 17], [-21, 46], [1, 48], [19, 16], [24, 54], [20, 30], [61, -11], [-86, 12], [73, -13]], "iibdafeeig") == 5', 'assert maxPointsInsideSquare([[9, 36], [-9, -1], [-23, 24], [36, -31], [27, 12], [5, 7]], "cbadcc") == 3', 'assert maxPointsInsideSquare([[-72, -60], [4, -23], [11, 43], [81, 56], [-28, -11], [8, 24], [-50, 26], [77, 16], [44, -46]], "cdaagibda") == 4', 'assert maxPointsInsideSquare([[2, -1], [-3, 3]], "ba") == 2', 'assert maxPointsInsideSquare([[30, -33], [-14, -13], [0, 2], [19, -21], [10, -10], [30, 34]], "edfdab") == 3', 'assert maxPointsInsideSquare([[14, 12], [4, 4], [-5, 35], [4, 26], [-28, -17], [32, 21]], "dddbea") == 1', 'assert maxPointsInsideSquare([[11, -8], [-5, -14], [-16, 0], [5, -16]], "cbbc") == 2', 'assert maxPointsInsideSquare([[15, 11], [2, 7], [15, -1], [-5, -1]], "cddb") == 2', 'assert maxPointsInsideSquare([[1, 4], [-3, -1]], "ba") == 2', 'assert maxPointsInsideSquare([[15, 10], [2, -5], [5, -8], [16, 0]], "ddaa") == 2', 'assert maxPointsInsideSquare([[0, 7], [-9, -3], [6, 0]], "bbc") == 2', 'assert maxPointsInsideSquare([[-9, 2], [-7, 4], [0, 0]], "cac") == 2', 'assert maxPointsInsideSquare([[20, -27], [30, -23], [-36, -7], [7, -35], [6, -5], [16, 19]], "dcdbbf") == 4', 'assert maxPointsInsideSquare([[4, 33], [36, 13], [29, 28], [-29, 17], [4, -12], [30, 2]], "cdefaf") == 3', 'assert maxPointsInsideSquare([[-2, 32], [45, 84], [59, -100], [17, -96], [45, 66], [40, -65], [80, -27], [86, -6], [72, -5], [-88, 23]], "bfgbbhgded") == 2', 'assert maxPointsInsideSquare([[28, 55], [-30, -18], [45, 41], [14, -29], [-22, -27], [27, 53], [45, 4], [53, -22]], "efefedgb") == 2', 'assert maxPointsInsideSquare([[-11, 7], [64, 14], [-34, -46], [26, 0], [33, -53], [3, 39], [54, -58], [-59, -53]], "ehgfdcbe") == 6', 'assert maxPointsInsideSquare([[7, -6], [1, -47], [63, 7], [-57, 35], [61, -15], [6, -53], [-39, -11], [-6, 3]], "fgcgeehg") == 3', 'assert maxPointsInsideSquare([[14, -38], [-74, 31], [6, -67], [79, -78], [-71, 61], [80, 67], [60, -34], [29, 9], [73, 63]], "chhbcigaa") == 4', 'assert maxPointsInsideSquare([[-17, 34], [33, 12], [-35, -5], [-18, -20], [4, -8], [26, -17]], "dcaeae") == 2', 'assert maxPointsInsideSquare([[-5, 7], [-4, 2], [2, -4]], "abc") == 3', 'assert maxPointsInsideSquare([[-11, -10], [14, -10], [-5, 7], [-14, -5]], "bdbc") == 1', 'assert maxPointsInsideSquare([[-64, -98], [25, 84], [26, -81], [-34, -51], [55, 64], [-98, -14], [-17, -18], [95, 51], [-9, -43], [78, -50]], "fjcfdfahfi") == 2', 'assert maxPointsInsideSquare([[7, -5], [15, 23], [-16, -22], [-7, 25], [2, 21]], "badee") == 4', 'assert maxPointsInsideSquare([[-1, 1], [-4, -4]], "ab") == 2', 'assert maxPointsInsideSquare([[-12, 10], [-1, 3], [8, -17], [18, 23], [21, 2]], "cdcdb") == 2', 'assert maxPointsInsideSquare([[60, 63], [-8, -2], [46, 24], [38, 28], [26, -62], [-34, -7], [49, 20], [-14, -45]], "bbhcdaeg") == 7', 'assert maxPointsInsideSquare([[9, 24], [22, 6], [12, 20], [16, -24], [15, 0]], "aecbc") == 1', 'assert maxPointsInsideSquare([[14, 12], [-5, -1], [-7, -9], [-12, -5]], "cdca") == 3', 'assert maxPointsInsideSquare([[-15, -3], [3, -11], [1, -14], [13, -7]], "dbbb") == 1', 'assert maxPointsInsideSquare([[4, -1], [4, 3], [-2, 3]], "baa") == 1', 'assert maxPointsInsideSquare([[-22, 11], [3, 21], [-6, -13], [15, -14], [-4, 0]], "eaedc") == 4', 'assert maxPointsInsideSquare([[18, -39], [58, 42], [-42, 46], [-33, 39], [30, -4], [-39, 53], [-36, 46], [-37, -52]], "agfcabcb") == 1', 'assert maxPointsInsideSquare([[9, -3], [-3, -3], [-7, 4]], "cbb") == 1', 'assert maxPointsInsideSquare([[-24, -27], [24, -26], [57, 63], [32, 43], [-10, 6], [-56, -27], [47, 16], [7, 32]], "eeddcbfb") == 2', 'assert maxPointsInsideSquare([[4, 22], [2, 22], [-1, -6], [6, -10], [4, 15]], "debad") == 3', 'assert maxPointsInsideSquare([[-3, 7], [-3, 17], [-3, -20], [16, -7], [18, 3]], "abeea") == 3', 'assert maxPointsInsideSquare([[60, 63], [80, -43], [99, 38], [65, -11], [-86, -40], [-98, -78], [-74, 83], [-25, -21], [-25, 31], [34, -94]], "cbbecfjggd") == 1', 'assert maxPointsInsideSquare([[-43, 55], [-5, 12], [3, 48], [54, -4], [-19, 37], [0, -15], [13, -51], [-26, 10]], "hedadgde") == 2', 'assert maxPointsInsideSquare([[-3, 1], [1, 9], [9, 2]], "cab") == 3', 'assert maxPointsInsideSquare([[5, 10], [6, -11], [14, 4], [1, -12]], "daab") == 3', 'assert maxPointsInsideSquare([[-66, -19], [8, 28], [-32, 1], [74, -40], [-16, -75], [-67, -27], [36, 8], [34, -7], [-81, -32]], "fhcacchdd") == 3', 'assert maxPointsInsideSquare([[-25, -17], [9, -15], [20, 20], [-11, 16], [8, 19]], "acdae") == 4', 'assert maxPointsInsideSquare([[24, -17], [10, -4], [22, 11], [-3, 1], [3, -15]], "daeba") == 2', 'assert maxPointsInsideSquare([[-7, -2], [-9, -2], [0, 9]], "bcb") == 1', 'assert maxPointsInsideSquare([[-8, -1], [0, -9], [-10, 7], [4, -11]], "babc") == 2', 'assert maxPointsInsideSquare([[91, 7], [17, -75], [86, -82], [-75, 91], [31, 94], [75, -18], [-96, -52], [51, -9], [83, -8], [93, 83]], "aajchbbcic") == 5', 'assert maxPointsInsideSquare([[-9, -13], [8, -7], [-6, 9], [-15, 2]], "ddbc") == 2', 'assert maxPointsInsideSquare([[-22, 25], [-17, 18], [-25, -7], [16, -23], [-6, -1]], "acdbc") == 1', 'assert maxPointsInsideSquare([[4, -1], [-4, -3]], "ba") == 2', 'assert maxPointsInsideSquare([[-16, -2], [1, 0], [-5, 3], [-4, -12]], "cbab") == 2', 'assert maxPointsInsideSquare([[1, 7], [-7, -4], [-1, -3]], "aca") == 1', 'assert maxPointsInsideSquare([[-23, -39], [3, 80], [-30, 97], [-67, -41], [-59, 29], [21, 5], [-51, -21], [13, 25], [-86, -26], [56, 23]], "igdddicehd") == 2', 'assert maxPointsInsideSquare([[13, -8], [9, 9], [-3, 14], [8, 2]], "bcdd") == 3', 'assert maxPointsInsideSquare([[2, -14], [-7, -2], [-1, 9], [-1, 10]], "bccd") == 1', 'assert maxPointsInsideSquare([[3, 2], [-1, 3]], "ab") == 2', 'assert maxPointsInsideSquare([[-38, 41], [44, 45], [17, -3], [45, -35], [-26, 10], [20, 29], [30, -34]], "acbadaf") == 4', 'assert maxPointsInsideSquare([[-6, -2], [-2, 1], [6, -1]], "ccb") == 1', 'assert maxPointsInsideSquare([[30, 46], [-49, 0], [42, 14], [-29, -37], [-21, -47], [-14, 46], [-26, -7]], "ecgeeag") == 2', 'assert maxPointsInsideSquare([[-15, 24], [23, -12], [-5, -3], [14, -12], [8, -7]], "abbeb") == 1', 'assert maxPointsInsideSquare([[-7, 3], [0, 49], [-16, -12], [27, -25], [36, -41], [32, 35], [13, -10]], "ffegdcg") == 3', 'assert maxPointsInsideSquare([[-54, -55], [-76, -80], [7, 60], [28, 24], [45, 5], [46, 12], [-81, 2], [-95, 96], [-74, 87], [76, -73]], "abgajggjag") == 3', 'assert maxPointsInsideSquare([[-4, -7], [-6, -6], [-3, 4]], "cca") == 2', 'assert maxPointsInsideSquare([[-16, -19], [-14, 2], [-2, -12], [-21, -20], [20, 20]], "eceac") == 2', 'assert maxPointsInsideSquare([[-4, -2], [-3, -2]], "aa") == 1', 'assert maxPointsInsideSquare([[23, 22], [0, -17], [18, 25], [23, 33], [-34, 16], [-13, 36]], "fedffd") == 3', 'assert maxPointsInsideSquare([[-3, 0], [3, -3]], "aa") == 0', 'assert maxPointsInsideSquare([[-23, 39], [12, 41], [25, 22], [-8, -27], [-46, -21], [42, 2], [-49, 40]], "cbadabf") == 4', 'assert maxPointsInsideSquare([[27, -95], [-73, -20], [-45, 61], [62, -64], [-40, -78], [-48, -97], [-12, -95], [-71, -10], [64, 78], [77, -40]], "bigjeegbgj") == 4', 'assert maxPointsInsideSquare([[3, 9], [-16, -20], [-12, 4], [1, 12], [8, 20], [3, 23]], "babcfd") == 1', 'assert maxPointsInsideSquare([[-3, 10], [1, -7], [-9, 7], [-5, -8]], "bdad") == 1', 'assert maxPointsInsideSquare([[-12, -10], [-9, -11], [-3, 15], [-10, 10]], "dbdd") == 2', 'assert maxPointsInsideSquare([[25, 54], [54, -60], [-40, 58], [-59, -76], [41, 47], [74, 22], [72, 51], [15, -57], [-43, 36]], "gicgbfabi") == 3', 'assert maxPointsInsideSquare([[3, 4], [3, 7], [5, 21], [15, 2], [-24, -6]], "accea") == 3', 'assert maxPointsInsideSquare([[-3, 3], [2, 1]], "bb") == 1', 'assert maxPointsInsideSquare([[1, 6], [-2, -2], [-1, -2]], "cac") == 2', 'assert maxPointsInsideSquare([[-46, -46], [54, -11], [-26, -47], [31, -3], [-31, 4], [-43, 61], [0, -8], [10, 15]], "bchfgeca") == 6', 'assert maxPointsInsideSquare([[-15, -2], [17, 8], [9, 18], [-16, 24], [0, -4]], "baaeb") == 1', 'assert maxPointsInsideSquare([[-46, -9], [7, -32], [15, -2], [-18, 14], [-26, -47], [-7, 7], [-3, 41]], "ecbcbfa") == 3', 'assert maxPointsInsideSquare([[-52, -41], [-14, 15], [57, -46], [71, -58], [7, -43], [52, -28], [-45, 29], [-81, 17], [70, 75]], "hbaccbbif") == 2', 'assert maxPointsInsideSquare([[1, 3], [-2, 1]], "bb") == 1', 'assert maxPointsInsideSquare([[1, 74], [-35, 66], [-45, 48], [56, 63], [-70, -26], [-3, 80], [7, -38], [66, -79], [-64, -4]], "fgbhggahh") == 3', 'assert maxPointsInsideSquare([[24, 1], [7, 14], [6, -8], [-41, 28], [34, -36], [-25, -29], [-19, 48]], "dgdbgec") == 2', 'assert maxPointsInsideSquare([[-5, -16], [-1, -3], [16, -4], [-9, 6]], "bacd") == 4', 'assert maxPointsInsideSquare([[-3, -2], [1, 0]], "aa") == 1', 'assert maxPointsInsideSquare([[4, -4], [3, -4]], "ba") == 2', 'assert maxPointsInsideSquare([[8, 12], [-15, 10], [-4, -11], [-7, -7]], "cabb") == 1', 'assert maxPointsInsideSquare([[-3, -7], [2, -3], [-1, 2]], "baa") == 1', 'assert maxPointsInsideSquare([[1, 30], [-2, -23], [-24, -35], [9, 14], [-24, -21], [-7, -17]], "ceeddd") == 1', 'assert maxPointsInsideSquare([[7, -12], [-14, 14], [-1, 11], [1, 7]], "cbbc") == 2', 'assert maxPointsInsideSquare([[32, 12], [19, -28], [-22, -30], [-12, 46], [-48, 8], [3, 1], [23, -18]], "cggafcg") == 2', 'assert maxPointsInsideSquare([[-64, -21], [30, -59], [-25, 16], [60, 3], [26, 26], [4, 49], [-63, -12], [-39, 42]], "fgfabaea") == 3', 'assert maxPointsInsideSquare([[-61, 59], [13, -41], [-1, 26], [97, -21], [-29, 43], [-51, 96], [45, 34], [71, -100], [-67, 40], [88, -91]], "ahigdchjed") == 3', 'assert maxPointsInsideSquare([[-17, 37], [-37, 20], [0, -22], [49, -11], [30, 6], [-37, -9], [-35, -32]], "dcddecc") == 3', 'assert maxPointsInsideSquare([[29, 1], [37, -12], [-48, -38], [58, -4], [-1, 36], [-35, 33], [-5, -1], [24, 53]], "fbfcecfb") == 1', 'assert maxPointsInsideSquare([[-22, -14], [-21, 19], [13, 13], [5, 21], [-12, -2]], "cedce") == 2', 'assert maxPointsInsideSquare([[-2, 37], [41, -63], [36, 35], [52, -8], [29, 33], [44, 55], [-36, -28], [43, 4]], "dfgbeccf") == 6', 'assert maxPointsInsideSquare([[0, 16], [-10, -21], [5, -24], [-15, 3], [-17, -2]], "dedab") == 4', 'assert maxPointsInsideSquare([[-25, 11], [-17, -13], [24, 13], [-2, -2], [-20, 10]], "abcdc") == 3', 'assert maxPointsInsideSquare([[-18, 6], [19, 15], [9, 10], [-10, 20], [0, 1]], "dbbdd") == 2', 'assert maxPointsInsideSquare([[2, 14], [-22, 40], [1, -14], [-23, -40], [-3, 51], [53, 15], [45, 13], [-44, -18]], "gdagaabg") == 2', 'assert maxPointsInsideSquare([[-14, 12], [4, -4], [11, 13], [-13, -13]], "aaad") == 1', 'assert maxPointsInsideSquare([[43, -37], [-15, 10], [-49, -5], [-22, -21], [-7, -64], [20, 29], [-53, 61], [-10, 63]], "chachhaf") == 2', 'assert maxPointsInsideSquare([[1, -1], [3, -2]], "ba") == 2', 'assert maxPointsInsideSquare([[13, -16], [-15, 4], [-9, -18], [-2, -12], [-9, 22]], "dcebb") == 4', 'assert maxPointsInsideSquare([[-6, 9], [-1, -5], [9, 8]], "cca") == 1', 'assert maxPointsInsideSquare([[-1, 2], [2, -4]], "bb") == 1', 'assert maxPointsInsideSquare([[0, -4], [0, 0]], "ba") == 2', 'assert maxPointsInsideSquare([[13, 31], [-33, -8], [19, 7], [12, -2], [12, -11], [34, -2]], "fbeddb") == 0', 'assert maxPointsInsideSquare([[-80, -51], [-75, 71], [-34, -75], [-2, 62], [-1, -31], [-55, -25], [22, -68], [-61, 27], [-56, 24]], "heahhcbec") == 2', 'assert maxPointsInsideSquare([[3, -7], [-4, -7], [-1, 1]], "bba") == 1', 'assert maxPointsInsideSquare([[5, -2], [-27, -7], [15, 29], [-4, 27], [8, 6], [-13, 34]], "eedeac") == 2', 'assert maxPointsInsideSquare([[-91, -80], [90, 5], [-99, 63], [76, 17], [23, 70], [-2, -4], [-50, 16], [24, -55], [17, -90], [-29, 66]], "hjicjidbcg") == 6', 'assert maxPointsInsideSquare([[38, 37], [-49, 19], [-41, 26], [7, 24], [-57, -31], [59, -56], [3, 9], [-3, 8]], "hhebfhfb") == 2', 'assert maxPointsInsideSquare([[10, -16], [-12, -8], [7, -12], [-4, 15]], "ddcc") == 2', 'assert maxPointsInsideSquare([[0, 4], [4, -3]], "ba") == 2', 'assert maxPointsInsideSquare([[-20, -33], [-34, 48], [44, 26], [25, -18], [10, -45], [41, 16], [47, -45]], "decddfe") == 1', 'assert maxPointsInsideSquare([[-2, -35], [-49, 64], [-21, 59], [25, 53], [-18, -49], [54, -57], [-15, 10], [-48, 40]], "bcbgcegh") == 4', 'assert maxPointsInsideSquare([[79, 57], [-64, 46], [-11, -65], [-42, 64], [66, -47], [38, -66], [26, 39], [-71, -69], [-27, -38]], "hbgeeieaf") == 2', 'assert maxPointsInsideSquare([[-4, -9], [-8, -8], [-6, 3]], "aca") == 2', 'assert maxPointsInsideSquare([[45, 18], [4, 52], [-14, -14], [38, 24], [60, -49], [-45, 28], [-20, 8], [46, 35]], "hcbbcche") == 2', 'assert maxPointsInsideSquare([[-9, 5], [-6, -6], [13, 13], [-10, 2]], "dbbc") == 3', 'assert maxPointsInsideSquare([[-2, -4], [-1, 3]], "ba") == 2', 'assert maxPointsInsideSquare([[-9, 1], [16, 13], [-4, 25], [-3, 19], [-16, 24]], "cdbeb") == 4', 'assert maxPointsInsideSquare([[11, 0], [-16, -16], [0, -13], [3, 3]], "dada") == 2', 'assert maxPointsInsideSquare([[53, -38], [-77, 73], [27, 46], [74, -31], [-36, 55], [30, 51], [39, 26], [51, 48], [-27, -56]], "fagcbecee") == 2', 'assert maxPointsInsideSquare([[12, 44], [0, -44], [44, -18], [31, 14], [49, -37], [-16, -10], [-4, -18]], "cdbbffa") == 3', 'assert maxPointsInsideSquare([[-2, 4], [-1, -4]], "ba") == 2', 'assert maxPointsInsideSquare([[1, -2], [2, 1]], "aa") == 0', 'assert maxPointsInsideSquare([[-26, -16], [-9, 31], [26, 19], [-40, 41], [46, 13], [19, 38], [13, 23]], "bcccfcc") == 1', 'assert maxPointsInsideSquare([[3, -11], [-13, -9], [14, -9], [13, -7]], "bdda") == 3', 'assert maxPointsInsideSquare([[-10, -10], [-27, -10], [-9, 26], [30, 24], [-29, -27], [-4, -9]], "adbbbf") == 4', 'assert maxPointsInsideSquare([[6, -45], [76, 93], [88, -89], [22, -40], [-86, 88], [41, -2], [94, -46], [99, 26], [-100, -54], [-66, 38]], "hcgcjfggbg") == 5', 'assert maxPointsInsideSquare([[-4, -5], [9, 5], [2, -5]], "abc") == 3', 'assert maxPointsInsideSquare([[-1, 4], [1, 5], [-7, 9]], "acb") == 3', 'assert maxPointsInsideSquare([[-26, -39], [36, 23], [19, -20], [-43, 41], [-40, -39], [6, -45], [7, 46]], "aedgfde") == 5', 'assert maxPointsInsideSquare([[-14, -3], [5, -15], [-8, 1], [-2, 12]], "caba") == 3', 'assert maxPointsInsideSquare([[60, 92], [-29, -8], [-24, 57], [-59, -99], [-93, -26], [-80, 35], [99, 34], [19, -99], [74, -94], [-8, -74]], "aefbgbihii") == 6', 'assert maxPointsInsideSquare([[3, -1], [-2, 1]], "ba") == 2', 'assert maxPointsInsideSquare([[-28, 20], [-24, 1], [30, 2], [14, 20], [-34, -32], [34, -16]], "dfebed") == 4', 'assert maxPointsInsideSquare([[3, -14], [22, 33], [14, -15], [26, -10], [-21, -24], [19, 35]], "aaafcb") == 1', 'assert maxPointsInsideSquare([[9, -4], [-19, 8], [-12, 13], [-25, 4], [-8, -13]], "addad") == 1', 'assert maxPointsInsideSquare([[39, -20], [47, -2], [-37, 24], [-20, -11], [43, -36], [45, -16], [-10, -38]], "cddfafg") == 5', 'assert maxPointsInsideSquare([[-27, 23], [-39, -27], [-23, 38], [-22, 77], [36, -50], [31, 25], [-15, 8], [69, -74], [-5, 12]], "diihdgagd") == 2', 'assert maxPointsInsideSquare([[-8, -6], [-7, 25], [-11, -9], [11, 16], [41, 23], [-4, 42], [-10, -1]], "ddgdbbb") == 3', 'assert maxPointsInsideSquare([[-69, -7], [-57, 41], [9, -96], [88, 52], [53, 79], [-41, -38], [-16, 47], [33, 53], [-59, -40], [-70, 90]], "fjbjcbdaha") == 7', 'assert maxPointsInsideSquare([[-4, 5], [-8, 3], [-8, 1]], "cca") == 1', 'assert maxPointsInsideSquare([[2, 4], [0, 0]], "aa") == 1', 'assert maxPointsInsideSquare([[-82, -90], [-51, 32], [-93, -26], [53, 61], [-11, -61], [-68, 39], [46, 53], [53, 32], [-77, 33], [-87, -22]], "baiehjicfb") == 8', 'assert maxPointsInsideSquare([[-1, 1], [-6, 1], [1, 1]], "bbc") == 2', 'assert maxPointsInsideSquare([[2, -2], [-2, 1]], "ab") == 2', 'assert maxPointsInsideSquare([[6, -2], [-7, 13], [4, -13], [9, -6]], "bbaa") == 2', 'assert maxPointsInsideSquare([[6, 3], [13, 3], [10, 0], [0, -14]], "cbbb") == 2', 'assert maxPointsInsideSquare([[-34, -49], [40, -96], [66, 26], [79, 52], [65, 69], [-7, 14], [55, 68], [-75, 78], [44, 32], [-40, 37]], "ddajjajcaj") == 2', 'assert maxPointsInsideSquare([[71, -70], [0, -62], [40, -48], [-70, -36], [-10, 54], [52, 43], [72, 33], [62, 65], [17, 45]], "ddifcibge") == 2', 'assert maxPointsInsideSquare([[-11, -3], [13, 10], [13, 2], [16, -12]], "aaca") == 1', 'assert maxPointsInsideSquare([[18, -28], [11, -15], [-15, 24], [25, -29], [4, -23], [34, -14]], "cfebea") == 2', 'assert maxPointsInsideSquare([[-58, 44], [34, -6], [-59, 51], [0, -11], [-15, -53], [-2, -50], [1, -33], [2, -25]], "abaedbca") == 4', 'assert maxPointsInsideSquare([[14, 7], [11, 22], [-22, 3], [-9, -21], [-3, -18]], "dcbda") == 2', 'assert maxPointsInsideSquare([[48, 16], [-47, 40], [-18, 42], [43, -31], [25, 26], [24, -11], [13, -31], [-8, 47]], "cdbgebhd") == 3', 'assert maxPointsInsideSquare([[-4, 1], [-7, -1], [5, 8]], "aca") == 2', 'assert maxPointsInsideSquare([[-5, 36], [9, 32], [4, 28], [5, -2], [-29, -30], [-31, -29]], "fadabd") == 3', 'assert maxPointsInsideSquare([[7, -7], [-5, -7], [0, 1]], "bcb") == 1', 'assert maxPointsInsideSquare([[-69, 43], [-43, 56], [53, 15], [-68, 37], [52, -52], [-63, -51], [-29, -13], [-45, -53], [-25, 12]], "fagffbiab") == 5', 'assert maxPointsInsideSquare([[45, -19], [-25, -26], [-42, 34], [-29, -36], [-4, 35], [49, 4], [-36, 37]], "cbfaeef") == 4', 'assert maxPointsInsideSquare([[2, 3], [1, -2]], "ba") == 2', 'assert maxPointsInsideSquare([[2, -3], [3, 2]], "bb") == 0', 'assert maxPointsInsideSquare([[-15, 24], [-6, -9], [-6, 1], [10, 8], [-21, 24]], "bbbdc") == 1', 'assert maxPointsInsideSquare([[35, -17], [-56, 47], [49, -55], [9, 38], [29, -23], [72, 63], [34, 11], [-61, 3], [-13, 7]], "icgedgeeh") == 4', 'assert maxPointsInsideSquare([[-35, 16], [18, 0], [19, 31], [-10, 2], [9, -27], [-2, -11]], "abceee") == 1', 'assert maxPointsInsideSquare([[54, 37], [69, 30], [76, -30], [-49, -7], [-63, 67], [72, 41], [49, -6], [-6, -19], [-68, 13]], "addeebdcb") == 4', 'assert maxPointsInsideSquare([[18, -13], [7, 33], [29, 25], [-2, 31], [3, -23], [-9, 36]], "fedfda") == 2', 'assert maxPointsInsideSquare([[10, -98], [26, 68], [-63, -87], [90, 62], [-40, -71], [-24, -63], [-95, -94], [59, 48], [89, 77], [50, 4]], "gfddfjdfbj") == 2', 'assert maxPointsInsideSquare([[8, -16], [8, -7], [2, 0], [-11, 15]], "abdd") == 2', 'assert maxPointsInsideSquare([[-43, 39], [10, -49], [5, -7], [43, 62], [31, 30], [-7, -80], [73, -22], [50, 53], [-30, 5]], "adhdhgiic") == 2', 'assert maxPointsInsideSquare([[-70, 0], [-54, -1], [83, -18], [8, -64], [-84, 0], [89, 82], [8, 78], [75, -100], [-49, 67], [18, -74]], "cdjadbhgeb") == 7', 'assert maxPointsInsideSquare([[21, -17], [23, 17], [-18, 23], [-7, -12], [-21, 21]], "edbda") == 3', 'assert maxPointsInsideSquare([[1, 14], [-16, -10], [3, -14], [-7, 5]], "bddd") == 1', 'assert maxPointsInsideSquare([[-2, -4], [-4, 2], [-3, 3]], "cbc") == 1', 'assert maxPointsInsideSquare([[9, -6], [4, 6], [-3, 7]], "aac") == 2', 'assert maxPointsInsideSquare([[42, -21], [-18, 43], [6, -36], [-49, 10], [-8, 10], [32, -6], [-21, -5], [-50, -39]], "heefebeh") == 1', 'assert maxPointsInsideSquare([[-42, 32], [-12, -55], [-4, 36], [28, -12], [9, 6], [-48, -46], [-46, -24], [-6, 17]], "ahcbhhbf") == 5', 'assert maxPointsInsideSquare([[24, 22], [1, -11], [11, -7], [-24, -22], [23, -19]], "aeedd") == 0', 'assert maxPointsInsideSquare([[-16, 3], [-35, 60], [28, 38], [-2, 76], [-56, 12], [30, 34], [31, -79], [13, 12], [53, 66]], "ehacafica") == 4', 'assert maxPointsInsideSquare([[-25, -73], [30, 6], [43, 17], [17, -1], [-57, -55], [-73, -15], [81, 69], [-59, -12], [-49, 68]], "hdicgigcg") == 4', 'assert maxPointsInsideSquare([[-10, 18], [-18, 61], [-41, 59], [44, 43], [-7, -36], [-41, -25], [53, 33], [-4, 38]], "cfeebedh") == 4', 'assert maxPointsInsideSquare([[-9, -27], [19, 5], [33, -42], [-18, 14], [-23, 48], [-4, -12], [-10, -46]], "afdbbff") == 2', 'assert maxPointsInsideSquare([[46, 22], [15, -48], [41, -31], [-36, 31], [34, -22], [45, 16], [6, -8]], "cefaffc") == 3', 'assert maxPointsInsideSquare([[-35, -25], [-38, 28], [-25, 45], [-15, -14], [-28, -1], [-11, -40], [32, 29]], "egcegfa") == 3', 'assert maxPointsInsideSquare([[53, -58], [12, -16], [42, 61], [-63, -33], [16, 35], [59, 53], [61, -20], [-58, -38]], "agefaghb") == 2', 'assert maxPointsInsideSquare([[-26, 62], [23, -4], [0, -11], [-55, -66], [40, 54], [-22, -37], [12, -3], [28, -21], [-70, 35]], "aihhebdhh") == 3', 'assert maxPointsInsideSquare([[2, -2], [-4, -2]], "bb") == 1', 'assert maxPointsInsideSquare([[2, 1], [10, 7], [13, -4], [11, -4]], "dacc") == 3', 'assert maxPointsInsideSquare([[41, -63], [-8, 23], [-34, -20], [-20, 55], [54, -50], [-7, -16], [5, -68], [-51, 61], [-8, -46]], "gdeeghhbf") == 5', 'assert maxPointsInsideSquare([[-9, -16], [-13, 25], [18, 10], [14, 30], [-11, -6], [32, -6]], "eaadcb") == 3', 'assert maxPointsInsideSquare([[-8, -22], [14, -8], [-35, 36], [32, -5], [-3, 13], [32, 5]], "caeccb") == 2', 'assert maxPointsInsideSquare([[91, -64], [14, -1], [64, -5], [-74, 59], [-82, 27], [52, 1], [-29, 67], [51, 9], [5, -77], [-84, -18]], "ejfeceifhh") == 3', 'assert maxPointsInsideSquare([[0, 1], [1, -2]], "aa") == 1', 'assert maxPointsInsideSquare([[-22, 74], [23, 78], [80, 16], [-98, 47], [-12, -37], [-63, 33], [-58, 24], [17, -20], [-55, -35], [23, 60]], "faieijeacb") == 7', 'assert maxPointsInsideSquare([[-3, 15], [15, -7], [-6, -5], [-5, 9]], "dacc") == 1', 'assert maxPointsInsideSquare([[-26, 8], [-34, -11], [13, 44], [-4, 37], [-36, -30], [4, 28], [1, -35]], "ecgeegb") == 4', 'assert maxPointsInsideSquare([[5, -2], [-5, 9], [9, 9]], "abc") == 3', 'assert maxPointsInsideSquare([[5, 8], [7, -1], [4, 0]], "cca") == 2', 'assert maxPointsInsideSquare([[39, -21], [-28, 56], [42, 52], [-1, -46], [44, 22], [-24, -41], [32, -40], [3, -26]], "becebede") == 3', 'assert maxPointsInsideSquare([[-15, 36], [-58, 100], [-37, 33], [28, -25], [0, -94], [-59, -48], [63, 21], [-77, 69], [22, 18], [33, 89]], "bhaacdgbeh") == 3', 'assert maxPointsInsideSquare([[4, -15], [17, 13], [-6, -19], [15, 18], [3, 21]], "dcece") == 2', 'assert maxPointsInsideSquare([[-1, -1]], "a") == 1', 'assert maxPointsInsideSquare([[8, 30], [11, -22], [10, -13], [-12, 26], [-36, 1], [-47, 26], [-27, -2]], "gaeadff") == 2', 'assert maxPointsInsideSquare([[-55, 81], [-94, 78], [51, 65], [-23, -73], [86, -20], [-26, -82], [8, -98], [-16, 77], [14, -79], [74, -48]], "hbedaeciah") == 5', 'assert maxPointsInsideSquare([[2, -43], [43, 75], [29, -1], [-35, -15], [-45, -33], [79, -51], [34, 66], [47, 79], [-40, 37]], "ahhcafidb") == 4', 'assert maxPointsInsideSquare([[34, -72], [74, -31], [34, 60], [-29, -1], [-52, -46], [-46, 49], [12, -6], [-60, -42], [68, 12]], "efagfbedd") == 6', 'assert maxPointsInsideSquare([[-8, 57], [60, -23], [35, 63], [70, -44], [-75, -6], [35, -29], [-23, 36], [14, -49], [-9, 27]], "agabeedab") == 4', 'assert maxPointsInsideSquare([[-5, -5], [1, -6], [-9, -4]], "cbb") == 2', 'assert maxPointsInsideSquare([[-7, 2], [8, 3], [-1, 4]], "aba") == 1', 'assert maxPointsInsideSquare([[2, 13], [55, 36], [73, 36], [-57, -69], [8, 36], [-36, 38], [8, 2], [-6, -74], [-39, -12]], "agaahcaea") == 1', 'assert maxPointsInsideSquare([[3, -3], [-1, 3], [-6, 6]], "aba") == 2', 'assert maxPointsInsideSquare([[7, -24], [-7, 12], [-10, -25], [15, -18], [15, -12]], "bcbee") == 2', 'assert maxPointsInsideSquare([[0, 1], [0, 0]], "aa") == 1', 'assert maxPointsInsideSquare([[-11, 23], [1, -7], [-5, -15], [-21, -12], [12, 9]], "daddd") == 2', 'assert maxPointsInsideSquare([[21, -38], [-20, 27], [50, -8], [-54, 54], [41, 24], [30, 14], [23, 48], [-53, -49]], "gfhgbahh") == 5', 'assert maxPointsInsideSquare([[-8, 1], [-18, 2], [16, -2], [-28, -47], [0, -41], [46, 32], [44, 29]], "aabfcfc") == 2', 'assert maxPointsInsideSquare([[-43, 2], [-17, 5], [-5, -7], [4, -53], [-38, -5], [77, 31], [-6, 69], [-65, -8], [-26, 20]], "gfhghafab") == 3', 'assert maxPointsInsideSquare([[-9, -14], [5, -12], [-16, 11], [16, -2]], "dadb") == 2', 'assert maxPointsInsideSquare([[12, -14], [-32, -33], [-22, -7], [8, 25], [-20, 29], [-8, -35]], "abcbbb") == 3', 'assert maxPointsInsideSquare([[-12, 1], [-3, 9], [-14, -11], [-3, 5]], "ddac") == 2', 'assert maxPointsInsideSquare([[-20, 25], [62, 19], [39, 26], [-53, 17], [52, -55], [-31, 54], [6, 24], [-62, -59]], "ffbfbehd") == 3', 'assert maxPointsInsideSquare([[4, 4], [3, 4]], "ba") == 2', 'assert maxPointsInsideSquare([[4, 23], [-10, 13], [25, -15], [2, -22], [-12, 22]], "aabde") == 3', 'assert maxPointsInsideSquare([[15, -15], [17, 19], [18, -19], [-10, -19], [17, 1]], "adada") == 1', 'assert maxPointsInsideSquare([[-24, 9], [-18, 17], [26, 6], [-10, -13], [-16, -4], [-27, 32]], "bccebc") == 3', 'assert maxPointsInsideSquare([[3, 4], [-2, -4]], "ab") == 2', 'assert maxPointsInsideSquare([[28, -6], [-35, -21], [11, 30], [16, 21], [-10, 11], [30, 10]], "eeeded") == 2', 'assert maxPointsInsideSquare([[-23, 63], [62, -60], [38, 41], [-1, -30], [-44, 17], [-53, 63], [23, -22], [-16, 16]], "ddbdffbc") == 3', 'assert maxPointsInsideSquare([[1, -1], [-8, -4], [4, 6]], "bba") == 2', 'assert maxPointsInsideSquare([[16, 9], [20, -53], [-40, 31], [-41, -43], [26, -22], [31, -4], [11, 44], [33, -56]], "dabghcgg") == 5', 'assert maxPointsInsideSquare([[5, -8], [2, -14], [3, 0], [16, 3]], "aadd") == 2', 'assert maxPointsInsideSquare([[41, 29], [-41, 22], [45, 5], [-21, -17], [-30, -15], [-11, -43], [31, -38]], "febedge") == 2', 'assert maxPointsInsideSquare([[1, -22], [23, -12], [-18, 7], [-16, -9], [-24, -21]], "dcdba") == 2', 'assert maxPointsInsideSquare([[8, 7], [11, 0], [-2, 8], [-24, 14], [20, -15]], "eadea") == 3', 'assert maxPointsInsideSquare([[-79, 73], [-37, -58], [34, 64], [75, 59], [-61, 46], [-11, 28], [-24, 1], [6, -43], [15, 56]], "abededaba") == 3', 'assert maxPointsInsideSquare([[10, 9], [1, 14], [0, -11], [12, 0]], "ddda") == 1', 'assert maxPointsInsideSquare([[3, -3], [-3, -1]], "aa") == 0', 'assert maxPointsInsideSquare([[8, 7], [-1, 4], [-3, 6]], "bcb") == 2', 'assert maxPointsInsideSquare([[-15, -45], [-35, -7], [22, -40], [-47, 36], [58, 14], [-43, 78], [22, 14], [17, -43], [20, -40]], "ceadhafib") == 8', 'assert maxPointsInsideSquare([[7, -1], [3, 4], [4, -8]], "cac") == 2', 'assert maxPointsInsideSquare([[-16, -56], [15, -52], [23, 42], [-60, 47], [-27, 45], [-44, -64], [28, -28], [-43, -53]], "gdgefafg") == 2', 'assert maxPointsInsideSquare([[-1, 2], [2, -3]], "ba") == 2', 'assert maxPointsInsideSquare([[-6, -39], [25, -49], [13, 14], [-26, -47], [27, -11], [-42, -32], [-28, 42]], "cbdgace") == 3', 'assert maxPointsInsideSquare([[4, 4], [1, 0]], "ab") == 2', 'assert maxPointsInsideSquare([[-14, -31], [0, 7], [-27, 7], [-3, 12], [29, -33], [14, 25]], "fcebef") == 4', 'assert maxPointsInsideSquare([[-2, 0], [3, 2]], "ba") == 2', 'assert maxPointsInsideSquare([[-76, -57], [81, 92], [-91, 48], [89, 7], [-12, 46], [-89, -64], [-79, -98], [41, -90], [-24, 5], [-85, 13]], "bbfeghhdfc") == 7', 'assert maxPointsInsideSquare([[-13, -15], [8, -35], [48, -39], [2, -22], [23, -42], [30, 38], [-34, -29], [-2, -45]], "agdacbcd") == 1', 'assert maxPointsInsideSquare([[-4, 33], [25, 27], [31, 26], [25, -16], [-21, -33], [1, 0]], "eaabeb") == 1', 'assert maxPointsInsideSquare([[58, -53], [43, 49], [-57, 51], [-50, -51], [64, 56], [-61, 32], [-44, 25], [30, -37]], "bffgggbd") == 4', 'assert maxPointsInsideSquare([[-24, -12], [-29, 15], [13, 34], [13, -34], [26, 1], [33, 16], [31, 39]], "fdfegcg") == 4', 'assert maxPointsInsideSquare([[-4, 1], [2, -1]], "ab") == 2', 'assert maxPointsInsideSquare([[-2, -1], [21, 20], [-26, -30], [17, 23], [-22, 47], [-25, -2], [11, 48]], "fefcggd") == 4', 'assert maxPointsInsideSquare([[26, -46], [-18, -1], [-58, 39], [54, 49], [-27, 6], [54, 5], [27, 19], [-10, -26]], "abcffchc") == 5', 'assert maxPointsInsideSquare([[1, 2], [4, 2]], "ba") == 2', 'assert maxPointsInsideSquare([[-1, 4], [0, -1]], "ab") == 2', 'assert maxPointsInsideSquare([[-20, 31], [-2, -23], [29, -25], [-3, 41], [-47, -40], [-10, -43], [-41, 44]], "dagedga") == 4', 'assert maxPointsInsideSquare([[-7, 9], [-7, 6], [7, -3]], "cba") == 3', 'assert maxPointsInsideSquare([[-58, 44], [-61, 60], [-41, 45], [41, 29], [-1, 59], [-7, 8], [40, -27], [56, 48]], "fegddbhg") == 4', 'assert maxPointsInsideSquare([[-19, 36], [-11, -21], [17, -11], [-28, 19], [16, 24], [-24, 28]], "fcfffd") == 2', 'assert maxPointsInsideSquare([[47, -91], [85, 93], [-73, 100], [-68, -66], [83, 90], [51, -38], [-87, 51], [-18, 3], [-41, -10], [96, 54]], "icjdjeggbe") == 4', 'assert maxPointsInsideSquare([[-3, -1], [-9, 7], [6, 1]], "bcb") == 1', 'assert maxPointsInsideSquare([[-8, 89], [-55, -26], [-42, 88], [-29, -29], [-13, 14], [68, -24], [25, -14], [-92, -41], [-4, -69], [-95, -15]], "fghfggbhce") == 3', 'assert maxPointsInsideSquare([[-4, 6], [-2, -8], [4, 2]], "caa") == 2', 'assert maxPointsInsideSquare([[-17, 32], [9, -36], [-38, 47], [-1, 60], [-39, 16], [58, -50], [16, 5], [53, -5]], "heeghcda") == 3', 'assert maxPointsInsideSquare([[-1, 1], [2, 2]], "bb") == 1', 'assert maxPointsInsideSquare([[-4, 19], [3, -14], [-17, 5], [19, 24], [-2, 23]], "acece") == 3', 'assert maxPointsInsideSquare([[9, -10], [6, -8], [14, 10], [-8, -10]], "dacc") == 3', 'assert maxPointsInsideSquare([[-14, -28], [35, -85], [-75, 90], [-94, -21], [2, 92], [-36, -50], [-62, 59], [-62, 16], [-69, -44], [-58, 89]], "ahjjddbbja") == 2', 'assert maxPointsInsideSquare([[-2, -8], [-21, -55], [-55, 46], [-16, 30], [14, 36], [37, 32], [54, -50], [49, -30]], "hehegabf") == 6', 'assert maxPointsInsideSquare([[-8, 8], [2, 5], [-2, -7]], "bbb") == 1', 'assert maxPointsInsideSquare([[35, -28], [21, -24], [-17, -3], [5, 0], [-13, 16], [18, 23]], "dcadfc") == 4', 'assert maxPointsInsideSquare([[-18, -17], [-8, 5], [52, -50], [56, 62], [52, -3], [59, 54], [54, 10], [67, 42], [-46, 14]], "gbghdbdfd") == 3', 'assert maxPointsInsideSquare([[4, -1], [6, 16], [-16, -8], [0, 14]], "cccc") == 1', 'assert maxPointsInsideSquare([[9, 2], [17, 16], [-3, 18], [2, 15], [1, 6], [30, 33]], "cdcffa") == 2', 'assert maxPointsInsideSquare([[-8, -7], [5, 3], [-7, -14], [11, -3]], "acbb") == 3', 'assert maxPointsInsideSquare([[79, 64], [-60, 14], [81, -3], [-28, 47], [-52, -5], [71, 4], [8, 64], [-54, -39], [36, 54]], "decbheacd") == 6', 'assert maxPointsInsideSquare([[43, 81], [-25, -58], [39, -2], [-40, -23], [-20, 11], [-30, -3], [49, 22], [-26, 49], [76, -66]], "ifaeieeeb") == 3', 'assert maxPointsInsideSquare([[40, 37], [75, 53], [-81, -37], [-22, -46], [30, 16], [44, -81], [8, -26], [37, 72], [25, 64]], "cgcgifchd") == 2', 'assert maxPointsInsideSquare([[32, 41], [-10, -43], [37, 81], [30, -16], [-46, 72], [-13, -69], [22, 1], [15, 28], [66, -32]], "dibbiagie") == 4', 'assert maxPointsInsideSquare([[10, -51], [18, -49], [-9, -24], [21, -35], [-59, 21], [-48, -23], [-54, -40], [15, 59]], "bdhbgdda") == 3', 'assert maxPointsInsideSquare([[12, -16], [72, 61], [61, 49], [19, -69], [85, -58], [54, 79], [-47, -99], [9, -28], [-12, 12], [-79, 32]], "ibidadjice") == 2', 'assert maxPointsInsideSquare([[79, -42], [3, 80], [-9, -25], [-46, 8], [-31, 70], [-74, -65], [66, -2], [29, -66], [-66, 23]], "iedbdgdih") == 2', 'assert maxPointsInsideSquare([[0, 7], [-7, -5], [1, -8]], "cab") == 3', 'assert maxPointsInsideSquare([[1, -9], [16, -12], [-7, 20], [24, 20], [-2, -14]], "abcdc") == 3', 'assert maxPointsInsideSquare([[-80, 53], [-88, 24], [-77, 10], [-39, -43], [39, -27], [51, 67], [27, 5], [-70, 94], [49, -38], [-77, -67]], "bjjchcihif") == 3', 'assert maxPointsInsideSquare([[-27, 17], [-9, -34], [-21, -44], [-45, -36], [25, 14], [-4, -32], [10, 20]], "cafbafe") == 4', 'assert maxPointsInsideSquare([[-49, -11], [-12, -49], [-23, -11], [41, -33], [-25, 3], [2, -39], [-4, -24]], "gfdagff") == 3', 'assert maxPointsInsideSquare([[1, 1], [1, -2]], "bb") == 1', 'assert maxPointsInsideSquare([[8, -23], [14, 23], [-24, 13], [2, -16], [-19, -24]], "adcdc") == 1', 'assert maxPointsInsideSquare([[-49, 18], [8, -46], [-10, 15], [58, -28], [53, -6], [81, 57], [-40, -13], [46, 61], [-19, 56]], "bdacbfahi") == 1', 'assert maxPointsInsideSquare([[-21, 2], [-7, -3], [8, -3], [-17, -21], [-10, 7]], "acbed") == 5', 'assert maxPointsInsideSquare([[0, -3], [-1, 3]], "aa") == 0', 'assert maxPointsInsideSquare([[-1, -32], [42, 59], [68, -25], [-42, -19], [12, 43], [-4, -35], [64, -40], [47, 51], [-50, 38]], "fbgfcicdb") == 2', 'assert maxPointsInsideSquare([[-31, 32], [99, -3], [35, -55], [-61, -74], [-68, -90], [100, -2], [98, 25], [-44, 33], [59, -70], [-43, 0]], "ijedcdidgf") == 5', 'assert maxPointsInsideSquare([[-62, 38], [7, 71], [14, -72], [-21, 12], [41, -57], [-57, 62], [63, -47], [32, 45], [-75, -5]], "aeafbfbgh") == 3', 'assert maxPointsInsideSquare([[-3, 0], [2, 3]], "bb") == 0', 'assert maxPointsInsideSquare([[-44, -4], [17, -26], [16, 41], [43, 38], [22, -10], [13, -13], [-45, 24]], "cfedbdf") == 4', 'assert maxPointsInsideSquare([[40, -3], [-60, 47], [15, 14], [-41, -37], [-1, -25], [18, 23], [64, -40], [-24, -32]], "gecdadec") == 3', 'assert maxPointsInsideSquare([[-53, -39], [34, 22], [26, 1], [37, -46], [-16, 58], [3, 58], [20, -46], [-1, -7]], "eeaffhgb") == 5', 'assert maxPointsInsideSquare([[45, 89], [60, 40], [40, -77], [-45, 43], [76, 79], [91, 68], [-36, 11], [-69, 84], [-89, -47], [-54, 91]], "bhhdjjchjj") == 3', 'assert maxPointsInsideSquare([[-4, -4], [3, -2]], "aa") == 1', 'assert maxPointsInsideSquare([[-22, -68], [69, 53], [-71, 64], [-67, 28], [13, -76], [-12, -67], [-8, 61], [85, -73], [-59, 45], [-59, 93]], "fjhbiaagfd") == 2', 'assert maxPointsInsideSquare([[-38, 26], [-26, 46], [16, -3], [58, -54], [-48, 48], [-6, 21], [-11, -53], [60, 19]], "babadgdf") == 2', 'assert maxPointsInsideSquare([[6, 24], [20, 36], [34, 21], [28, 12], [18, -22], [16, -11]], "fecbbb") == 1', 'assert maxPointsInsideSquare([[-31, -10], [-9, 60], [-71, 59], [55, 28], [30, 11], [38, 79], [47, -72], [42, 12], [31, 13]], "efdcedeae") == 1', 'assert maxPointsInsideSquare([[5, -11], [-3, 13], [-11, 15], [5, 1]], "abcd") == 4', 'assert maxPointsInsideSquare([[-42, -41], [6, -37], [-18, 5], [-13, 32], [-7, -42], [-9, -9], [35, 28]], "bfbbgad") == 2', 'assert maxPointsInsideSquare([[13, -35], [13, -5], [31, -6], [4, -2], [-14, 19], [-35, 32]], "dccbda") == 3', 'assert maxPointsInsideSquare([[4, -26], [8, 13], [30, -11], [10, 15], [-64, -27], [-10, 56], [-7, 34], [-10, -37]], "gbghaefe") == 3', 'assert maxPointsInsideSquare([[5, 13], [14, -5], [-8, -16], [-8, 9]], "adbd") == 2', 'assert maxPointsInsideSquare([[-4, -1], [2, 3]], "ab") == 2', 'assert maxPointsInsideSquare([[-1, 2], [2, -3]], "ab") == 2', 'assert maxPointsInsideSquare([[15, 39], [-28, -26], [-18, 25], [-20, -16], [-28, 40], [-44, -20], [-21, -32]], "gdbaddc") == 5', 'assert maxPointsInsideSquare([[39, 1], [24, -23], [4, -20], [-18, 1], [-28, 0], [-46, -44], [-11, 12]], "bgfbdag") == 3', 'assert maxPointsInsideSquare([[14, -4], [-1, -14], [-8, -11], [-5, 0]], "acbc") == 2', 'assert maxPointsInsideSquare([[70, -59], [-63, -79], [-72, -14], [33, -7], [-81, 37], [-49, -17], [64, 61], [-61, 19], [-11, -63]], "eiecfegia") == 5', 'assert maxPointsInsideSquare([[61, -20], [-59, -47], [16, -56], [22, 59], [-46, -40], [43, 28], [-32, -41], [-40, 10]], "eagbeead") == 3', 'assert maxPointsInsideSquare([[6, -15], [-1, -28], [-22, -42], [22, 11], [13, -35], [45, -12], [22, -19]], "efbeded") == 1', 'assert maxPointsInsideSquare([[-3, -3], [4, 3]], "ba") == 2', 'assert maxPointsInsideSquare([[-36, -26], [22, 8], [7, -32], [-24, 29], [-18, -16], [-31, 10]], "cbfdaa") == 3', 'assert maxPointsInsideSquare([[-7, 24], [-37, 24], [25, -1], [-15, -44], [-11, 60], [-25, -7], [-19, -33], [10, 56]], "abhefgad") == 3', 'assert maxPointsInsideSquare([[-36, 34], [-29, -33], [54, -68], [32, -16], [35, -41], [22, 10], [61, -93], [71, -60], [-98, 90], [5, 67]], "bbhdfehagf") == 3', 'assert maxPointsInsideSquare([[27, 2], [21, -12], [-17, 32], [29, 12], [-34, -35], [2, -31]], "cafffc") == 3', 'assert maxPointsInsideSquare([[1, -4], [-3, 4]], "ab") == 2', 'assert maxPointsInsideSquare([[-2, -43], [31, 35], [-27, -24], [1, 53], [-9, 37], [42, 29], [-22, 54], [-24, -25]], "adabgdbg") == 3', 'assert maxPointsInsideSquare([[-3, 12], [-2, 6], [-8, 11], [-1, 6]], "ddaa") == 2', 'assert maxPointsInsideSquare([[11, -14], [-8, 15], [14, -5], [-12, -2]], "cdcc") == 1', 'assert maxPointsInsideSquare([[-19, -13], [20, 12], [13, -16], [13, 8], [4, -21], [28, -36]], "cceadc") == 3', 'assert maxPointsInsideSquare([[3, -35], [-19, -1], [-15, -17], [9, 6], [5, 16], [19, -36]], "efdcac") == 5', 'assert maxPointsInsideSquare([[10, 30], [21, -20], [-13, 18], [-20, 26], [-17, -9], [8, 19]], "bdecfc") == 4', 'assert maxPointsInsideSquare([[6, -5], [3, -1], [5, 9]], "bbc") == 1', 'assert maxPointsInsideSquare([[66, -21], [29, -81], [-30, -67], [-12, -69], [-3, 16], [-55, -3], [18, -7], [-17, -51], [4, 63]], "hhceaagbe") == 3', 'assert maxPointsInsideSquare([[-51, 76], [72, 4], [-74, 73], [16, -22], [-46, 9], [42, 77], [75, -15], [67, 8], [34, -43]], "gahadgaba") == 1', 'assert maxPointsInsideSquare([[31, -14], [-8, -14], [62, -39], [51, -33], [-22, 44], [17, -46], [-27, -13], [43, -48]], "ghahgece") == 3', 'assert maxPointsInsideSquare([[27, 16], [65, 70], [-5, -42], [2, 48], [-54, -7], [95, 86], [46, -84], [-86, 99], [77, 84], [100, 20]], "ceaebgabhe") == 4', 'assert maxPointsInsideSquare([[4, -31], [9, -24], [-6, 31], [22, 12], [-7, 16], [12, 2]], "dbcaea") == 2', 'assert maxPointsInsideSquare([[14, -17], [19, -12], [25, -16], [8, -11], [0, 23]], "ecabb") == 3', 'assert maxPointsInsideSquare([[-9, -23], [5, -72], [-26, 49], [-71, 7], [41, -36], [23, 41], [-26, -58], [-47, -49], [74, -45]], "dcbcghdbb") == 3', 'assert maxPointsInsideSquare([[-7, -14], [10, 4], [9, -7], [10, 12]], "ccad") == 3', 'assert maxPointsInsideSquare([[1, -2], [-3, 1]], "ab") == 2', 'assert maxPointsInsideSquare([[4, 2], [3, -2]], "bb") == 1', 'assert maxPointsInsideSquare([[-16, 0], [-11, 23], [-29, 18], [14, 22], [-7, 21], [-24, 26]], "cafbad") == 3', 'assert maxPointsInsideSquare([[6, -1], [3, -2], [0, -1]], "bcc") == 1', 'assert maxPointsInsideSquare([[-8, 11], [-12, -7], [-12, -9], [11, 12]], "bbac") == 1', 'assert maxPointsInsideSquare([[2, -1], [-4, -3]], "aa") == 1', 'assert maxPointsInsideSquare([[-1, 6], [7, -7], [-7, 8]], "aba") == 2', 'assert maxPointsInsideSquare([[26, 55], [2, -38], [-48, -12], [33, -41], [-3, -30], [-59, 0], [22, -44], [-12, -51]], "ededdegh") == 1', 'assert maxPointsInsideSquare([[-15, -35], [46, -28], [10, -11], [-5, -15], [42, 5], [-10, -42], [15, -48]], "bfgffbg") == 3', 'assert maxPointsInsideSquare([[4, -9], [6, -4], [-3, 8]], "bbb") == 1', 'assert maxPointsInsideSquare([[18, 11], [10, 5], [17, -1], [23, 13], [2, 13]], "eedce") == 1', 'assert maxPointsInsideSquare([[41, 6], [44, 49], [19, -32], [-37, -13], [-12, -26], [38, -5], [38, 45]], "bbebdcd") == 4', 'assert maxPointsInsideSquare([[37, -42], [14, -39], [14, 6], [-15, 13], [33, 33], [-13, -14], [10, 35]], "gafcccb") == 2', 'assert maxPointsInsideSquare([[40, 62], [10, 30], [-50, 51], [-42, 13], [-15, -14], [56, 7], [-67, -76], [23, -8], [-59, 20]], "efbbeiaag") == 4', 'assert maxPointsInsideSquare([[-4, 4], [0, -1]], "ab") == 2', 'assert maxPointsInsideSquare([[-1, 63], [62, -45], [15, 43], [-13, -15], [39, -36], [7, 0], [21, 26], [43, 19]], "cbfefeba") == 1', 'assert maxPointsInsideSquare([[-10, -12], [2, -1], [-13, -2], [16, -13]], "abbc") == 2', 'assert maxPointsInsideSquare([[55, 66], [24, 70], [42, -42], [-22, -32], [-62, -73], [-16, 61], [-33, 16], [-15, 48], [34, 4], [-32, -80]], "edddbeaiib") == 3', 'assert maxPointsInsideSquare([[42, -21], [-46, 47], [-27, 37], [29, 28], [34, -31], [25, 42], [22, 14]], "eddfcdg") == 4', 'assert maxPointsInsideSquare([[10, -30], [-10, -55], [48, 51], [-22, 43], [-72, 42], [29, -27], [-69, -5], [-48, -41], [-67, 35]], "bgaigabdi") == 4', 'assert maxPointsInsideSquare([[7, 5], [-8, 1], [2, -8]], "bbc") == 1', 'assert maxPointsInsideSquare([[30, -10], [-30, 32], [7, -21], [-14, 11], [17, -11], [5, 28]], "dbfadd") == 3', 'assert maxPointsInsideSquare([[4, -1], [14, -16], [-22, -16], [3, -21], [25, -8]], "ddeac") == 1', 'assert maxPointsInsideSquare([[-1, -4], [0, -3]], "aa") == 1', 'assert maxPointsInsideSquare([[37, -2], [-15, -5], [12, -10], [17, -49], [-39, 17], [40, 44], [45, -9]], "bcdeecc") == 4', 'assert maxPointsInsideSquare([[-1, -1], [-2, 2]], "ba") == 2', 'assert maxPointsInsideSquare([[5, 9], [-2, 2], [5, 8]], "ccc") == 1', 'assert maxPointsInsideSquare([[-34, 72], [-89, -78], [-35, 69], [-51, 29], [-99, 58], [-31, 58], [-92, -25], [-64, 18], [10, 13], [90, 88]], "igejacbdai") == 7', 'assert maxPointsInsideSquare([[-2, -63], [-2, -57], [37, -10], [-52, 49], [40, -46], [-32, -35], [6, -3], [16, 42]], "hhdhhaba") == 3', 'assert maxPointsInsideSquare([[0, 0]], "a") == 1', 'assert maxPointsInsideSquare([[68, 72], [-4, -27], [38, -41], [77, 8], [-68, -45], [30, -4], [25, 65], [-70, -1], [49, -25]], "bafdfgahe") == 4', 'assert maxPointsInsideSquare([[44, -28], [26, -21], [5, 3], [23, -37], [32, -3], [-49, 32], [-43, -15]], "ccbbfec") == 3', 'assert maxPointsInsideSquare([[5, -5], [4, -1], [-5, 3]], "acb") == 3', 'assert maxPointsInsideSquare([[-26, 43], [-41, -25], [-48, -2], [-10, 45], [44, 47], [-30, -17], [46, -42]], "fgfgccd") == 3', 'assert maxPointsInsideSquare([[-8, -35], [23, -31], [12, 40], [4, 29], [10, -23], [-1, -28], [36, 18]], "bgcebae") == 4', 'assert maxPointsInsideSquare([[-9, 3], [5, 6], [7, 7]], "cca") == 2', 'assert maxPointsInsideSquare([[-89, -58], [68, -75], [57, 24], [44, 48], [-8, 2], [-78, -100], [-6, -10], [-51, 37], [-77, -100], [-16, -24]], "igdcchhcji") == 3', 'assert maxPointsInsideSquare([[1, -6], [-1, -14], [6, -1], [10, -6]], "bbba") == 0', 'assert maxPointsInsideSquare([[-14, 63], [-63, -25], [29, -2], [-38, -10], [37, 36], [-26, 15], [-41, -32], [57, -16]], "bfcfhegc") == 5', 'assert maxPointsInsideSquare([[-2, 2], [1, 0]], "bb") == 1', 'assert maxPointsInsideSquare([[0, 2], [0, -2]], "aa") == 0', 'assert maxPointsInsideSquare([[28, 29], [15, -36], [-7, -11], [-25, 8], [-4, -11], [-9, 25]], "adefbf") == 2', 'assert maxPointsInsideSquare([[100, 59], [9, -26], [-6, 59], [13, 22], [14, 63], [-51, -19], [95, 10], [-26, -30], [-57, -37], [65, -18]], "hidfcihhig") == 3', 'assert maxPointsInsideSquare([[22, 9], [-15, 5], [-11, -24], [24, 2], [12, 2]], "bccec") == 1', 'assert maxPointsInsideSquare([[2, -6], [-1, -4], [9, -1]], "cbc") == 2', 'assert maxPointsInsideSquare([[16, 20], [-1, 4], [-20, -18], [-14, 6], [2, -17]], "daced") == 3', 'assert maxPointsInsideSquare([[-34, 4], [-22, 27], [-12, -22], [29, 34], [32, 6], [22, 33]], "deadec") == 2', 'assert maxPointsInsideSquare([[-13, 5], [12, -5], [6, 7], [7, -10]], "acbb") == 1', 'assert maxPointsInsideSquare([[-57, 16], [76, 3], [56, 55], [-28, -46], [63, -41], [67, 80], [79, 57], [58, 54], [47, -29]], "bbhdfgfeh") == 2', 'assert maxPointsInsideSquare([[28, 14], [-34, 17], [-7, -1], [7, -35], [-31, -22], [-35, -26]], "ffcaef") == 3', 'assert maxPointsInsideSquare([[-10, 2], [9, 5], [-2, -2], [15, 15]], "bbcb") == 2', 'assert maxPointsInsideSquare([[7, -4], [5, 0], [0, 0]], "cbb") == 1', 'assert maxPointsInsideSquare([[-18, 10], [-26, 7], [-28, 15], [-21, 12], [-22, 47], [9, -45], [7, 2]], "caggfbb") == 4', 'assert maxPointsInsideSquare([[37, 31], [23, -45], [31, -24], [42, -14], [-13, 31], [30, -16], [30, 25]], "gbfcadf") == 2', 'assert maxPointsInsideSquare([[-2, 7], [-5, 8], [8, 6]], "caa") == 1', 'assert maxPointsInsideSquare([[-80, 25], [32, 74], [-69, 0], [-32, -71], [-29, -50], [-49, -19], [23, -12], [-5, -67], [80, 21]], "ihhcdbgia") == 6', 'assert maxPointsInsideSquare([[16, -7], [43, -66], [2, 50], [-31, 66], [53, 1], [-41, -68], [-52, 43], [-24, -3], [-70, 67]], "behbichdb") == 3', 'assert maxPointsInsideSquare([[-4, -4], [-3, -2]], "bb") == 1', 'assert maxPointsInsideSquare([[-4, -4], [-15, -16], [-16, -7], [-3, -10]], "baba") == 2', 'assert maxPointsInsideSquare([[-5198, -1433], [2263, -284], [-4724, 2191], [-4347, -3764], [5414, 4403], [-1750, -3044], [-3053, -314], [-2998, 2200], [5538, -2148], [-2296, 2036], [-5157, -5335], [-4091, -3344], [4181, 3046], [-3757, -467], [4890, 1559], [2311, -2735], [2109, -753], [-4190, 888], [-406, 551], [2963, -4978], [-2158, -4309], [-3672, 3916], [1005, -1244], [617, -3543], [5320, -3532], [3743, -2209], [379, -701], [-4209, 2577], [549, 4034], [2413, -3236], [3246, -1212], [-914, 2077], [-1409, 5133], [3830, -2893], [-1945, 1500], [-2975, 2185], [-3053, 4104], [1058, 4112], [-3062, 3923], [-3480, 1187], [-3583, -90], [5440, 1650], [-2191, 3625], [-352, -1598], [-4046, 2152], [-5542, -1929], [2942, -3592], [3200, 2423], [-365, -4356], [1217, -3422], [4896, -2969], [-1818, -11], [-4595, 3910], [5415, 900], [-3453, 4705], [-1711, -4923], [-3125, 187], [1002, 2350], [-1281, 2163], [-1698, -2501], [-4713, 1164], [4443, -4190], [-3385, 5431], [-2015, -3715], [-300, 951], [4681, 4495], [5047, -3553], [-2739, 554], [1167, -2224], [3631, -233], [-4070, 4998], [-3140, 2701], [-3350, 4749], [188, -3212], [-2030, -4060]], "abcdefghijklmnopqrstuvwxyzyockyhbxwjknqztryljailyloihjeeixoebfjvqkdpdfvtard") == 6', 'assert maxPointsInsideSquare([[6462, 122], [-2419, -2643], [-2826, 4473], [5676, -5640], [6543, 2677], [-5699, 5582], [5900, 4882], [-4585, -1921], [-2040, 3770], [4045, -5960], [694, 2877], [1685, 5752], [746, 6615], [4126, 1818], [2027, 1205], [-2336, 4800], [5232, -4847], [-2487, 5943], [5867, 4304], [-4333, 6512], [5357, -5944], [725, 4300], [-2218, -5660], [2302, -2097], [99, -3559], [6295, 2175], [3245, 6073], [153, -3072], [3753, 751], [-2892, 3152], [442, -3841], [2209, 3001], [6456, 5539], [-1931, -4872], [-297, 5028], [-2131, -287], [-2415, -6565], [-4376, 3973], [-3834, 3837], [881, 1740], [3143, -2001], [-2034, -679], [6482, -2304], [-5494, 6044], [-6210, 3445], [-3440, -6029], [-4153, 6683], [-5428, 3368], [-6603, 2043], [-2257, -2323], [146, 5375], [1433, 5919], [-1533, 5], [-2743, -3131], [633, -4225], [2326, -2443], [313, -4778], [5832, -4343], [6040, 2456], [-859, -194], [6326, 3505], [-3636, -4411], [2073, -5364], [1507, 4448], [-1511, -5535], [-4144, 3599], [-655, -3119], [5572, 6265], [798, -4269], [-4100, 5225], [4507, -4112], [4807, -6162], [-5621, -617], [3033, -3988], [4578, -2938], [-3284, 824], [4844, -3446], [1926, 586], [-3136, -3904], [6033, 4340], [3166, -3152], [-4745, 138]], "cxlbzecsubcfscsmxfktqxbznscrsixmujtxzttoeayulistmqmqpkudwvekotjqcrwthioiltqqxuzwuk") == 10', 'assert maxPointsInsideSquare([[-3312, 944], [-3092, 3481], [-1215, -1487], [167, -3068], [-4438, 1363], [-868, 273], [2556, 2098], [-1530, -1870], [-768, 201], [-2582, -3676], [1381, -2928], [1181, -953], [-3731, -3349], [4261, 1541], [2653, -3250], [-410, -2843], [2220, 4238], [-3147, 1057], [-2086, -4478], [-3582, -2860], [-869, -4221], [1900, -321], [1066, -2661], [1224, -3521], [-1744, -2413], [2583, 272], [-36, -2359], [906, -1127], [-2782, -1605], [-2694, 1549], [-3037, -3165], [-3592, 1211], [-98, -4279], [-4067, -2091], [-101, 1641], [-2500, 3695], [-2419, -826], [729, 2107], [413, -2761], [-789, -4119], [-3222, 3936], [-2287, 2808], [-3240, -1008], [497, 1587], [-2722, 1652], [-2052, 590], [3734, -2008], [-883, -595], [1806, 2344], [3548, -2088], [1360, 2764], [-2154, 2697], [1484, 3283], [-1425, -551], [-2264, 982], [1353, -4226], [-2330, 1370], [-3125, 711], [3664, 4096], [2653, -1858], [205, -520], [4170, 3697], [1776, 4461], [-1963, 550], [-187, 765], [2002, 2461], [-3965, -1860]], "xjhccgvinacwhvtiwobowtkecvcmnfdijjyzulftbyebnomwoaazvsogoosdyswmjnn") == 6', 'assert maxPointsInsideSquare([[2994, 5842], [-996, 3020], [-5274, 6236], [-4161, 673], [-1212, -251], [4943, 3080], [-5046, 4887], [1762, -6064], [-5873, 6112], [-2423, 1395], [2924, 1315], [5401, -6057], [-3182, 3873], [-4710, 2152], [-3874, 42], [303, -316], [-1461, -6223], [-2653, 4995], [3965, 5340], [-2897, -384], [-5311, 5350], [-4134, 5771], [873, 4968], [-4637, 912], [-5511, -3635], [-1712, -5386], [-2089, 595], [-290, -4047], [-4195, 3312], [-3414, -6312], [-2870, 3197], [-482, 5664], [-3988, -3959], [3482, -5040], [-1283, 3032], [-5356, 1918], [-3257, 4869], [-3646, -1120], [-1102, 3977], [1527, -6133], [5385, -3244], [1160, 647], [3924, 2940], [-1377, -653], [-6390, -3699], [2667, 1040], [3587, 4545], [4417, -1490], [-4002, 4195], [-3612, 5918], [-2359, -1953], [4277, 3674], [5391, 2925], [-5828, -5589], [123, 2629], [-2483, -6341], [5307, 2341], [-4072, -6183], [-2345, 4649], [522, 4669], [-2543, -5351], [539, -2338], [2949, -3880], [321, 1263], [1613, 2593], [2107, 4539], [-5709, -3744], [5347, 1174], [5546, 1903], [-3120, -1884], [1081, -5660], [1313, 4298], [5734, -5921], [3779, -2908], [705, -2289], [793, 103], [1374, 2699], [5774, 523], [2796, 3735], [5752, 5793]], "kujemlbxtedtgdsmkvxpzztfvojwweohsgidhpvcrngwebrpskoxbidlfmedzttlrlthygpmqtljqwjx") == 3', 'assert maxPointsInsideSquare([[-2726, 1489], [5214, -7877], [-6056, 7741], [-5979, -4678], [6959, -3189], [-4136, -8436], [-6603, 988], [2607, 5132], [4762, -8774], [-2540, 368], [-3628, -1814], [-5825, -8058], [-6106, 274], [-4194, -6296], [-3254, -4215], [-6990, 5395], [8484, 6868], [5253, -2731], [2846, 4591], [2819, -2936], [3089, -8059], [4448, -2106], [-4546, -892], [2560, -7062], [1027, -7021], [4125, -2470], [6767, -1587], [-6063, -1630], [8092, -4675], [8408, 7885], [-6070, 491], [-6678, 3627], [-8234, -6521], [2016, -4609], [-8413, 8363], [4667, -5701], [189, 3480], [4929, 2253], [1358, -4371], [6927, 1019], [583, -7704], [-7309, -6369], [-8135, 7674], [-3611, 1112], [-4572, 2058], [-928, 7506], [-182, 8473], [4790, 8592], [-6706, 954], [-258, 870], [-8799, 6925], [-4906, 1397], [4606, 5943], [-7334, -6372], [5151, -5351], [-4348, -5331], [3772, 2621], [-7969, -1762], [-1867, 8549], [-8473, -3191], [-210, -4656], [7259, 2341], [-4352, -8848], [133, -7139], [-1970, 2717], [-4658, -7898], [-3726, -5545], [4815, 1924], [4838, 2200], [5462, -7464], [-4645, 7226], [2083, -2468], [-3406, -6545], [8074, -1746], [5137, -790], [-3845, -4288], [6808, -3135], [-2210, 3658], [1275, -6697], [37, -1396], [8779, 5812], [6163, 4812], [-7932, -7555], [2050, -4578], [8749, 5324], [-1885, 7623], [-4529, 7702], [8708, -7753], [-7818, -7814], [5000, 4065], [-8689, -6268], [2839, 6105], [-5055, -5227], [2126, 8784], [1840, -8499]], "abcdefghijklmnopqrstuvwxyzjpufojdwjjljelixgwfvmifmqtuddngyurszfhwsmsdelcctonvathpctgqtvvvoxjlxv") == 8', 'assert maxPointsInsideSquare([[0, -313], [1102, -480], [-1000, -804], [35, -111], [-931, 1646], [1362, -884], [570, 158], [-806, 646], [1936, 843], [-1256, 770], [-1639, 1627], [-1667, -1865], [605, 680], [87, 1886], [-1189, -1778], [-387, -1689], [1457, 1258], [-55, -1183], [1171, -2104], [386, 408], [202, -1195], [-111, 1846], [1281, -1983], [1236, -1356], [-1167, -1033], [-741, 826], [820, -1066], [1631, -1481], [1511, 1239], [1225, 1624], [-1649, -1149], [2062, -7], [1030, -965], [1227, 809], [-1939, 1520], [871, 1104], [-1067, -1493], [-434, -1263], [-1351, -1464], [-1012, -1047], [1671, -1407], [-33, 1535], [-237, -1035], [538, -1064], [-1286, 950], [1212, 698]], "urgimzdhjelibxtyfgaampnphgrqvfnjngvnqphjsptvwp") == 7', 'assert maxPointsInsideSquare([[51, -143], [122, 213], [-186, 181], [-212, 87], [45, -168], [-39, -86], [-66, 93], [-212, 182], [-28, -34], [-98, 27], [33, -44], [-119, -68], [67, 56], [-145, 29], [92, -97]], "mlobcknhfgbknbg") == 4', 'assert maxPointsInsideSquare([[1278, 2462], [-1897, -2566], [-642, -1150], [1372, 464], [-1017, -1193], [639, 1646], [1691, -271], [-1734, -703], [1102, 1784], [835, 397], [371, 1379], [-2377, -2569], [-2057, 1431], [-1234, 1060], [2414, -2010], [-932, -656], [-2222, 2002], [-52, 2466], [838, -72], [970, -1388], [2109, -2190], [-710, 1350], [2367, -809], [113, -2140], [-733, 2007], [-151, 2195], [2208, 1566], [1927, 1189], [-678, -814], [1374, 85], [2061, 92], [-149, 1010], [-675, -24], [1734, 1379], [-2558, -1285], [-74, 364], [2478, -961], [1091, -2424], [944, -765], [-139, 2495], [-199, -1763], [1654, 383], [-390, 1895], [-1979, 2549], [-1788, -1208], [917, 1164], [636, -221], [575, -2150], [-1301, -423], [-1823, 601], [1259, 508]], "lxtvxhhzbennkhsiponxcvjljjdxybhewusgabnycrxrclmjghz") == 7', 'assert maxPointsInsideSquare([[4376, -776], [-173, 1486], [4911, 5984], [-5810, -7366], [-7571, -1984], [-7118, 7224], [-6969, -6781], [-1146, 6623], [-7765, 2603], [-7459, -7260], [-2871, -5571], [5530, 7885], [-3155, -2705], [-4778, -3716], [3998, 1479], [-6761, -1367], [140, 2152], [54, -1264], [3644, 4381], [2568, -5964], [-1183, 5673], [-2496, -6780], [-7539, 1723], [-5744, -4227], [-360, 6000], [3775, 1790], [2633, 1298], [51, -4559], [7867, -2729], [790, 3867], [-3878, 7367], [920, -5017], [4493, 2882], [-4205, 3178], [3163, -4356], [4880, -661], [-1219, 3216], [-3458, -5683], [-6295, -7657], [451, 6718], [6162, -2014], [-6349, -3494], [-6969, 3550], [1741, 3044], [-6858, -6804], [-4284, 5439], [5554, 1227], [-7115, 5655], [1279, -6606], [-2899, 4332], [1402, -429], [6830, -1849], [-5743, 5926], [-5017, -5419], [7376, 1983], [5505, 4266], [-5093, -4432], [3379, 2014], [5269, 1878], [-6418, 902], [1888, 3875], [22, -7886], [7437, 4957], [6403, -3231], [-5456, 7636], [6949, -191], [-7493, -6926], [1963, -623], [6054, 5586], [1294, -1969], [1119, 2603], [-6343, 2003], [5539, 274], [4630, -3724], [-7047, 4523], [-2791, 6441], [-2305, -1415], [-6632, -7574], [5249, 6873], [3761, -1716], [-7080, 1490], [-3190, 24], [-5647, -1907], [3837, 6181], [7669, 4367], [2155, 3240], [35, 5440], [-828, 4479], [-1306, -3674]], "abcdefghijklmnopqrstuvwxyzidxydtufveznckdhhhovckgcmwcnzajlbiplvzraaulessyggzrkkrfxdlphtzu") == 6', 'assert maxPointsInsideSquare([[-387, -4186], [4802, -3068], [3644, 1245], [1835, -457], [3983, 3325], [-2933, -2016], [-2050, -3727], [-2548, 2226], [5346, 1748], [4635, 632], [-4086, 3093], [-5610, -3432], [-3235, 3242], [-2322, 4767], [-4826, 5115], [4030, -4109], [3723, -3359], [-5341, -5161], [3817, 3560], [-4358, 4279], [2675, -4249], [1443, -4908], [4588, 1128], [-4307, 3040], [923, 1886], [221, 99], [478, -2177], [-1385, 1602], [617, -3326], [3567, 2217], [-1863, 3835], [-4004, -3559], [5450, 4376], [-1309, -2557], [-4510, 1475], [-2927, 4727], [5323, -3135], [-1741, 5059], [2526, -1161], [4450, 2469], [4312, 467], [3534, -3595], [2217, -3108], [-4120, 3052], [-62, 998], [1306, -1674], [-360, -1179], [-5553, -340], [-3774, -5139], [-1595, 2534], [2027, -3230], [5178, -4351], [-757, -2383], [1222, -5375], [4678, -3817], [-2352, -375], [-1132, -2989], [-1889, -569], [2557, 533], [3703, -1631], [567, 3748], [-1391, -219], [-2115, -825], [-5309, 521], [-1725, 5039], [821, -1171], [-5587, 3737], [2930, -2592], [5434, -2067], [-2510, 1699], [-2071, -2280], [-4456, 3718], [-3094, -3003], [4869, -2954], [-5502, 2058]], "kbdzfkllgpkkblxrawqwvbncpckqsqilikecndmdtqsmomhfuihsmhvesytlnitkzbnposgeehw") == 14', 'assert maxPointsInsideSquare([[-6056, -1984], [1309, -233], [-2531, -1497], [-378, -5498], [5281, -1672], [2764, -3809], [-3717, -3103], [3250, 5368], [-4176, -377], [5348, 1784], [4704, -4155], [6500, 17], [-2116, -5880], [1673, 6164], [676, -41], [3924, -2170], [-3788, -6716], [63, 2854], [-3432, 1162], [-5998, -3624], [-670, -2125], [3512, 6002], [2732, 6210], [74, 6681], [3770, 1692], [-4276, 2552], [5930, 593], [-2904, 774], [-4075, 3460], [-1883, -231], [6120, -1287], [-443, 3432], [-4067, -2903], [-4323, -1440], [-1821, -3463], [-5849, 4839], [-570, 2695], [4939, 5920], [-4233, -2084], [-1349, 4736], [-2254, -5295], [1309, 1683], [866, 6051], [3567, 3199], [-3400, -1469], [6421, -3112], [6225, -1941], [-4443, 1927], [-1021, 2687], [-1952, 5196], [6540, 6386], [-1609, 6125], [1416, 795], [1950, -523], [-944, -1563], [2248, -6046], [5250, -3147], [-6358, 2413], [-4599, 6548], [3444, -3930], [4282, -4431], [309, -755], [-4290, 1882], [62, 5620], [-6483, 3220], [2731, 3583], [483, -129], [6008, -4920], [2221, 4359], [1586, -2925], [3582, -6035], [873, -5494], [2814, -6358], [-4080, -5004], [2505, 4103], [4433, 1161], [3227, 3075], [-3703, -1170], [1662, -844], [5291, 1476], [-3459, 5612], [-5879, -4103]], "ahyexxlllgyucpczjrfsbvgaumawfyjrsvpufvlcnmkozxbmtunwopgidhvkssqfoomlocpfmljrbuxqmj") == 7', 'assert maxPointsInsideSquare([[7884, 1376], [-1500, -673], [-6731, 8716], [-2118, 2234], [8828, -4432], [-5051, 97], [-962, -9770], [-6538, -4185], [3855, -7904], [581, -6772], [-3368, -2411], [7421, -3283], [7277, -363], [4576, 7470], [-1283, -175], [6724, -5903], [717, -545], [1880, -1144], [-6784, 5672], [4760, -5302], [-255, 3006], [6997, -2253], [5938, 1717], [9703, 9187], [906, -362], [1123, -8184], [1447, -1376], [4980, 1764], [1787, -4887], [-5303, 3280], [-802, -5995], [-7251, 4903], [7994, -8625], [-2909, -280], [-9358, -9535], [-3021, -6614], [-5121, -4166], [-7822, 6657], [1273, -6961], [1059, 6782], [-8717, -9328], [6772, -7930], [-3660, -1753], [6605, -3782], [566, 8636], [-4279, 439], [-1438, -8186], [-8286, -6841], [4905, 354], [-2665, 3531], [2056, 5566], [-3923, 1492], [9253, -2886], [-6773, 149], [-3740, 327], [8172, 3435], [5638, -4243], [7338, 0], [-5759, -4145], [-631, -6300], [7670, 2455], [-3580, -7156], [4133, -7954], [-1592, 3204], [-7282, -473], [746, -1582], [6381, 2667], [-9697, 7116], [2661, 1318], [-2635, -9591], [2638, -2360], [-1194, -1802], [4414, 742], [-4705, 5541], [-2759, 1189], [-87, -2586], [4842, 5006], [8623, -8712], [-7784, 4119], [-8858, -1544], [3804, 576], [7090, 6810], [-8821, 1315], [5911, 511], [-7072, 5435], [-5439, 8917], [-1427, -2574], [-8146, -6900], [4743, -4992], [-1942, -2499], [-8856, 8643], [1014, -6864], [9272, -5644], [-4485, -2884], [6317, -3189], [-5610, 2024], [6466, 9522], [1938, -8518], [-9722, 4204]], "ycjceurhxpazpjuzzldjofllisezjfvgvsjowovssmffzhjcquyrpuzvgvbgllrzwrczfviegrwmbyacvvvivqcrtmivymsehrm") == 6', 'assert maxPointsInsideSquare([[-1535, -1646], [-822, -1114], [1168, -655], [1796, -640], [-408, 1189], [-1849, -998], [-1460, -1795], [1600, -1456], [1428, -610], [-43, -1247], [-511, 225], [-1125, -1436], [-625, -810], [88, 890], [-4, 1475], [-536, -432], [-606, -1614], [-578, -1199], [-1132, -1738], [130, 1164], [772, -1840], [-1744, 39], [397, 1186], [507, 1032], [1139, -1065], [841, 1188], [-583, -1382], [894, 754], [555, -450], [1381, 1263], [38, -917], [1661, -489], [620, -1689], [1095, 98], [1598, -435], [1693, 1332], [723, -736], [-299, -1756], [-181, -258], [-1154, 1460], [-1583, -390], [-156, 1573], [-328, -811]], "abcdefghijklmnopqrstuvwxyzxguiymxgbnghytqmc") == 8', 'assert maxPointsInsideSquare([[8281, 4147], [-1006, -2253], [6405, -1474], [-9542, -5987], [2395, -2062], [-3, 9624], [7983, 3890], [-4978, -1030], [2779, 6438], [-2723, 6088], [6969, 3867], [2389, 871], [1085, 943], [-7714, -5935], [-1609, 8972], [7190, -5689], [1428, 4988], [-622, 7744], [-164, 4094], [1581, 1648], [-2722, -1495], [7300, 3836], [-7161, -2966], [-5452, 6924], [7693, -1361], [-451, -6689], [-2603, 7401], [7558, 3567], [5856, 1390], [-3692, -5157], [7130, -7409], [9029, 8662], [-9745, -1209], [3739, -4540], [-5895, -3591], [9537, 5337], [-8765, 9782], [-8381, -782], [7388, -1330], [2151, -475], [-4939, 6240], [-4104, 5446], [7062, -4366], [982, -2922], [3154, -8635], [9767, 5358], [-1144, 1918], [9002, 1068], [-306, -2561], [-5539, 5737], [4709, 4661], [6714, 4150], [-7772, 6097], [5308, -159], [8933, 5327], [8987, -68], [6776, -9225], [-3304, -9260], [2750, -1478], [5493, -9465], [-3100, 713], [8511, -9662], [8457, 9186], [4712, 1656], [-5452, -5769], [5240, 5206], [-7465, -8525], [813, -6540], [5496, 9514], [-9054, -7757], [-8028, 9669], [7022, 2056], [6497, -8099], [-2605, 7938], [-8108, -5690], [-2168, 5939], [943, 1469], [-4886, 4786], [8669, -4849], [-8684, 7957], [2193, -9769], [2239, 4422], [5739, -4153], [3148, 9258], [-9522, 714], [-305, 1366], [-5040, 9718], [3841, -7210], [2745, -2563], [-6463, -1287], [-9201, 9566], [3802, 5272], [5526, 8910], [8090, 7554], [4955, -3666], [-7420, 2760], [4841, 7522], [-2985, 8786], [4011, 9663]], "ybkggepbwyoqxohyzrxlwthbqtxspfpgneqjwalhxjiqhsbdqkibohhszmbydyxzsixbzpgkncxyhdhcyerhpefwkyuxtoajfae") == 5', 'assert maxPointsInsideSquare([[-356, -424], [901, -770], [-485, 222], [-1022, -206], [430, 712], [-566, -319], [-27, -637], [-202, 658], [1109, 845], [-712, 452], [621, -483], [720, 1167], [390, -1148], [1263, 1124], [357, 574], [1217, 493], [-1047, -821], [-1289, 7], [-311, -1048], [664, -662], [-802, 45], [361, 172], [1287, -847], [-668, 1056], [-756, -1293], [-815, -577], [-1276, 541], [96, 360], [-441, 30], [-619, 155], [563, -762], [-1168, 474], [-87, 71], [779, -737], [-795, 415], [573, -229]], "npkykpuuocgyeojiwisgvozbwppufdjiprpd") == 6', 'assert maxPointsInsideSquare([[-148, -128], [-50, -154], [23, 161], [72, 113], [36, 156], [34, -25], [53, -46], [45, -140], [55, -45], [-43, -152], [103, -167], [-150, -59], [-89, 19]], "afiakjafjkjaa") == 2', 'assert maxPointsInsideSquare([[-37, -35], [-61, -90], [-56, 64], [28, -111], [21, 124], [-24, -9], [-137, -13], [-119, 54], [88, -73], [4, -29], [142, 68], [-4, -92]], "clffklieeeii") == 4', 'assert maxPointsInsideSquare([[2591, -1804], [1781, 151], [191, -1513], [-1332, -373], [1949, 2324], [-2221, -1339], [-1088, -856], [2030, -215], [1663, 2604], [-2374, 731], [271, 1662], [-364, -1983], [424, 3012], [2962, -1798], [-3024, 817], [2894, 2328], [302, 966], [-1523, -407], [362, -2232], [-601, 1946], [-2015, -2206], [2659, 1102], [1729, 460], [1925, -1807], [-1243, -617], [-1406, 2082], [-474, -265], [-133, 1003], [2465, -2327], [-1342, 2029], [2140, 2623], [-2160, -786], [1006, -2330], [-1541, 1788], [-1145, 595], [547, -639], [-918, 314], [2230, 347], [-352, 1030], [431, -400], [-529, 1256], [2536, -74], [-1490, 702], [2542, -915], [2071, 1934], [247, 1522], [2926, -2275], [-983, 1778], [-2477, 1646], [-2826, 890], [1689, -2589], [1875, 2946], [1080, 1266], [-1471, 2515], [2104, 1974]], "qiuahqkyanehzlvljcshzogwjgfglhpzbsyqnryrbcavuzihzyzuapd") == 8', 'assert maxPointsInsideSquare([[-9, -36], [-5, 117], [-143, -50], [109, 114], [44, -48], [6, 68], [41, -53], [-31, -121], [-56, 95], [144, -83], [-19, 14], [20, 128]], "kdcbghiekgdj") == 5', 'assert maxPointsInsideSquare([[-406, -655], [-388, 839], [786, -492], [-90, -60], [-529, -158], [73, -183], [-128, 331], [-390, -191], [788, -372], [-399, 341], [-457, -608], [-471, 502], [-127, 587], [197, 539], [-540, -641], [-436, -229], [161, 663], [-30, -204], [847, -153], [356, -346], [133, 723], [734, 792], [-186, -495], [397, -178], [-581, 656], [-120, 148], [602, 860], [84, -811], [692, -854], [384, 420]], "ajkczfamsppaegbfieqkxxxccpeioh") == 7', 'assert maxPointsInsideSquare([[1885, -2805], [-1025, 938], [3446, 76], [3051, 618], [-17, -1073], [-3179, 2691], [2922, -1921], [936, -114], [-2854, -1944], [2545, 3248], [-3090, 3261], [-1401, 862], [-1805, -3303], [1117, -3177], [3427, 3106], [3494, -2916], [385, -1455], [-685, -2948], [-1957, -585], [-761, -3838], [1632, 645], [-150, 333], [-2796, -486], [-1744, 3673], [-800, 632], [1982, -2842], [1197, 826], [2642, 2526], [-2780, 3813], [-1125, -128], [-3714, -3079], [612, -3098], [-1778, 2558], [-3545, -3729], [211, -1097], [2921, 958], [-486, -3721], [2858, -1122], [171, -2428], [-3207, -1706], [-2584, 1803], [-3812, -1846], [2528, 2137], [1261, 1467], [2463, 694], [-2634, -237], [3744, 1319], [719, -1029], [-2094, 3841], [1746, -3293], [1756, -520], [2530, 1624], [2865, -3640], [3614, -2225], [607, -1148], [1335, 325], [3467, 2594], [2155, -2912], [852, 3087], [2686, -3256], [-2938, -2810], [-420, 302]], "abcdefghijklmnopqrstuvwxyzvyoaystiutoqaeczlyqlpzlkquwzzjwfyncx") == 9', 'assert maxPointsInsideSquare([[1591, 6590], [-5321, -4190], [-2500, -1860], [-6266, 5866], [2040, 3129], [-6821, -6586], [-367, -4890], [-153, 3417], [-5810, 3535], [580, 5229], [5824, 2972], [-6458, -3146], [-4168, 4807], [-2437, -6341], [-4907, 874], [-4488, -6876], [992, 1702], [1734, -4915], [3418, -6884], [3600, -4942], [-4440, 3928], [-1920, -5749], [-5891, -979], [2077, 1637], [3105, 2068], [-3369, -4560], [-2407, -5342], [-5879, -5656], [6002, 594], [-3533, 6922], [-3039, -2168], [-6172, 218], [-930, 675], [2301, 4003], [-574, 5708], [-6520, 3041], [-5057, -6944], [-3053, 6961], [-2526, 623], [46, 5390], [-2793, 549], [-7004, -2393], [6953, -3302], [2749, -1031], [5176, 6743], [-3870, -477], [-6649, 907], [-4853, -2116], [1135, 6835], [4702, -3056], [-3421, 6550], [300, -2865], [4097, 5402], [2664, 4391], [4729, 6099], [-3270, 1134], [-6523, -4305], [-1765, -6442], [-3181, -5949], [-802, 6299], [146, -6937], [6035, -6071], [4267, -1406], [-101, 2083], [7050, -4796], [-1417, -5829], [4372, -1729], [-2687, 1562], [5920, -2158], [3881, -4536], [-210, -5866], [796, 82], [725, 3107], [2723, -4770], [-547, -4246], [5799, 2584], [5561, -5793], [6615, -845], [1432, -2078], [5368, -6314], [-152, -1431], [4235, -6039], [-4982, -1337], [-2802, -6132]], "faywyswmjfdfgrfnpkzcicgqrfjpbrzukwozaamxndjpbuocqneudxvxfjadcvjmbhoczjqcoznhtipakmbn") == 2', 'assert maxPointsInsideSquare([[-1727, -80], [385, 2921], [89, -2915], [-2765, -2313], [2647, -2073], [-558, -2093], [-2431, -1378], [2460, -1756], [1745, 1027], [1816, 1448], [-240, -2601], [1145, 2922], [1911, -2732], [-2091, 2737], [-1011, -619], [2264, -2980], [2014, 1322], [1700, -976], [2759, -689], [-1778, -730], [728, -2780], [21, 1762], [2053, 1762], [-1304, 1572], [2848, 2019], [-1734, 169], [-2425, 2498], [2329, -1319], [388, -923], [-584, -2570], [1900, 198], [1768, -2672], [-404, 291], [-2586, -399], [2979, 2639], [-2146, 80], [1720, 2279], [2228, 2499], [-2726, 2247], [-2130, 503], [-1949, -282], [2435, -2235], [1003, -167], [-341, 2776], [-274, -979], [2697, -234], [1516, -2332], [2156, 2591], [-3117, -2331], [144, -287], [-2513, 2471], [41, -2030], [-1465, 2407], [1995, -2210], [1537, 958], [-1061, 3084]], "hljylkpfgoragnhfvmgyjugcufirqvrtfermkgsosjysrilcccttrsai") == 7', 'assert maxPointsInsideSquare([[35, -671], [-1238, 1695], [-36, 930], [578, 1564], [399, -1509], [-845, -390], [-1601, -215], [1600, 210], [1568, -37], [385, -663], [-1237, -1692], [-1152, -1585], [1628, 1287], [1526, -568], [-819, 962], [-969, 163], [-1332, 17], [-142, -1367], [1453, -1134], [-1531, 1316], [901, 63], [-1126, 1450], [-1641, 1218], [-982, 86], [169, 1459], [1363, -354], [-1435, 122], [1392, 1566], [882, 397], [182, 663], [-580, -1210], [1717, -635], [-873, -1459], [-59, 691], [-839, -1535], [1744, -760], [1145, -1167], [-1223, 364], [-706, -187], [-603, 45], [-1723, -1436], [1373, -1103]], "izwedpoblkckjhectfkjlupylljpmgegwtqygjugoq") == 1', 'assert maxPointsInsideSquare([[-6208, 5226], [3970, 2898], [5850, 5833], [-1195, 3141], [-7665, -3503], [171, -896], [1283, -727], [-6135, -3980], [6207, -6354], [633, 7420], [2385, 3182], [-19, 4306], [3009, -388], [6791, -8514], [356, -2806], [-4950, 5635], [7894, 4043], [257, 1529], [6171, -6195], [3010, 6882], [-6187, -7074], [-7243, 3164], [-2419, 1832], [-5842, 8786], [6621, 7774], [-5551, -4994], [2483, -8124], [3391, 561], [7436, -1119], [-7493, -988], [2847, 4193], [1568, -4826], [4407, 5421], [-7752, -555], [5363, -8380], [-2750, -1232], [7644, 498], [1178, -2340], [-2494, 8425], [-962, -8718], [-1727, -4212], [-5621, -368], [5742, 1447], [-4370, 3551], [4084, 7414], [6777, -5793], [-4718, 6519], [1959, -7935], [1679, 8648], [5992, 3890], [87, 4035], [-6503, 7032], [-2261, 7351], [-3501, -1063], [-6718, 278], [3585, -1607], [5021, 2243], [-5342, -7222], [3581, -7591], [-6347, 7603], [-8170, 1392], [4273, -6056], [-479, -4359], [-5558, -6499], [-4150, 373], [3493, -6688], [-1699, -441], [119, -1891], [-4439, 1080], [-3, 5685], [7705, 703], [-3304, -1070], [-5665, -914], [-3166, 7480], [861, -4045], [-6800, 3541], [5983, -1284], [-1451, 7008], [6626, -2656], [7600, 332], [4086, -6101], [-6890, 2759], [6454, 1214], [-6003, 215], [581, 2915], [4782, 5291], [4792, 8261], [4137, 2143], [3890, -4014], [8676, 1456], [3971, -5159], [508, -5179], [42, -6211], [-8407, -6940]], "abcdefghijklmnopqrstuvwxyzscfmeiuuwhqbnsbqabmdmtdthhkbrgewtmzzlhcngyqugjsiqdhaghrrnixxobjbgyeo") == 3', 'assert maxPointsInsideSquare([[-2087, 3266], [-2093, -1125], [2432, -2218], [751, 2741], [179, -2512], [308, -2890], [921, 412], [1292, 1486], [3286, -3748], [201, -1209], [-4176, 1013], [-4237, -3425], [-3154, -1341], [-561, 3284], [-264, 88], [172, 2941], [3640, 3485], [1673, -2676], [-3275, -3953], [-2894, -2451], [2720, -2501], [-1374, 3129], [3677, -3073], [-1311, 2504], [2034, 2289], [-4226, -1539], [-2993, -1952], [-2767, -2578], [1117, -1675], [2762, -3990], [-2263, -1228], [-2321, -886], [-1172, -1855], [-171, -1234], [-3069, 4037], [-1811, 291], [3427, -647], [-2237, -3565], [-1161, 1359], [742, 19], [1828, -3596], [-1410, -2602], [2354, -3227], [1769, -1331], [-4317, -2576], [-1959, 343], [986, -3779], [-3253, 3688], [-2529, -505], [726, -3382], [-3255, 3676], [-263, -3944], [1592, 2795], [2444, -91], [2486, 2680], [-411, -578], [-3761, 4271], [1970, -4114], [2702, -271], [390, -3773], [-4101, 3765], [-1297, -3539], [3486, 4326], [-3992, 2755], [135, 3563], [-3925, -1257]], "unjievqlgdubngcjbkscqqmtakwgksgtzxrnkgxskombsapmgzoljpjutfyhhktmon") == 6', 'assert maxPointsInsideSquare([[974, 1026], [-1244, -1017], [779, 29], [272, 293], [-421, 330], [1170, 1137], [1116, 1292], [1024, -906], [31, -600], [-39, -773], [991, -384], [-414, 1349], [-58, -327], [732, 936], [856, 1204], [788, 699], [1139, -879], [-1369, -916], [220, -566], [316, -739], [-851, -776], [-659, -1336], [-565, -1002], [-154, -138], [1278, 829], [-830, -1039], [328, 645], [-19, -79], [-898, -37], [104, -1338], [-1126, -768], [866, 303], [666, 555], [783, -632], [378, 1038], [-1244, 1304], [588, 941]], "epuedcjnfujlkdrqgdgwbheqbfomeggkhuhqi") == 11', 'assert maxPointsInsideSquare([[730, -1307], [-3870, -1562], [-4468, 919], [2182, -3164], [-4149, 2178], [-2298, 2137], [1587, 1691], [3725, 604], [2860, 3163], [-3296, -374], [-3969, 4201], [1711, -1605], [-1792, -1594], [-2247, -4097], [2725, -1490], [-100, 163], [-3982, 3581], [3800, -5039], [2308, 1908], [281, -1857], [-264, 4737], [-4636, 3957], [2761, 525], [-51, -1001], [-4307, 1848], [1283, -4860], [4773, 2795], [552, -58], [3031, 3228], [-552, -3205], [2296, -4006], [1114, 4163], [-2299, -4977], [4842, -3809], [4275, -2424], [2197, -2544], [53, -4605], [-2283, 1718], [1877, -183], [-4968, 3216], [1858, 4551], [3278, 2680], [-374, 3034], [-4767, -2368], [-3944, 1882], [4905, -1450], [-4847, -3212], [-1682, -397], [2757, 3376], [2843, 3707], [-1333, -2693], [1683, -3250], [282, 412], [-2830, 3739], [-1375, 2065], [1440, -4701], [-970, -4641], [4664, 633], [2706, 138], [2038, 1984], [-3844, 3701], [2103, -2609], [-1173, 2163], [-1021, 1823], [115, -1475], [1855, -2569], [1241, 2005], [-738, 1994], [1322, 1985], [-3345, -3714], [-3731, -4619]], "kzkurfsoehycucdiaonvvhqcaypqdvfdhjwujoqeshbpmllzfgquvpstcpjrmzrwuqnqfnc") == 8', 'assert maxPointsInsideSquare([[2447, 6691], [-6413, 6387], [6702, -4707], [-6420, -3114], [-6348, 919], [-3819, -1650], [-765, 6191], [-807, -5528], [-3961, 6108], [1931, -1755], [6389, 601], [-2420, -4475], [-6486, -170], [1032, 5823], [-192, 531], [-569, -403], [1097, -3113], [2780, 4048], [-2553, -1320], [-4071, -2979], [3909, 5270], [-4623, -3100], [-5486, 3559], [-335, -1371], [-1619, 3455], [5570, 6271], [-469, 6475], [2631, -4628], [1529, -6406], [-2692, 1589], [3056, 6713], [5527, 1837], [975, 1468], [5893, 5735], [6217, -4630], [5908, 6690], [6778, -2322], [-2971, 641], [-6588, -4636], [5452, -6302], [-6677, 355], [3518, 1326], [2144, 5640], [1593, 6202], [-4502, -3451], [5118, 6673], [-2996, 5380], [-3399, -983], [-1393, 2488], [5584, 3965], [6393, -765], [4892, 6832], [-2462, -2788], [2328, 4041], [-6576, -3237], [-4196, 100], [1587, -4097], [-1413, 4091], [10, 3308], [2163, 5436], [-338, -4071], [2959, -3491], [-4120, 2320], [505, 2427], [-6672, -3457], [-4225, -2805], [-2078, 6242], [-1426, -1351], [-4628, -2269], [-4162, -4792], [1262, -593], [6707, 4389], [-2561, -5695], [4805, 3847], [-1188, 4093], [1584, -6204], [-4514, -1379], [3765, 2078], [5907, 1948], [3018, 6227], [-3764, 6197], [-125, -1760], [-2302, -1199]], "vynytyumlzoulsdinnixjvhrgabzulxwyoudtzpgtudylxhdfweeqtwbbakxkatglfhmnvmvflkbnekgglp") == 4', 'assert maxPointsInsideSquare([[532, 1078], [-112, 238], [-321, 503], [417, 59], [865, -727], [-32, 17], [-182, 187], [564, -911], [-3, -423], [411, -271], [-311, -633], [995, 714], [-934, 703], [-132, -1018], [-623, 205], [-1080, -211], [-200, -115], [1019, -592], [-778, -154], [-419, -13], [369, 948], [563, 971], [766, -142], [-774, -1085], [308, -665], [-808, -1074], [-477, -733], [-491, 965], [-815, -363], [549, -439], [-953, 629], [-474, 109], [-391, 196]], "kmgpujljsbueitusgptqbdcfcrllhymko") == 10', 'assert maxPointsInsideSquare([[-53, 42], [62, 18], [-52, -58], [-21, -28], [-61, -55], [21, -28], [-52, -40], [19, 23], [-14, -61]], "cdfdbfebi") == 5', 'assert maxPointsInsideSquare([[-989, 629], [-215, -1812], [-451, 3809], [4608, 1592], [3598, -92], [3353, -4293], [-4268, -3482], [1673, -15], [-1496, -49], [2423, -1544], [4182, -1074], [-4062, -382], [1735, -3031], [1478, 1861], [1169, -3725], [4411, 810], [-4452, -503], [-4333, -3966], [4309, -344], [141, -848], [3728, 1262], [3282, 3872], [2828, -810], [-2595, 717], [-389, -1922], [-2103, -4325], [3979, 3636], [1595, -2915], [-4112, -1621], [4272, -1315], [-350, -3151], [-4035, 3499], [172, 1520], [652, 4062], [-2435, -1177], [-27, 2435], [-4559, 2932], [-4607, 3410], [-1675, 665], [-3049, 245], [1793, -3735], [756, -3451], [2555, 653], [78, -460], [3664, -4250], [218, -1813], [-2513, -311], [-197, -1438], [3536, 720], [-945, -280], [1194, -613], [3057, -743], [900, 205], [1957, -775], [-805, -3536], [-2918, 4253], [1485, 1621], [4139, -1978], [-2561, -3828], [2629, -3355], [1901, -3643], [2525, 1296], [1058, -3338], [-1314, 4531], [3312, 2218], [-386, 1295], [2397, -239], [-2768, 2955]], "abcdefghijklmnopqrstuvwxyzthhvldpdtcdfymyjtzybslwdlhenyybjguitcmvymk") == 7', 'assert maxPointsInsideSquare([[-2059, -1543], [2703, 1458], [1388, -45], [3110, 1829], [1068, 910], [2897, 1669], [1767, 771], [1149, -1037], [3051, -856], [638, 129], [2434, 114], [-1058, -598], [2203, -978], [1952, -1954], [916, -2749], [-1647, 1247], [-1048, 1194], [-1106, 1025], [1468, -859], [494, 212], [-1479, 2339], [473, 1529], [-368, 2967], [2806, 1615], [-401, 172], [-557, -2061], [-929, -997], [28, 894], [-2857, 609], [-714, -2494], [2272, -178], [142, -728], [-1937, 3107], [1058, 122], [-2645, -998], [1269, 1657], [862, -2120], [1529, -1056], [1605, 1222], [1434, -2557], [2855, 1667], [2454, -1268], [1084, -2867], [2126, -1994], [-3003, 573], [-2960, 989], [-1355, -528], [-2952, -2101], [670, -498], [2350, 561], [-3006, -65], [595, -2558], [1101, 423], [-2721, -858], [-1751, -367], [-906, 2581], [-2540, 1953]], "gljscagszsgguxcnottylfunbrhlbfrpavdbwhgegmsxpjurtcgkgsnna") == 10', 'assert maxPointsInsideSquare([[-5539, -4295], [1440, -3075], [3064, 1310], [3705, -1619], [4944, 1320], [3995, -262], [3586, -179], [4007, 5367], [71, -6836], [572, 1707], [-7129, -4413], [806, 5884], [6113, -280], [-2911, -2438], [-4148, -905], [6500, -2313], [3960, -4764], [-2204, -5133], [5880, 772], [-5986, -7167], [-5100, -6085], [5518, 3851], [3777, 4903], [2108, 927], [-2440, -4892], [-1349, -4728], [7269, 3593], [1447, 4515], [1172, 1512], [3846, 1090], [6676, 6399], [-4698, 4698], [7086, -1768], [-5906, -1279], [5667, 6514], [3726, 2772], [-1232, 4430], [4463, 2539], [-5251, -7128], [-1299, 1639], [-6914, 271], [4918, 6562], [-6268, 2730], [-4747, -133], [-3872, 4860], [-5611, 3745], [-5597, -1511], [-4752, 5814], [3508, -804], [5948, 6797], [-5444, -848], [301, -6195], [2421, 723], [-1663, -2104], [-2031, -6994], [4855, 4738], [3745, -6366], [2078, -4346], [-2969, 2570], [6023, 6197], [-4903, -6657], [4689, -5456], [5766, 4854], [7388, -4536], [2724, 3477], [3217, -5303], [-5592, 61], [7012, -2753], [2109, 4728], [1554, 5810], [6118, -6368], [5070, 1814], [-4075, 6372], [1998, 55], [-2827, 6923], [6622, 6892], [-3406, 2311], [-923, -4404], [7252, -2439], [3544, -1013], [-6985, 1888], [4623, -3678], [-5448, 498], [5265, -2695], [-1787, 2582], [-3704, 5139]], "fewgdqaysmbwmxbzpilyymqtybihpzduevlhvvwimrgbuafedqglfqpzpozgktxfwjeffqftnjcnqqsvjalbzd") == 9', 'assert maxPointsInsideSquare([[-716, -699], [1631, 858], [-951, 1046], [-600, 652], [1257, 1105], [1089, -1422], [1206, 1165], [-1042, 100], [1438, 650], [1125, 215], [-207, -217], [1575, -1463], [-140, 241], [-1517, -1691], [-1270, -300], [-910, -229], [-1669, -1539], [-1661, 952], [1577, -417], [-653, 58], [427, -1442], [1724, -116], [-1315, 1335], [-1112, 369], [-224, -149], [1362, -494], [-1227, -451], [-514, 1315], [-1334, 1478], [111, -1274], [-1372, 574], [-1667, -1268], [-799, -790], [-1483, 1344], [-575, -298], [437, -170], [349, -1479], [1272, -1401], [-398, 300], [-642, -1459], [1283, 1655], [-358, 1141]], "skeqaysnmvtfzsrbgmiwkiqrzlgcbolhejjbauxpmd") == 2', 'assert maxPointsInsideSquare([[-4607, 6451], [5631, -2434], [-16, -5014], [7418, -2717], [-5223, -795], [955, 3909], [5309, -3673], [4859, -4739], [2263, 6075], [5137, 2035], [1201, 2177], [-7781, -6594], [-3011, 6505], [7733, -2644], [7200, 4716], [4818, -5404], [-6247, 3380], [3723, -6587], [-214, -2541], [-479, 7577], [-4767, 2229], [-6750, -5821], [-793, -5421], [-2361, 7041], [-5880, 3809], [-3500, -6910], [-5312, -3708], [-5515, 7758], [-1925, 168], [1312, 3343], [4506, -4159], [-4698, -7512], [-6240, -1569], [-7355, -5403], [-2151, -4411], [-88, 134], [-1365, 3233], [-1803, 331], [4762, 4154], [-5442, -6482], [-452, 816], [2416, 7171], [-7483, -979], [1285, -6034], [243, 2760], [4234, 601], [2650, -5522], [-7041, -6180], [2602, 7698], [-1415, 5848], [1838, -2602], [-3790, 5415], [7676, 3146], [-6770, -7333], [7866, -7476], [6212, 7731], [-7833, 7265], [4416, -15], [680, -665], [684, -5683], [-6515, 2535], [2488, 4996], [-2515, 1576], [-6545, 6135], [-5396, -3654], [-3212, -1460], [-7713, 976], [-6532, -6800], [973, -5409], [-5159, 756], [-2511, -6496], [446, -4236], [2870, -7849], [43, 1502], [-6476, 775], [-3070, -1297], [-2496, 7169], [723, 4922], [-1740, 3391], [-2467, -7093], [-1158, -5025], [-1440, -6896], [-1540, 5224], [3870, 1526], [-3051, -6029], [-4394, -6862], [-1499, 7092], [-5249, -5445], [-2405, -2556]], "abcdefghijklmnopqrstuvwxyzxjiibogbpiiytxqurqliufvfkqqfojbqlgpxertxjlqplsovcpeemqnvkqbeyna") == 5', 'assert maxPointsInsideSquare([[3884, 958], [4407, 4084], [1854, -6335], [3617, -2875], [-3823, 2303], [1468, -2115], [-149, -5972], [5543, 6655], [4705, 1406], [6173, -6535], [4993, -1747], [-3378, 6296], [3426, 667], [5765, -5532], [6284, -3900], [1134, 1820], [822, 6663], [-4508, 4608], [-2853, -3863], [-4527, 1455], [-2362, -6447], [-5656, -3232], [48, 141], [-2047, -611], [5886, 4211], [-5113, 2853], [-184, -2507], [596, -4603], [2805, 4221], [3513, 5765], [-3844, 6672], [-222, 6247], [3682, 4443], [2868, -6450], [-5465, -757], [2350, -6622], [3614, -452], [-5229, -3941], [1294, 4828], [361, -1449], [-6632, 1302], [1540, 4902], [-1684, 3944], [3895, -3929], [1140, -1427], [-6819, 6516], [2693, -74], [5045, -1363], [-105, -3734], [6884, -3252], [-328, 3612], [3236, -2910], [-5802, -545], [6295, -3277], [-2460, 5793], [-4689, -2494], [6006, 6439], [-6518, -1894], [-2249, -1714], [-1204, 5732], [2983, -6481], [-6688, -3483], [-5629, -6334], [6554, 699], [38, 4571], [3685, -1277], [2322, 4595], [3854, -863], [-5710, 1505], [2336, -415], [-5922, -5061], [5544, 1296], [-3452, -3465], [-5681, -2300], [-6489, -5051], [5010, -4512], [6328, -6879], [3263, 1044], [1049, -1309], [2358, -2628], [6807, -5019], [-99, -4687], [-517, 1906]], "gljslvaszkkweolduunevthgeoiinlwbortcwpztdfgcklxpsitcskwpyawkmdjhmeiynjqewiezrymgcmg") == 6', 'assert maxPointsInsideSquare([[2362, 2458], [-1121, -1504], [-889, 1353], [2177, -1339], [-987, 643], [-1872, 1142], [-754, 1679], [-1027, 2229], [-1273, 1931], [2514, 745], [705, 2332], [752, 2348], [-243, 1071], [461, 710], [1872, 2547], [904, 1046], [1863, -237], [-964, 1218], [-2384, 139], [2342, 915], [1601, 967], [1735, 2377], [-1950, -940], [1271, -584], [1476, 972], [1638, -1012], [608, -1876], [-583, -957], [1586, 1602], [-834, 360], [-2521, -1687], [2461, -1633], [-1293, 1362], [981, -918], [559, 632], [644, 1510], [2117, 454], [138, 672], [-1078, 1374], [-2189, 53], [557, -1518], [-913, 413], [2114, -1546], [1697, -2165], [-2099, -1518], [-2454, -1071], [-1201, 2309], [-690, -451], [-1940, -1810], [1431, 249], [-1668, -391]], "froijieeuvujfwblndfjdacpntxvadheqdimofqzomqqnlehgak") == 7', 'assert maxPointsInsideSquare([[1526, -2660], [554, 188], [1807, -2153], [1337, 1374], [2708, 1193], [3240, 1529], [155, -2279], [1115, -924], [-1823, -1094], [-3092, 1323], [1575, -1680], [-1589, -1653], [-778, -446], [3025, 980], [2215, -390], [-165, -149], [374, -3045], [2933, 1486], [-304, 2431], [-1145, 1797], [-432, 1761], [-1407, 1263], [-337, 2788], [-1718, -2208], [1836, 767], [-106, 2384], [575, 243], [1450, -1114], [-455, -1300], [2605, -336], [-266, 1403], [-2236, -1312], [-2626, -1377], [-1539, -2848], [1408, -2930], [2139, -2926], [2844, 2790], [2269, -2520], [-1903, -1363], [1409, -1622], [39, 1831], [-1672, -517], [-3027, -2021], [-2146, 672], [-2400, -810], [-2675, -632], [2310, 2074], [1952, 1121], [1155, -2026], [-3182, 2973], [630, 3143], [1509, -1957], [-2706, 1000], [-834, -2858], [-2801, -2355], [-2627, 648], [2600, 92]], "dnsywmifersqpwtmkgaceypibfjvisrvxrfenhdxzngrohcgqggnwqxma") == 8', 'assert maxPointsInsideSquare([[3160, -1610], [-242, 2357], [-3111, 2976], [859, -2846], [-1441, -1388], [-3537, 319], [1746, -4118], [-580, -1727], [-2283, 324], [-3228, -1982], [-2288, 3069], [2344, -563], [380, -1683], [2496, -280], [-2008, 1106], [-1831, 3437], [-2550, 1218], [-3207, -3896], [746, 1036], [3993, -950], [2537, 3469], [1496, -7], [-1353, 479], [3395, -1819], [-2913, 954], [-524, -3250], [-1145, -2285], [1360, -3607], [-3251, 537], [2813, 1505], [-1381, 2697], [1849, -668], [-209, 1932], [-3093, 3602], [2332, 1697], [133, -1991], [-1419, -2066], [-3983, -4443], [-970, -1741], [665, -416], [-2037, -794], [2476, -2421], [-1800, 1566], [1581, -2574], [-2923, 3345], [-4450, -3660], [4428, 2360], [-2602, -376], [-1423, -3749], [1281, -4447], [943, 1844], [-3610, -2503], [-2397, -1528], [4478, -3448], [-4324, -2876], [-2165, 122], [1564, -1900], [3503, 1661], [3735, 615], [-2959, -1291], [-2569, 1969], [-2386, 1139], [1990, -1105], [1358, 1742], [-2745, -503], [193, -786], [-2632, 1863]], "abcdefghijklmnopqrstuvwxyzlijirrougednivsarredthnudemcjsfctzjnlghbm") == 5', 'assert maxPointsInsideSquare([[529, -627], [-526, 812], [-990, 317], [339, 389], [839, 837], [-1052, 169], [890, -656], [-295, 616], [-169, 1136], [767, -902], [-1070, -831], [260, -196], [1015, -304], [-1153, -949], [1215, 185], [-895, -793], [-513, -764], [-1036, -236], [951, 962], [-584, -98], [252, 1074], [446, 475], [-975, 36], [786, 899], [-204, -345], [-860, 486], [-665, -444], [-136, 13], [966, -392], [-756, -925], [-694, 867], [1076, -815], [736, -1], [-45, 842], [-234, 1023]], "axwynqwzwcujkiwzajdezukrpamnsulhlfl") == 10', 'assert maxPointsInsideSquare([[-1036, -6943], [6658, -5927], [-81, -7267], [-5830, 7258], [-7511, -5709], [6149, -2993], [6633, 3234], [-4089, -3063], [703, -7498], [5179, 1370], [5458, 6739], [2115, 5934], [6346, 6495], [-7474, 1739], [-5230, 2232], [-5444, 7110], [3323, 5573], [2211, -2124], [7731, 334], [2763, 3783], [-3085, 299], [-5293, 3260], [-210, -4588], [-3363, -6589], [-2671, -5347], [5966, -5263], [-5388, -5080], [-6560, -2807], [2979, 5121], [6549, -2112], [1430, 6060], [-3393, -3386], [-4932, -6204], [-3193, 3745], [371, 2477], [-4421, -1273], [-2468, 1395], [-7482, -5389], [2798, -7615], [-3504, 933], [-6072, 4682], [-4110, -1213], [4239, -1036], [-5617, 5108], [1487, 3885], [-3837, 2707], [6751, 1537], [2907, 6952], [364, 1000], [-4772, 2833], [-2503, -7375], [-3336, -1338], [-4724, 674], [-4732, 5160], [-5173, 6438], [-2648, 1834], [-39, -6620], [4463, -4119], [2797, 4935], [-4748, -331], [7560, -14], [-3098, -6800], [-1240, -4025], [1861, 5592], [2025, -5712], [-3057, -5538], [-6132, 7165], [-400, 6559], [811, 2916], [7408, 6427], [63, 7224], [-7500, 5698], [-3982, -6190], [4789, 7017], [-5662, 592], [-1444, 474], [-1224, 1948], [3579, -833], [3609, -5457], [-3311, 552], [-5738, -477], [-1628, 3270], [-163, -2297], [4600, -5912], [-129, -3330], [-1939, 7175], [303, 5248], [-2557, -2127]], "djbqazoqtrzthnkzfckpnulwrcahbjozshprfyhzwuraqozzdyaaeacjvkxarklfjfirjpyfgfdegevosoqvhvyo") == 9', 'assert maxPointsInsideSquare([[-364, -258], [-120, 348], [133, 104], [272, 388], [-334, -116], [-116, 44], [-384, -24], [340, 197], [-81, 165], [227, -358], [169, 89], [-176, -199], [373, -341], [-49, -105], [328, -235], [-195, -96], [89, -336], [311, -151], [-156, 125], [-77, 222]], "npscsnglklhfnersmnsn") == 3', 'assert maxPointsInsideSquare([[2033, -1952], [1323, -328], [-2023, -1499], [1177, 544], [498, 551], [573, 141], [1890, 1793], [-50, -1205], [822, -588], [74, 1182], [-344, 195], [-156, -2177], [-173, 123], [-2019, 1077], [1814, 31], [969, 1207], [1020, 33], [-1220, 229], [1542, -662], [-1050, 1698], [517, -865], [-25, -1224], [689, -1176], [-2286, 1511], [1748, 393], [996, 1177], [506, -1277], [2167, -2144], [1541, -2050], [1406, -227], [2191, -948], [91, -1470], [-6, 2117], [734, 1115], [558, 1633], [1468, -2254], [-2136, -241], [-1399, -905], [-1623, 516], [1353, 2288], [-370, 294], [1922, -1742], [-857, 1832], [2259, 700], [-260, -2177], [224, -1749], [-559, 543], [-1957, 1214]], "abcdefghijklmnopqrstuvwxyzyeipbmylahtbattyczvdxa") == 20', 'assert maxPointsInsideSquare([[270, 1209], [1684, -1478], [-1357, 1153], [335, -697], [1165, -884], [-676, -1294], [-690, 95], [-1612, 1036], [966, -579], [-1353, -1747], [-1580, 1214], [-301, 1160], [-1234, -1264], [-50, -1055], [1158, 138], [1568, -994], [-1395, 586], [-21, -414], [-617, 1262], [-1521, -418], [-624, 1585], [158, -457], [350, 675], [1344, -1612], [-1732, -1403], [-70, -210], [-29, -1672], [-1188, -61], [-1682, 434], [-485, -1012], [-329, 1250], [-584, 541], [1334, -998], [693, -427], [-1409, -979], [125, 538], [938, 305], [-1707, -455], [-175, -443], [235, -236], [-270, -446], [1050, -244]], "firwdzjkqjtpyrzgowwsffjprziqolawdvyrtgiabh") == 7', 'assert maxPointsInsideSquare([[1904, 7124], [-3273, -2779], [-7139, 470], [-34, 312], [1970, 7699], [1219, 4703], [1228, 3523], [1575, 1000], [549, 6790], [4161, -1248], [-2806, -5441], [7831, 68], [267, 5120], [-5814, 8209], [-2561, -8089], [-3625, -6553], [-3427, -6554], [8301, -1827], [-899, -8176], [-1237, 2728], [8306, -6023], [-1315, 7257], [2524, -4128], [1113, 1288], [-141, 2772], [673, -6728], [-6776, -1139], [-4759, -5835], [7785, -7041], [-7285, -2568], [2373, -6123], [3142, 4042], [2755, 4443], [1607, 7200], [-7475, -3220], [-5121, 4004], [-2623, 7005], [-1362, -5250], [-3385, -3816], [-6959, 4806], [-4854, 4963], [-6887, 6850], [6413, 5370], [-7734, -6432], [1940, -963], [5055, -4783], [2855, 7917], [586, -7340], [4845, 8246], [7541, -115], [2286, 41], [5615, -8150], [4648, 8079], [-4125, 1546], [4002, -2361], [3996, -6644], [-3903, 3565], [1858, 2871], [-7713, -3285], [-6996, -3535], [4894, -3239], [-3100, -1448], [-2047, -7219], [6014, -1156], [7542, 5672], [-6166, -7216], [2356, -4704], [-6695, 6782], [-2869, 5688], [-4250, 3837], [7929, -7458], [3119, -417], [-4695, 5791], [-964, 2061], [-1677, -3223], [5826, -637], [-4430, -3283], [-7897, 7403], [1243, 1581], [7112, -456], [-341, -6459], [-5931, -2013], [-8075, -4028], [-1267, 7551], [5405, 4322], [-102, -3517], [-3984, 6495], [3032, 70], [392, 1360], [-8286, -4684], [2588, 7062], [837, 4317]], "ozkowkbozqpnnoakzzkauqafkxbdjrsxxdyelcaxfkbidjencgpekmvlqnouzjutzdflkgnlacepvrrqrtzeljkdpskr") == 3', 'assert maxPointsInsideSquare([[-33, -35], [69, -52], [-55, 69], [-57, 58], [10, -3], [52, 21], [26, -40], [-21, 41], [-36, 37]], "hiaaibeid") == 4', 'assert maxPointsInsideSquare([[1393, 1763], [417, 486], [-1422, -1427], [-465, 2238], [1713, 1487], [1830, -69], [1312, -2438], [-386, -431], [1159, 1879], [-1192, -2344], [892, 1437], [868, 1555], [992, 1110], [-992, 1696], [441, -1821], [247, -1285], [1262, 907], [-840, -449], [1159, -1925], [-873, -2274], [-275, -1002], [65, 1884], [586, -443], [968, 1681], [574, 2191], [-600, 2381], [1006, 1942], [880, -550], [472, 954], [-1547, 791], [-1814, -1319], [-266, 650], [-2024, -2449], [-185, -486], [837, 1378], [-661, 2241], [407, 990], [-943, 230], [1052, -1057], [212, -1319], [-1272, -731], [528, 833], [203, -859], [1211, 2491], [426, -2224], [-2107, -1731], [514, -2097], [-1080, -1243], [-1639, 198], [918, 1736]], "abcdefghijklmnopqrstuvwxyzpfkhmkinraqpmidzeufufsyt") == 10', 'assert maxPointsInsideSquare([[-249, -943], [-157, -176], [-1250, 441], [-1325, -1497], [-1119, 20], [-1146, 892], [1076, 402], [826, 895], [266, 465], [1560, -49], [-617, 1377], [-1004, -1589], [-959, 36], [146, 1076], [1261, -1613], [-1339, -1128], [-1256, -806], [-1430, -313], [137, 201], [494, 1644], [-237, -1222], [1164, 1543], [-983, 481], [340, -1504], [816, -1006], [983, 758], [-866, -871], [431, 1099], [1214, 1404], [-71, 570], [244, -1203], [-648, -157], [1515, 859], [-1279, 1069], [-117, -1650], [14, 6], [591, -232], [-458, -861], [-1024, 463], [1474, 1039], [1178, -748]], "wctbpjzoxyrmvliuegfiuuqmosfhllkkwernvtubr") == 8', 'assert maxPointsInsideSquare([[2111, -32], [514, 135], [1672, 596], [-1895, -2159], [-902, -296], [-1330, 733], [-910, 2034], [-1442, 1505], [-280, -111], [2106, 2144], [1897, 1910], [-2085, -1682], [268, -1695], [-1690, -1473], [212, -1529], [-215, -368], [647, -1924], [-1026, 487], [-871, 841], [-416, -2013], [1300, 479], [735, 2172], [475, 1476], [876, -1641], [-1711, 961], [-1730, -2036], [-1830, -410], [1198, 1320], [-776, -1069], [377, 1819], [-1878, -883], [-1373, 1023], [-246, 226], [1194, -1401], [-305, -46], [570, -1699], [-1428, 1706], [-846, -713], [-924, -774], [1326, 362], [-2038, -1475], [941, 1468], [1862, -2054], [-2021, -1470], [-1852, 2024], [-1760, -783], [1906, 384]], "abcdefghijklmnopqrstuvwxyzsswnlgicdulcwpcvtyziv") == 1', 'assert maxPointsInsideSquare([[51292, -71705], [-87326, -48962], [52027, 74959], [34921, 105614], [-140538, -42447], [21429, -133842], [105340, -134416], [-114352, -42639], [99268, -87752], [105560, 26711], [11687, 44307], [-135803, 129426], [-54422, -14110], [88618, -103266], [-100985, -7666], [-55193, -138752], [19526, -44441], [55131, 84139], [1172, -123161], [-80926, 42743], [-137267, -117991], [35393, 130673], [23651, 16397], [-83022, -130141], [15954, 121953], [24263, 118869], [127091, -12149], [-95232, -139953], [38869, -100146], [55197, 7606], [-60310, -110956], [111336, -80695], [-129069, 131251], [43428, -43687], [121091, 78152], [90018, 10554], [9399, 135453], [1960, -135675], [-44821, -131984], [87314, 81175], [76031, 104146], [-86194, -108675], [18185, -85318], [98460, 108717], [-119420, -126647], [-8142, 122236], [100045, 87066], [5258, -11708], [-113201, 63498], [117261, 57432], [-65412, -84281], [90434, -11296], [16548, 33106], [107362, 111712], [-26973, 83617], [-71089, 113239], [-116092, -21434], [-33947, -48976], [84789, -23291], [6250, 117272], [-29381, 85245], [-46519, 105523], [-24697, -62571], [-134354, -58497], [-80060, -124005], [69428, -50392], [139660, 105390], [27680, 63611], [-2338, -69902], [-44423, -3915], [-27088, -48334], [-56767, -121547], [84447, 28726], [82145, 37032], [67262, -134516], [-86952, -113261], [24408, -31514], [51990, 107774], [-25727, 69324], [81758, 117581], [-29965, 106245], [-49555, -19631], [87710, 111509], [-71094, 73624], [-3552, -115983], [-29623, -2077], [-60568, 57663], [43940, 77273], [-83248, 95189], [-80272, 101290], [61085, 139858], [33851, 64319], [-23928, 111107], [55282, 45332], [48845, -1081], [-69382, -37823], [133686, -35404], [-106602, -27233], [-80034, -4708], [-72493, -33104], [-26479, -66329], [96230, 25379], [118089, -116204], [-33068, 131540], [-69278, 53658], [-4850, -31500], [-46812, -39293], [28729, -65428], [68151, -5120], [101011, 2866], [97904, 40013], [-145, -104005], [-76949, -59591], [-139356, -22523], [-55118, -91296], [-118432, 47964], [-39645, -10788], [114736, -137408], [-8806, 131199], [-56383, -104124], [-26012, -35735], [-42596, 124134], [-97632, 87257], [-99020, 64021], [-62002, 42992], [-7057, -7103], [110952, 14258], [2023, -77108], [-98252, -26935], [-41727, 102811], [106792, 36419], [38035, 133289], [128637, -24747], [-105321, 126753], [-28900, -111620], [-37879, -8152], [-60342, 130993], [92999, 5037], [132023, 122835], [-53093, 117759], [133250, 88196], [-136212, 116506], [22378, -129107], [-89839, 17828], [-26954, 77494], [-28917, 120173], [-43077, 115942], [-91554, -119915], [-139988, 134316], [-30036, -131409], [-117920, -34025], [-102331, -137667], [-73068, -102863], [-84373, 124109], [90980, -807], [-20150, 12791], [131550, 67934], [52508, -1133], [-94248, -43999], [-110096, 111806], [1062, 90441], [-89505, -139488], [126853, -19786], [-77273, -108522], [-6583, -51446], [63209, 114575], [79875, 18923], [38904, -27845], [7938, -21242], [-129094, 104754], [-51779, -33237], [129504, -139880], [87700, -74904], [-117765, 22979], [-127151, 111006], [58044, -88887], [-104382, -95370], [101604, -135033], [-29400, -63727], [-92739, -89076], [71530, 28352], [72360, -17259], [-11157, -120044], [127551, -29846], [-50481, -129983], [63344, 118394], [3887, 36861], [-129024, 85255], [79535, 58445], [-30385, -17645], [80253, 95953], [6007, 111857], [55219, -44379], [-78726, -33009], [-127647, -80784], [26431, 23969], [135162, 115499], [-127326, 47554], [130532, 91212], [84029, 127941], [136992, 6700], [10946, 11486], [23894, -36847], [-11980, 103028], [-57481, -63414], [134683, 72836], [-129262, 129480], [24336, -15332], [78884, -14500], [-68268, -1489], [56199, 62040], [-60162, 69700], [120241, 93909], [65106, 46261], [-105449, 71560], [-62129, 89321], [43177, -98135], [44271, -82997], [39730, 67849], [-77212, 38826], [-111537, -15979], [-133216, -120695], [-81413, -94642], [-111874, 53794], [-101050, 23406], [117553, -50587], [-26451, 62658], [35478, -29734], [-77378, 62483], [-58183, -78783], [-31156, 19646], [117079, 19411], [55799, -74353], [63555, 28621], [16299, 84454], [-95340, -96299], [-113516, -7858], [132945, 33771], [-80131, -57521], [89920, -9249], [51598, -44983], [137049, 79081], [-71238, 139305], [72885, 41598], [15704, 132822], [115988, 25024], [23485, -93982], [129188, -20182], [-131535, 74529], [91732, -112833], [6783, -29215], [46963, -92790], [-9148, 107457], [57674, 59979], [23092, -58714], [-20396, 80638], [-9351, 109242], [-41514, 53229], [-49032, -125431], [56905, -61173], [-23783, -111262], [-31349, -97958], [-56640, 29436], [-43460, 19991], [84243, 128578], [64788, -103709], [66551, 79663], [-59429, 80120], [101854, -37566], [131028, -118707], [-110622, -29924], [-125928, 27746], [30187, -22261], [-72671, -130391], [62527, -43095], [112458, 129246], [37305, -44219], [113018, 44588], [-119466, 129926], [26691, 120188], [-129240, 83412], [138021, 50395], [-15517, -49522], [81808, -119190], [-78415, 74401], [46960, 86366], [40459, -24894], [5910, -77288], [59665, 123709], [-67968, -136432], [93049, 42426], [-69028, -22858], [-65641, -51466], [18868, 96134], [-31778, -20110], [22383, 104695], [-49243, -85351], [94080, -17054], [-118935, -76323], [-74759, -95795], [-47985, 44480], [-69103, 16724], [-11222, -29369], [-125790, 26821], [71254, -82222], [104559, 103604], [-109137, -34275], [-57653, -35458], [-128566, 129086], [-86629, 127685], [-75358, -128726], [-14607, 139324], [-87595, 39198], [115386, 96315], [-12762, 33889], [-32840, -71067], [34612, -55724], [113575, -132622], [-83613, 41134], [-95407, -95800], [21642, -8279], [66561, 136255], [-51944, 81283], [27689, -133365], [-104833, -69879], [-47975, -135581], [111253, 140587], [-75070, 70092], [110538, -39649], [-33811, -97878], [-45057, 12603], [-103655, 136694], [-17147, 94956], [102313, 99027], [59773, 124425], [135392, 1345], [-23150, -14617], [117092, -53577], [109200, -30279], [-120559, -22407], [-76773, -50809], [-103359, 83972], [56026, 8307], [132973, 84090], [-95819, -55413], [-25122, -18378], [96674, -2059], [18677, -21692], [-135115, 46455], [130551, -97723], [136033, -55134], [46959, 67504], [-116770, -93635], [-116955, -130773], [76854, 30173], [-109665, -100343], [-55346, 85371], [48466, -19004], [-100241, -110519], [-125512, 82272], [45204, -927], [13572, 120013], [-38948, 73325], [49667, -108923], [-11115, 94427], [-128482, -102815], [-65734, -55118], [-85498, -33992], [-64790, 22176], [135110, -122008], [1321, -40946], [-26845, 123616], [-97343, -56095], [57540, -93185], [-36852, -38992]], "lpzjcmozshatqffqrpzqablqjgvhfrfitezbqempzdfxtdplypmbddljvfxmxobkdsscmykvdobgoashaxxrkbfvkqjeynawchwtwdkotdpgdwklepgndkymfjyyzqevpcaisfbjcvwzfulfghkjzjqgaoyarceosdkcxufreguimtzpssnknybqqobljyloppbqugupflzuxjmnqhpjwednufuxiqkkhzuwilbdtyifdayivlhaopzdhwwshufsryaupnnzrwckwlhhuxxgmoeugygpppvwdqwtbmemzmmabropzblecrsnewihgrdoyvbajlqcjkhjxeocwkbbiqqzxvmqtgcyfsnlwslamaewoysotqrnxad") == 2', 'assert maxPointsInsideSquare([[42879, -35723], [-60870, 51918], [-36899, 90705], [-85055, -49281], [-89488, 51595], [-23234, -87577], [14997, 106612], [99338, -10975], [22639, -107277], [58428, -63156], [26437, 104525], [34914, 27366], [-105674, 33367], [49282, 88603], [27959, 104365], [56703, -34745], [-91377, 35679], [70930, 5403], [82481, -102567], [-27008, 109059], [-93026, 1356], [-27781, 89613], [-19601, 98372], [-70950, -108875], [38482, -90896], [87978, 73701], [112607, 86288], [62258, -68688], [13493, 8232], [32427, 29098], [53959, 21199], [-65939, -52131], [55057, 11145], [-38003, -51612], [47242, -39305], [-69435, -616], [-79574, 17633], [-11474, -92301], [55410, 36684], [37094, -40328], [43769, -67545], [95277, 8044], [103633, -49583], [-66262, -44043], [33975, -78071], [-9967, -73691], [85482, -35976], [25198, -102109], [67094, -74551], [-37463, -22585], [-27183, 96744], [-7302, -26894], [-100966, 40486], [59500, 34698], [13699, 64576], [35017, 25148], [44325, -33605], [85983, 99572], [-5538, 42704], [-69646, 109552], [-17147, -28571], [-15085, 21761], [-75584, 77539], [-36184, 37492], [110251, 69522], [-18067, 317], [-71016, -73181], [84610, -113932], [-17312, -62705], [13172, -70006], [4185, -24626], [83213, -77690], [-93264, -5287], [86035, -51943], [-89933, -69503], [54230, -43807], [49817, -57451], [79535, 101301], [99638, -55076], [-79243, 35008], [-8634, -26728], [-40866, 2212], [107001, 12352], [-73733, -49954], [76469, -80601], [60445, 42744], [9095, 33567], [93096, -50033], [-62913, -41980], [-33189, 60196], [112179, 76567], [65348, -5122], [-5812, 17193], [-75913, 83093], [-52542, -76203], [81035, -59613], [-53088, 16419], [35831, 31974], [91792, 33931], [-39680, -52987], [-49805, -67129], [15926, 47540], [-110517, 11397], [-112081, -12386], [43169, 51799], [-11224, 57926], [9483, -107685], [-107639, -92930], [10237, 104075], [-19256, -37406], [-114054, 65351], [-79801, -68112], [-95051, 91783], [100123, -61222], [70613, -29822], [-74689, 10119], [-52071, 27291], [-3717, 20341], [-109901, -13659], [-102310, -96484], [13522, -111577], [-49798, 18057], [98263, -14426], [-77453, 73072], [13960, 76018], [-57171, -95595], [-8956, 41529], [33131, 39560], [22032, -58924], [33072, 36248], [87558, -88649], [-41918, -74719], [-108373, 75243], [76120, -61365], [-107845, -85352], [-101089, -66082], [94826, -110841], [79888, 36325], [-83485, -98758], [-4502, 76461], [69061, -109831], [75258, -26207], [94883, 55825], [-23488, 83652], [-71756, 28246], [-66817, -77942], [-53943, 4282], [49647, 60023], [-60091, -29968], [-75424, -27868], [-25589, 58349], [73303, 18216], [32704, -10494], [62127, 111183], [60996, -7807], [-76756, -10235], [-55585, -55949], [-4422, -52764], [-38935, 38261], [42346, 43484], [-71801, 108662], [-108355, 52576], [62858, 14124], [-37247, 85258], [56674, -8250], [-111746, -67758], [-65596, -9725], [-76565, 47], [-76017, 30076], [-400, -93826], [47141, -112226], [-23628, -3701], [37108, 15572], [-15828, -85458], [-54253, 88402], [62122, -104718], [-106901, 11296], [77785, -106697], [107806, 68277], [-57384, 17696], [4958, 47893], [-85482, -15018], [-24302, 110246], [-94784, -57068], [84418, -74226], [-113909, -665], [36401, 89111], [-38377, -36928], [109692, 40723], [-33585, 92592], [-60332, 107490], [94362, -36858], [-18937, -71096], [14447, -7437], [17911, 100883], [-107155, 70267], [32072, -39355], [38660, 110715], [74366, -98639], [-24468, 31718], [84014, -49483], [78679, 58681], [-88146, -104877], [105290, -48474], [-49795, 90532], [66526, 23847], [-69891, 82759], [-110611, 59192], [30945, 77956], [-84491, -1180], [-27999, -4148], [-88326, -92334], [27020, 47258], [-7007, -62044], [-95190, -99426], [-34941, 90927], [86929, 93529], [33368, -5723], [61622, 53435], [-27230, -90455], [107207, -107250], [-5097, -1062], [65981, -103123], [-12727, 30134], [85844, 108223], [-37470, 53244], [108039, 59967], [-42011, -52709], [68419, 77069], [99001, 24732], [35315, -15975], [683, 21517], [-24165, 55439], [-39277, -108619], [25336, -5671], [-69200, 2630], [40626, 11148], [-107232, 1938], [-109758, -8292], [105383, 15753], [-4863, -73688], [70835, -90464], [112590, 109796], [98255, 15622], [-107079, 14838], [35137, -63334], [-59653, 98027], [83984, -23017], [28111, -113607], [-85635, 109172], [81764, -73066], [-77442, 88662], [-1459, -1704], [61178, -63656], [-2618, 110849], [105248, 1680], [-27249, 11130], [103829, 93881], [-87330, -84799], [54208, 15972], [109883, 11080], [40212, -91829], [24010, -39265], [106087, -37764], [18359, -48794], [-24648, 112633], [-95292, 22535], [-84, 39124], [40257, -58940], [-97175, 83], [73906, -46884], [-18457, 49610], [110342, 106877], [113711, -79925], [96720, 100138], [91876, 98128], [-66234, -108512], [-92559, -76696], [-101442, 60157], [-75642, -52548], [-78636, -61110], [-106209, -62268], [22329, -84540], [28128, -97849], [9143, -39215], [54257, 75574], [71639, 62482], [-8512, -100296], [-37427, 41375], [32915, 44650], [-19405, -83426], [106910, -27927], [-53642, -9269], [-42919, -103711], [-85062, -1197], [107844, 25771], [105957, 10610], [-35056, -109315], [29654, 42050], [-23760, 14610], [-37133, 81560], [5507, -102098], [45311, -24357], [-69278, 55249], [-98000, 73006], [44721, 57536], [-99325, -69479], [-49468, 69451], [-79121, 52008], [-103147, 57694], [-52903, 17584], [-93511, 88101], [-5738, -52773], [-79716, -54663], [-39510, 20324], [37441, -89863], [79948, 1439], [2774, 3480], [55493, -28521], [-61911, 5249], [-99818, -93514], [84821, 106767], [113198, 75477], [86662, 87997], [-38256, -74743], [87751, 14405], [7153, 845], [20047, 98761], [-22458, 13507], [-81506, 41297], [93229, -86934], [-9752, 93908], [14018, 41824], [91991, -6857], [-1239, 87131], [-45102, -92276], [3796, 55285], [75955, -55873]], "abcdefghijklmnopqrstuvwxyzhbpwfnyqvordlonxjazghujnylifrhrxmycasramfubcsowzrnpfdvtvxqcfbydhxxhmqxxcpmgbgihkdjytnultztxwlbekfpjptwusbgeohauguatncvneaxvgetcheygrvuvuskhzheapomtytnzlsrngjjkkbzchnkroaylrouqstuavbswelxpcrfyofevsylxawtoblvdpahljiiyzyfaipwleduxlikhcbczzwmtpigmuyvocyaclyblwprihmbzjbwothbteihenaugeyuqbklqigcdnojakqyudsbufdnmhpfai") == 3']
correct = 0
for t in tests:
    try:
        exec(t)
        correct+=1
    except:
        pass
success = len(tests) == correct
print(correct,'/',len(tests))
print(success)